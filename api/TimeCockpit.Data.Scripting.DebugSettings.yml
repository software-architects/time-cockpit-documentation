### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Scripting.DebugSettings
  commentId: T:TimeCockpit.Data.Scripting.DebugSettings
  id: DebugSettings
  parent: TimeCockpit.Data.Scripting
  children:
  - TimeCockpit.Data.Scripting.DebugSettings.#ctor
  - TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup
  - TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging
  - TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath
  langs:
  - csharp
  - vb
  name: DebugSettings
  nameWithType: DebugSettings
  fullName: TimeCockpit.Data.Scripting.DebugSettings
  type: Class
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Scripting
  summary: "\nSettings for script debugging/execution.\n"
  syntax:
    content: public class DebugSettings
    content.vb: Public Class DebugSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.Scripting.DebugSettings.#ctor
  commentId: M:TimeCockpit.Data.Scripting.DebugSettings.#ctor
  id: '#ctor'
  parent: TimeCockpit.Data.Scripting.DebugSettings
  langs:
  - csharp
  - vb
  name: DebugSettings()
  nameWithType: DebugSettings.DebugSettings()
  fullName: TimeCockpit.Data.Scripting.DebugSettings.DebugSettings()
  type: Constructor
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Scripting
  syntax:
    content: public DebugSettings()
    content.vb: Public Sub New
  overload: TimeCockpit.Data.Scripting.DebugSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging
  commentId: P:TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging
  id: EnableDebugging
  parent: TimeCockpit.Data.Scripting.DebugSettings
  langs:
  - csharp
  - vb
  name: EnableDebugging
  nameWithType: DebugSettings.EnableDebugging
  fullName: TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Scripting
  summary: "\nGets or sets a value indicating whether script debugging should be enabled.\n"
  syntax:
    content: public bool EnableDebugging { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property EnableDebugging As Boolean
  overload: TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup
  commentId: P:TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup
  id: BreakOnStartup
  parent: TimeCockpit.Data.Scripting.DebugSettings
  langs:
  - csharp
  - vb
  name: BreakOnStartup
  nameWithType: DebugSettings.BreakOnStartup
  fullName: TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Scripting
  summary: "\nGets or sets a value indicating whether execution should break on script startup.\n"
  syntax:
    content: public bool BreakOnStartup { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property BreakOnStartup As Boolean
  overload: TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath
  commentId: P:TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath
  id: ModelScriptBasePath
  parent: TimeCockpit.Data.Scripting.DebugSettings
  langs:
  - csharp
  - vb
  name: ModelScriptBasePath
  nameWithType: DebugSettings.ModelScriptBasePath
  fullName: TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Scripting
  summary: "\nGets or sets the base path for model script storage.\n"
  syntax:
    content: public string ModelScriptBasePath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ModelScriptBasePath As String
  overload: TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: TimeCockpit.Data.Scripting
  commentId: N:TimeCockpit.Data.Scripting
  isExternal: true
  name: TimeCockpit.Data.Scripting
  nameWithType: TimeCockpit.Data.Scripting
  fullName: TimeCockpit.Data.Scripting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Scripting.DebugSettings.#ctor*
  commentId: Overload:TimeCockpit.Data.Scripting.DebugSettings.#ctor
  isExternal: true
  name: DebugSettings
  nameWithType: DebugSettings.DebugSettings
  fullName: TimeCockpit.Data.Scripting.DebugSettings.DebugSettings
- uid: TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging*
  commentId: Overload:TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging
  isExternal: true
  name: EnableDebugging
  nameWithType: DebugSettings.EnableDebugging
  fullName: TimeCockpit.Data.Scripting.DebugSettings.EnableDebugging
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup*
  commentId: Overload:TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup
  isExternal: true
  name: BreakOnStartup
  nameWithType: DebugSettings.BreakOnStartup
  fullName: TimeCockpit.Data.Scripting.DebugSettings.BreakOnStartup
- uid: TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath*
  commentId: Overload:TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath
  isExternal: true
  name: ModelScriptBasePath
  nameWithType: DebugSettings.ModelScriptBasePath
  fullName: TimeCockpit.Data.Scripting.DebugSettings.ModelScriptBasePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
