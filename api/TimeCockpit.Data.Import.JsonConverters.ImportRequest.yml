### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  commentId: T:TimeCockpit.Data.Import.JsonConverters.ImportRequest
  id: ImportRequest
  parent: TimeCockpit.Data.Import.JsonConverters
  children:
  - TimeCockpit.Data.Import.JsonConverters.ImportRequest.#ctor(System.String,System.Byte[],System.Boolean,System.Boolean)
  - TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition
  - TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON(Newtonsoft.Json.JsonReader)
  - TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport
  - TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess
  - TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData
  - TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.JsonConverters.ImportRequest)
  langs:
  - csharp
  - vb
  name: ImportRequest
  nameWithType: ImportRequest
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: ImportRequest
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 17
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nclass holding data of an import request.\n"
  example: []
  syntax:
    content: public class ImportRequest
    content.vb: Public Class ImportRequest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.#ctor(System.String,System.Byte[],System.Boolean,System.Boolean)
  commentId: M:TimeCockpit.Data.Import.JsonConverters.ImportRequest.#ctor(System.String,System.Byte[],System.Boolean,System.Boolean)
  id: '#ctor(System.String,System.Byte[],System.Boolean,System.Boolean)'
  parent: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  langs:
  - csharp
  - vb
  name: ImportRequest(String, Byte[], Boolean, Boolean)
  nameWithType: ImportRequest.ImportRequest(String, Byte[], Boolean, Boolean)
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ImportRequest(System.String, System.Byte[], System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 26
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nInitializes a new instance of the <xref href=\"TimeCockpit.Data.Import.JsonConverters.ImportRequest\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ImportRequest(string definition, byte[] sourceData, bool saveOnSuccess, bool produceReport)
    parameters:
    - id: definition
      type: System.String
      description: XAML representation of the import definition.
    - id: sourceData
      type: System.Byte[]
      description: source data to import from.
    - id: saveOnSuccess
      type: System.Boolean
      description: true if imported data should be saved.
    - id: produceReport
      type: System.Boolean
      description: true if a report should be produced.
    content.vb: Public Sub New(definition As String, sourceData As Byte(), saveOnSuccess As Boolean, produceReport As Boolean)
  overload: TimeCockpit.Data.Import.JsonConverters.ImportRequest.#ctor*
  nameWithType.vb: ImportRequest.ImportRequest(String, Byte(), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ImportRequest(System.String, System.Byte(), System.Boolean, System.Boolean)
  name.vb: ImportRequest(String, Byte(), Boolean, Boolean)
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition
  commentId: P:TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition
  id: Definition
  parent: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  langs:
  - csharp
  - vb
  name: Definition
  nameWithType: ImportRequest.Definition
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: Definition
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 37
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nGets the definition for the import\n"
  example: []
  syntax:
    content: public string Definition { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Definition As String
  overload: TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData
  commentId: P:TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData
  id: SourceData
  parent: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  langs:
  - csharp
  - vb
  name: SourceData
  nameWithType: ImportRequest.SourceData
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: SourceData
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 42
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nGets the data representing the import source (xlsx workbook or csv file)\n"
  example: []
  syntax:
    content: public byte[] SourceData { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property SourceData As Byte()
  overload: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess
  commentId: P:TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess
  id: SaveOnSuccess
  parent: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  langs:
  - csharp
  - vb
  name: SaveOnSuccess
  nameWithType: ImportRequest.SaveOnSuccess
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: SaveOnSuccess
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 47
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nGets a value indicating whether if the resulting entity objects should be saved or not.\n"
  example: []
  syntax:
    content: public bool SaveOnSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property SaveOnSuccess As Boolean
  overload: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport
  commentId: P:TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport
  id: ProduceReport
  parent: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  langs:
  - csharp
  - vb
  name: ProduceReport
  nameWithType: ImportRequest.ProduceReport
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: ProduceReport
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 52
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nGets a value indicating whether a report describing the import should be produced or not.\n"
  example: []
  syntax:
    content: public bool ProduceReport { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ProduceReport As Boolean
  overload: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.JsonConverters.ImportRequest)
  commentId: M:TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.JsonConverters.ImportRequest)
  id: ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.JsonConverters.ImportRequest)
  parent: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  langs:
  - csharp
  - vb
  name: ToJSON(JsonWriter, ImportRequest)
  nameWithType: ImportRequest.ToJSON(JsonWriter, ImportRequest)
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON(Newtonsoft.Json.JsonWriter, TimeCockpit.Data.Import.JsonConverters.ImportRequest)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: ToJSON
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 59
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nWrites the json.\n"
  example: []
  syntax:
    content: public static void ToJSON(JsonWriter writer, ImportRequest importRequest)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer.
    - id: importRequest
      type: TimeCockpit.Data.Import.JsonConverters.ImportRequest
      description: the request parameters.
    content.vb: Public Shared Sub ToJSON(writer As JsonWriter, importRequest As ImportRequest)
  overload: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON(Newtonsoft.Json.JsonReader)
  commentId: M:TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON(Newtonsoft.Json.JsonReader)
  id: FromJSON(Newtonsoft.Json.JsonReader)
  parent: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  langs:
  - csharp
  - vb
  name: FromJSON(JsonReader)
  nameWithType: ImportRequest.FromJSON(JsonReader)
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON(Newtonsoft.Json.JsonReader)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    id: FromJSON
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportRequest.cs
    startLine: 86
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import.JsonConverters
  summary: "\nReads a <xref href=\"TimeCockpit.Data.Import.JsonConverters.ImportRequest\" data-throw-if-not-resolved=\"false\"></xref> from a json reader.\n"
  example: []
  syntax:
    content: public static ImportRequest FromJSON(JsonReader reader)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: the reader to read from.
    return:
      type: TimeCockpit.Data.Import.JsonConverters.ImportRequest
      description: returns the read ImportRequest.
    content.vb: Public Shared Function FromJSON(reader As JsonReader) As ImportRequest
  overload: TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TimeCockpit.Data.Import.JsonConverters
  commentId: N:TimeCockpit.Data.Import.JsonConverters
  isExternal: false
  name: TimeCockpit.Data.Import.JsonConverters
  nameWithType: TimeCockpit.Data.Import.JsonConverters
  fullName: TimeCockpit.Data.Import.JsonConverters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest
  commentId: T:TimeCockpit.Data.Import.JsonConverters.ImportRequest
  parent: TimeCockpit.Data.Import.JsonConverters
  isExternal: false
  name: ImportRequest
  nameWithType: ImportRequest
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.#ctor*
  commentId: Overload:TimeCockpit.Data.Import.JsonConverters.ImportRequest.#ctor
  isExternal: false
  name: ImportRequest
  nameWithType: ImportRequest.ImportRequest
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ImportRequest
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition*
  commentId: Overload:TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition
  isExternal: false
  name: Definition
  nameWithType: ImportRequest.Definition
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.Definition
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData*
  commentId: Overload:TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData
  isExternal: false
  name: SourceData
  nameWithType: ImportRequest.SourceData
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SourceData
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess*
  commentId: Overload:TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess
  isExternal: false
  name: SaveOnSuccess
  nameWithType: ImportRequest.SaveOnSuccess
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.SaveOnSuccess
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport*
  commentId: Overload:TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport
  isExternal: false
  name: ProduceReport
  nameWithType: ImportRequest.ProduceReport
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ProduceReport
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON*
  commentId: Overload:TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON
  isExternal: false
  name: ToJSON
  nameWithType: ImportRequest.ToJSON
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.ToJSON
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON*
  commentId: Overload:TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON
  isExternal: false
  name: FromJSON
  nameWithType: ImportRequest.FromJSON
  fullName: TimeCockpit.Data.Import.JsonConverters.ImportRequest.FromJSON
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
