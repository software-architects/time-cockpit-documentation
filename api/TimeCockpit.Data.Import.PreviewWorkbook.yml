### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Import.PreviewWorkbook
  commentId: T:TimeCockpit.Data.Import.PreviewWorkbook
  id: PreviewWorkbook
  parent: TimeCockpit.Data.Import
  children:
  - TimeCockpit.Data.Import.PreviewWorkbook.#ctor(System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet})
  - TimeCockpit.Data.Import.PreviewWorkbook.Read(Newtonsoft.Json.Linq.JObject)
  - TimeCockpit.Data.Import.PreviewWorkbook.Worksheets
  - TimeCockpit.Data.Import.PreviewWorkbook.Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.PreviewWorkbook)
  langs:
  - csharp
  - vb
  name: PreviewWorkbook
  nameWithType: PreviewWorkbook
  fullName: TimeCockpit.Data.Import.PreviewWorkbook
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    id: PreviewWorkbook
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    startLine: 21
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nclass containing preview data for the import. This is similar to the ImportResult in \nthat it contains data from the source sheet, but differs in that it only contains string data\nin an rectangular form. It is used in the ImportDefinitionEditor if the user provided an\nexample data source. The editor can present the information from the example data in the UI.\n"
  example: []
  syntax:
    content: public class PreviewWorkbook
    content.vb: Public Class PreviewWorkbook
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.Import.PreviewWorkbook.#ctor(System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet})
  commentId: M:TimeCockpit.Data.Import.PreviewWorkbook.#ctor(System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet})
  id: '#ctor(System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet})'
  parent: TimeCockpit.Data.Import.PreviewWorkbook
  langs:
  - csharp
  - vb
  name: PreviewWorkbook(IEnumerable<PreviewWorksheet>)
  nameWithType: PreviewWorkbook.PreviewWorkbook(IEnumerable<PreviewWorksheet>)
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.PreviewWorkbook(System.Collections.Generic.IEnumerable<TimeCockpit.Data.Import.PreviewWorksheet>)
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    startLine: 27
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nInitializes a new instance of the PreviewWorkbook class.\n"
  example: []
  syntax:
    content: public PreviewWorkbook(IEnumerable<PreviewWorksheet> worksheets)
    parameters:
    - id: worksheets
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet}
      description: the worksheets.
    content.vb: Public Sub New(worksheets As IEnumerable(Of PreviewWorksheet))
  overload: TimeCockpit.Data.Import.PreviewWorkbook.#ctor*
  nameWithType.vb: PreviewWorkbook.PreviewWorkbook(IEnumerable(Of PreviewWorksheet))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.Import.PreviewWorkbook.PreviewWorkbook(System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.Import.PreviewWorksheet))
  name.vb: PreviewWorkbook(IEnumerable(Of PreviewWorksheet))
- uid: TimeCockpit.Data.Import.PreviewWorkbook.Worksheets
  commentId: P:TimeCockpit.Data.Import.PreviewWorkbook.Worksheets
  id: Worksheets
  parent: TimeCockpit.Data.Import.PreviewWorkbook
  langs:
  - csharp
  - vb
  name: Worksheets
  nameWithType: PreviewWorkbook.Worksheets
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.Worksheets
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    id: Worksheets
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    startLine: 35
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nGets the worksheets.\n"
  example: []
  syntax:
    content: public IEnumerable<PreviewWorksheet> Worksheets { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet}
    content.vb: Public ReadOnly Property Worksheets As IEnumerable(Of PreviewWorksheet)
  overload: TimeCockpit.Data.Import.PreviewWorkbook.Worksheets*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.PreviewWorkbook.Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.PreviewWorkbook)
  commentId: M:TimeCockpit.Data.Import.PreviewWorkbook.Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.PreviewWorkbook)
  id: Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.PreviewWorkbook)
  parent: TimeCockpit.Data.Import.PreviewWorkbook
  langs:
  - csharp
  - vb
  name: Write(JsonWriter, PreviewWorkbook)
  nameWithType: PreviewWorkbook.Write(JsonWriter, PreviewWorkbook)
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.Write(Newtonsoft.Json.JsonWriter, TimeCockpit.Data.Import.PreviewWorkbook)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    id: Write
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    startLine: 42
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nwrites a preview workbook to a json writer.\n"
  example: []
  syntax:
    content: public static void Write(JsonWriter writer, PreviewWorkbook workbook)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: the writer to write to.
    - id: workbook
      type: TimeCockpit.Data.Import.PreviewWorkbook
      description: the workbook to write.
    content.vb: Public Shared Sub Write(writer As JsonWriter, workbook As PreviewWorkbook)
  overload: TimeCockpit.Data.Import.PreviewWorkbook.Write*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Import.PreviewWorkbook.Read(Newtonsoft.Json.Linq.JObject)
  commentId: M:TimeCockpit.Data.Import.PreviewWorkbook.Read(Newtonsoft.Json.Linq.JObject)
  id: Read(Newtonsoft.Json.Linq.JObject)
  parent: TimeCockpit.Data.Import.PreviewWorkbook
  langs:
  - csharp
  - vb
  name: Read(JObject)
  nameWithType: PreviewWorkbook.Read(JObject)
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.Read(Newtonsoft.Json.Linq.JObject)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    id: Read
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/PreviewWorkbook.cs
    startLine: 63
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nReads a preview work book from a json object.\n"
  example: []
  syntax:
    content: public static PreviewWorkbook Read(JObject json)
    parameters:
    - id: json
      type: Newtonsoft.Json.Linq.JObject
      description: the JSON object to read from.
    return:
      type: TimeCockpit.Data.Import.PreviewWorkbook
      description: returns the newly read preview workbook.
    content.vb: Public Shared Function Read(json As JObject) As PreviewWorkbook
  overload: TimeCockpit.Data.Import.PreviewWorkbook.Read*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TimeCockpit.Data.Import
  commentId: N:TimeCockpit.Data.Import
  isExternal: false
  name: TimeCockpit.Data.Import
  nameWithType: TimeCockpit.Data.Import
  fullName: TimeCockpit.Data.Import
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Import.PreviewWorkbook.#ctor*
  commentId: Overload:TimeCockpit.Data.Import.PreviewWorkbook.#ctor
  isExternal: false
  name: PreviewWorkbook
  nameWithType: PreviewWorkbook.PreviewWorkbook
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.PreviewWorkbook
- uid: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet}
  commentId: T:System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.PreviewWorksheet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PreviewWorksheet>
  nameWithType: IEnumerable<PreviewWorksheet>
  fullName: System.Collections.Generic.IEnumerable<TimeCockpit.Data.Import.PreviewWorksheet>
  nameWithType.vb: IEnumerable(Of PreviewWorksheet)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.Import.PreviewWorksheet)
  name.vb: IEnumerable(Of PreviewWorksheet)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.Import.PreviewWorksheet
    name: PreviewWorksheet
    nameWithType: PreviewWorksheet
    fullName: TimeCockpit.Data.Import.PreviewWorksheet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.Import.PreviewWorksheet
    name: PreviewWorksheet
    nameWithType: PreviewWorksheet
    fullName: TimeCockpit.Data.Import.PreviewWorksheet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.Import.PreviewWorkbook.Worksheets*
  commentId: Overload:TimeCockpit.Data.Import.PreviewWorkbook.Worksheets
  isExternal: false
  name: Worksheets
  nameWithType: PreviewWorkbook.Worksheets
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.Worksheets
- uid: TimeCockpit.Data.Import.PreviewWorkbook.Write*
  commentId: Overload:TimeCockpit.Data.Import.PreviewWorkbook.Write
  isExternal: false
  name: Write
  nameWithType: PreviewWorkbook.Write
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.Write
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: TimeCockpit.Data.Import.PreviewWorkbook
  commentId: T:TimeCockpit.Data.Import.PreviewWorkbook
  parent: TimeCockpit.Data.Import
  isExternal: false
  name: PreviewWorkbook
  nameWithType: PreviewWorkbook
  fullName: TimeCockpit.Data.Import.PreviewWorkbook
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: TimeCockpit.Data.Import.PreviewWorkbook.Read*
  commentId: Overload:TimeCockpit.Data.Import.PreviewWorkbook.Read
  isExternal: false
  name: Read
  nameWithType: PreviewWorkbook.Read
  fullName: TimeCockpit.Data.Import.PreviewWorkbook.Read
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: false
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
