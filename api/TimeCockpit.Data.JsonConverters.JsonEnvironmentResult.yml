### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  commentId: T:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  id: JsonEnvironmentResult
  parent: TimeCockpit.Data.JsonConverters
  children:
  - TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser
  - TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error
  - TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings
  - TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets
  - TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  - TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  - TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.JsonConverters.JsonEnvironmentResult,TimeCockpit.Data.DataModel.Model)
  langs:
  - csharp
  - vb
  name: JsonEnvironmentResult
  nameWithType: JsonEnvironmentResult
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: JsonEnvironmentResult
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 18
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nRepresents an instance of <xref href=\"TimeCockpit.Data.Environment\" data-throw-if-not-resolved=\"false\"></xref>\nthat is used during json (de-)serialization.\n"
  example: []
  syntax:
    content: public class JsonEnvironmentResult
    content.vb: Public Class JsonEnvironmentResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser
  commentId: P:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser
  id: CurrentUser
  parent: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  langs:
  - csharp
  - vb
  name: CurrentUser
  nameWithType: JsonEnvironmentResult.CurrentUser
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: CurrentUser
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 23
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nGets or sets the current user of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EntityObject CurrentUser { get; set; }
    parameters: []
    return:
      type: TimeCockpit.Data.EntityObject
    content.vb: Public Property CurrentUser As EntityObject
  overload: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings
  commentId: P:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings
  id: GlobalSettings
  parent: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  langs:
  - csharp
  - vb
  name: GlobalSettings
  nameWithType: JsonEnvironmentResult.GlobalSettings
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: GlobalSettings
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 28
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nGets or sets the current global settings of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EntityObject GlobalSettings { get; set; }
    parameters: []
    return:
      type: TimeCockpit.Data.EntityObject
    content.vb: Public Property GlobalSettings As EntityObject
  overload: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets
  commentId: P:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets
  id: NamedSets
  parent: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  langs:
  - csharp
  - vb
  name: NamedSets
  nameWithType: JsonEnvironmentResult.NamedSets
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: NamedSets
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 33
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nGets or sets a collection of named sets.\n"
  example: []
  syntax:
    content: public IDictionary<string, NamedSet> NamedSets { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,TimeCockpit.Data.NamedSet}
    content.vb: Public Property NamedSets As IDictionary(Of String, NamedSet)
  overload: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error
  commentId: P:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error
  id: Error
  parent: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: JsonEnvironmentResult.Error
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: Error
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 41
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nGets or sets the error.\n"
  example: []
  syntax:
    content: public JsonErrorMessage Error { get; set; }
    parameters: []
    return:
      type: TimeCockpit.Data.JsonConverters.JsonErrorMessage
      description: "\nThe error.\n"
    content.vb: Public Property Error As JsonErrorMessage
  overload: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  commentId: M:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  id: ReadEnvironmentResult(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  parent: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  langs:
  - csharp
  - vb
  name: ReadEnvironmentResult(JsonReader, Model, Environment)
  nameWithType: JsonEnvironmentResult.ReadEnvironmentResult(JsonReader, Model, Environment)
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: ReadEnvironmentResult
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 50
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads an instance of <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> that is serialized in Json\n"
  example: []
  syntax:
    content: public static JsonEnvironmentResult ReadEnvironmentResult(JsonReader reader, Model model, Environment environment)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The reader that is used to read the Json string.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: The model used to deserialize entity objects.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: The current environment.
    return:
      type: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
      description: an instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function ReadEnvironmentResult(reader As JsonReader, model As Model, environment As Environment) As JsonEnvironmentResult
  overload: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  commentId: M:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  id: ReadNamedSets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  parent: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  langs:
  - csharp
  - vb
  name: ReadNamedSets(JsonReader, Model, Environment)
  nameWithType: JsonEnvironmentResult.ReadNamedSets(JsonReader, Model, Environment)
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: ReadNamedSets
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 121
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the a named set\n"
  example: []
  syntax:
    content: public static Dictionary<string, NamedSet> ReadNamedSets(JsonReader reader, Model model, Environment environment)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: the reader to read from.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: the model to use for reading.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: the environment used for reading.
    return:
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.NamedSet}
      description: Returns a new dictionary containing the named sets.
    content.vb: Public Shared Function ReadNamedSets(reader As JsonReader, model As Model, environment As Environment) As Dictionary(Of String, NamedSet)
  overload: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.JsonConverters.JsonEnvironmentResult,TimeCockpit.Data.DataModel.Model)
  commentId: M:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.JsonConverters.JsonEnvironmentResult,TimeCockpit.Data.DataModel.Model)
  id: Write(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.JsonConverters.JsonEnvironmentResult,TimeCockpit.Data.DataModel.Model)
  parent: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  langs:
  - csharp
  - vb
  name: Write(JsonWriter, JsonEnvironmentResult, Model)
  nameWithType: JsonEnvironmentResult.Write(JsonWriter, JsonEnvironmentResult, Model)
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write(Newtonsoft.Json.JsonWriter, TimeCockpit.Data.JsonConverters.JsonEnvironmentResult, TimeCockpit.Data.DataModel.Model)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    id: Write
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/JsonConverters/JsonEnvironmentResult.cs
    startLine: 168
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nWrites the json.\n"
  example: []
  syntax:
    content: public static void Write(JsonWriter writer, JsonEnvironmentResult environmentResult, Model model)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer.
    - id: environmentResult
      type: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
      description: The result of a REST query.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: the model used for writing.
    content.vb: Public Shared Sub Write(writer As JsonWriter, environmentResult As JsonEnvironmentResult, model As Model)
  overload: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TimeCockpit.Data.Environment
  commentId: T:TimeCockpit.Data.Environment
  parent: TimeCockpit.Data
  isExternal: false
  name: Environment
  nameWithType: Environment
  fullName: TimeCockpit.Data.Environment
- uid: TimeCockpit.Data.JsonConverters
  commentId: N:TimeCockpit.Data.JsonConverters
  isExternal: false
  name: TimeCockpit.Data.JsonConverters
  nameWithType: TimeCockpit.Data.JsonConverters
  fullName: TimeCockpit.Data.JsonConverters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data
  commentId: N:TimeCockpit.Data
  isExternal: false
  name: TimeCockpit.Data
  nameWithType: TimeCockpit.Data
  fullName: TimeCockpit.Data
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.DataContext
  commentId: T:TimeCockpit.Data.DataContext
  parent: TimeCockpit.Data
  isExternal: false
  name: DataContext
  nameWithType: DataContext
  fullName: TimeCockpit.Data.DataContext
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser*
  commentId: Overload:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser
  isExternal: false
  name: CurrentUser
  nameWithType: JsonEnvironmentResult.CurrentUser
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.CurrentUser
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  parent: TimeCockpit.Data
  isExternal: false
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings*
  commentId: Overload:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings
  isExternal: false
  name: GlobalSettings
  nameWithType: JsonEnvironmentResult.GlobalSettings
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.GlobalSettings
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets*
  commentId: Overload:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets
  isExternal: false
  name: NamedSets
  nameWithType: JsonEnvironmentResult.NamedSets
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.NamedSets
- uid: System.Collections.Generic.IDictionary{System.String,TimeCockpit.Data.NamedSet}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TimeCockpit.Data.NamedSet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, NamedSet>
  nameWithType: IDictionary<String, NamedSet>
  fullName: System.Collections.Generic.IDictionary<System.String, TimeCockpit.Data.NamedSet>
  nameWithType.vb: IDictionary(Of String, NamedSet)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TimeCockpit.Data.NamedSet)
  name.vb: IDictionary(Of String, NamedSet)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.NamedSet
    name: NamedSet
    nameWithType: NamedSet
    fullName: TimeCockpit.Data.NamedSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.NamedSet
    name: NamedSet
    nameWithType: NamedSet
    fullName: TimeCockpit.Data.NamedSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error*
  commentId: Overload:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error
  isExternal: false
  name: Error
  nameWithType: JsonEnvironmentResult.Error
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Error
- uid: TimeCockpit.Data.JsonConverters.JsonErrorMessage
  commentId: T:TimeCockpit.Data.JsonConverters.JsonErrorMessage
  parent: TimeCockpit.Data.JsonConverters
  isExternal: false
  name: JsonErrorMessage
  nameWithType: JsonErrorMessage
  fullName: TimeCockpit.Data.JsonConverters.JsonErrorMessage
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult*
  commentId: Overload:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult
  isExternal: false
  name: ReadEnvironmentResult
  nameWithType: JsonEnvironmentResult.ReadEnvironmentResult
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadEnvironmentResult
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: TimeCockpit.Data.DataModel.Model
  commentId: T:TimeCockpit.Data.DataModel.Model
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: Model
  nameWithType: Model
  fullName: TimeCockpit.Data.DataModel.Model
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  commentId: T:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
  parent: TimeCockpit.Data.JsonConverters
  isExternal: false
  name: JsonEnvironmentResult
  nameWithType: JsonEnvironmentResult
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: false
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets*
  commentId: Overload:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets
  isExternal: false
  name: ReadNamedSets
  nameWithType: JsonEnvironmentResult.ReadNamedSets
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.ReadNamedSets
- uid: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.NamedSet}
  commentId: T:System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.NamedSet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, NamedSet>
  nameWithType: Dictionary<String, NamedSet>
  fullName: System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.NamedSet>
  nameWithType.vb: Dictionary(Of String, NamedSet)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.NamedSet)
  name.vb: Dictionary(Of String, NamedSet)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.NamedSet
    name: NamedSet
    nameWithType: NamedSet
    fullName: TimeCockpit.Data.NamedSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.NamedSet
    name: NamedSet
    nameWithType: NamedSet
    fullName: TimeCockpit.Data.NamedSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write*
  commentId: Overload:TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write
  isExternal: false
  name: Write
  nameWithType: JsonEnvironmentResult.Write
  fullName: TimeCockpit.Data.JsonConverters.JsonEnvironmentResult.Write
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
