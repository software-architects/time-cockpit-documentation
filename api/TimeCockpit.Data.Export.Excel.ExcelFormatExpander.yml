### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander
  commentId: T:TimeCockpit.Data.Export.Excel.ExcelFormatExpander
  id: ExcelFormatExpander
  parent: TimeCockpit.Data.Export.Excel
  children:
  - TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  - TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  - TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation(System.DateTime)
  - TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst(System.DateTime)
  langs:
  - csharp
  - vb
  name: ExcelFormatExpander
  nameWithType: ExcelFormatExpander
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    id: ExcelFormatExpander
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    startLine: 15
  assemblies:
  - TimeCockpit.Data.Export
  namespace: TimeCockpit.Data.Export.Excel
  summary: "\nstatic class that can expand default patterns to the long, custom format counterparts\n"
  example: []
  syntax:
    content: public static class ExcelFormatExpander
    content.vb: Public Module ExcelFormatExpander
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation(System.DateTime)
  commentId: M:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation(System.DateTime)
  id: PrepareNoOperation(System.DateTime)
  parent: TimeCockpit.Data.Export.Excel.ExcelFormatExpander
  langs:
  - csharp
  - vb
  name: PrepareNoOperation(DateTime)
  nameWithType: ExcelFormatExpander.PrepareNoOperation(DateTime)
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation(System.DateTime)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    id: PrepareNoOperation
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    startLine: 22
  assemblies:
  - TimeCockpit.Data.Export
  namespace: TimeCockpit.Data.Export.Excel
  summary: "\nPrepares the no operation.\n"
  example: []
  syntax:
    content: public static DateTime PrepareNoOperation(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date time.
    return:
      type: System.DateTime
      description: Returns dateTime, unmodified.
    content.vb: Public Shared Function PrepareNoOperation(dateTime As Date) As Date
  overload: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst(System.DateTime)
  commentId: M:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst(System.DateTime)
  id: ToUtcFirst(System.DateTime)
  parent: TimeCockpit.Data.Export.Excel.ExcelFormatExpander
  langs:
  - csharp
  - vb
  name: ToUtcFirst(DateTime)
  nameWithType: ExcelFormatExpander.ToUtcFirst(DateTime)
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst(System.DateTime)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    id: ToUtcFirst
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    startLine: 32
  assemblies:
  - TimeCockpit.Data.Export
  namespace: TimeCockpit.Data.Export.Excel
  summary: "\nToes the UTC first.\n"
  example: []
  syntax:
    content: public static DateTime ToUtcFirst(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date time.
    return:
      type: System.DateTime
      description: returns the dateTime in UTC
    content.vb: Public Shared Function ToUtcFirst(dateTime As Date) As Date
  overload: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  commentId: M:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  id: GetExpandedDateTimeFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  parent: TimeCockpit.Data.Export.Excel.ExcelFormatExpander
  langs:
  - csharp
  - vb
  name: GetExpandedDateTimeFormat(String, CultureInfo, out Int32)
  nameWithType: ExcelFormatExpander.GetExpandedDateTimeFormat(String, CultureInfo, out Int32)
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat(System.String, System.Globalization.CultureInfo, out System.Int32)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    id: GetExpandedDateTimeFormat
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    startLine: 46
  assemblies:
  - TimeCockpit.Data.Export
  namespace: TimeCockpit.Data.Export.Excel
  summary: "\nGets the expanded date time format.\n"
  example: []
  syntax:
    content: public static string GetExpandedDateTimeFormat(string format, CultureInfo cultureInfo, out int excelDateFormatId)
    parameters:
    - id: format
      type: System.String
      description: The format.
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture info.
    - id: excelDateFormatId
      type: System.Int32
      description: The excel number format id, -1 if a custom format should be used.
    return:
      type: System.String
      description: "\nreturns the expanded date time pattern, which may be compatible with other formats (xlsx e.g.)\n"
    content.vb: Public Shared Function GetExpandedDateTimeFormat(format As String, cultureInfo As CultureInfo, ByRef excelDateFormatId As Integer) As String
  overload: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat*
  nameWithType.vb: ExcelFormatExpander.GetExpandedDateTimeFormat(String, CultureInfo, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat(System.String, System.Globalization.CultureInfo, ByRef System.Int32)
  name.vb: GetExpandedDateTimeFormat(String, CultureInfo, ByRef Int32)
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  commentId: M:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  id: GetExpandedNumberFormat(System.String,System.Globalization.CultureInfo,System.Int32@)
  parent: TimeCockpit.Data.Export.Excel.ExcelFormatExpander
  langs:
  - csharp
  - vb
  name: GetExpandedNumberFormat(String, CultureInfo, out Int32)
  nameWithType: ExcelFormatExpander.GetExpandedNumberFormat(String, CultureInfo, out Int32)
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat(System.String, System.Globalization.CultureInfo, out System.Int32)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    id: GetExpandedNumberFormat
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Export/Excel/ExcelFormatExpander.cs
    startLine: 111
  assemblies:
  - TimeCockpit.Data.Export
  namespace: TimeCockpit.Data.Export.Excel
  summary: "\nGets the expanded number format.\n"
  example: []
  syntax:
    content: public static string GetExpandedNumberFormat(string format, CultureInfo cultureInfo, out int excelNumberFormatId)
    parameters:
    - id: format
      type: System.String
      description: The format.
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture info.
    - id: excelNumberFormatId
      type: System.Int32
      description: the format id to use in excel, -1 if a custom format should be used
    return:
      type: System.String
      description: Returns the format pattern, null if a excelNumberFormat should be used.
    content.vb: Public Shared Function GetExpandedNumberFormat(format As String, cultureInfo As CultureInfo, ByRef excelNumberFormatId As Integer) As String
  overload: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat*
  nameWithType.vb: ExcelFormatExpander.GetExpandedNumberFormat(String, CultureInfo, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat(System.String, System.Globalization.CultureInfo, ByRef System.Int32)
  name.vb: GetExpandedNumberFormat(String, CultureInfo, ByRef Int32)
references:
- uid: TimeCockpit.Data.Export.Excel
  commentId: N:TimeCockpit.Data.Export.Excel
  isExternal: false
  name: TimeCockpit.Data.Export.Excel
  nameWithType: TimeCockpit.Data.Export.Excel
  fullName: TimeCockpit.Data.Export.Excel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation*
  commentId: Overload:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation
  isExternal: false
  name: PrepareNoOperation
  nameWithType: ExcelFormatExpander.PrepareNoOperation
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.PrepareNoOperation
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst*
  commentId: Overload:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst
  isExternal: false
  name: ToUtcFirst
  nameWithType: ExcelFormatExpander.ToUtcFirst
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.ToUtcFirst
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat*
  commentId: Overload:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat
  isExternal: false
  name: GetExpandedDateTimeFormat
  nameWithType: ExcelFormatExpander.GetExpandedDateTimeFormat
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedDateTimeFormat
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: false
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat*
  commentId: Overload:TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat
  isExternal: false
  name: GetExpandedNumberFormat
  nameWithType: ExcelFormatExpander.GetExpandedNumberFormat
  fullName: TimeCockpit.Data.Export.Excel.ExcelFormatExpander.GetExpandedNumberFormat
