### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.DataModel.Relation
  commentId: T:TimeCockpit.Data.DataModel.Relation
  id: Relation
  parent: TimeCockpit.Data.DataModel
  children:
  - TimeCockpit.Data.DataModel.Relation.#ctor
  - TimeCockpit.Data.DataModel.Relation.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  - TimeCockpit.Data.DataModel.Relation.#ctor(TimeCockpit.Data.DataModel.Relation)
  - TimeCockpit.Data.DataModel.Relation.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  - TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName
  - TimeCockpit.Data.DataModel.Relation.BackReferenceName
  - TimeCockpit.Data.DataModel.Relation.DefaultValueExpression
  - TimeCockpit.Data.DataModel.Relation.DefaultValueFunction
  - TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue
  - TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression
  - TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction
  - TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression
  - TimeCockpit.Data.DataModel.Relation.InitializeObject
  - TimeCockpit.Data.DataModel.Relation.IsNullable
  - TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange(TimeCockpit.Data.EntityObject,System.String)
  - TimeCockpit.Data.DataModel.Relation.OnDeleteAction
  - TimeCockpit.Data.DataModel.Relation.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - TimeCockpit.Data.DataModel.Relation.ShallowCopy
  - TimeCockpit.Data.DataModel.Relation.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
  - TimeCockpit.Data.DataModel.Relation.StorageColumns
  - TimeCockpit.Data.DataModel.Relation.Target
  - TimeCockpit.Data.DataModel.Relation.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  langs:
  - csharp
  - vb
  name: Relation
  nameWithType: Relation
  fullName: TimeCockpit.Data.DataModel.Relation
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: Relation
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 25
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nRepresents a relation between two dimensions.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      [JsonObject(MemberSerialization.OptIn)]

      public class Relation : RelationBase, IDynamicMetaObjectProvider, INotifyPropertyChanged, IDataErrorInfo, INullable
    content.vb: >-
      <DataContract>

      <JsonObject(MemberSerialization.OptIn)>

      Public Class Relation
          Inherits RelationBase
          Implements IDynamicMetaObjectProvider, INotifyPropertyChanged, IDataErrorInfo, INullable
  inheritance:
  - System.Object
  - TimeCockpit.Data.DynamicObject
  - TimeCockpit.Data.DataModel.NamedDynamicObject
  - TimeCockpit.Data.DataModel.ModelElement
  - TimeCockpit.Data.DataModel.RelationBase
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider
  - System.ComponentModel.INotifyPropertyChanged
  - System.ComponentModel.IDataErrorInfo
  - TimeCockpit.Data.DataModel.INullable
  inheritedMembers:
  - TimeCockpit.Data.DataModel.RelationBase.Permissions
  - TimeCockpit.Data.DataModel.RelationBase.DataType
  - TimeCockpit.Data.DataModel.RelationBase.Attach(TimeCockpit.Data.DataModel.ModelElement)
  - TimeCockpit.Data.DataModel.RelationBase.RemovePermissions
  - TimeCockpit.Data.DataModel.ModelElement.ElementGuid
  - TimeCockpit.Data.DataModel.ModelElement.Name
  - TimeCockpit.Data.DataModel.ModelElement.Parent
  - TimeCockpit.Data.DataModel.ModelElement.Children
  - TimeCockpit.Data.DataModel.ModelElement.PersistBehavior
  - TimeCockpit.Data.DataModel.ModelElement.IsFullPersistBehavior
  - TimeCockpit.Data.DataModel.ModelElement.IsNonePersistBehavior
  - TimeCockpit.Data.DataModel.ModelElement.IsSystemElement
  - TimeCockpit.Data.DataModel.ModelElement.IsApplicationSpecificElement
  - TimeCockpit.Data.DataModel.ModelElement.IsUserElement
  - TimeCockpit.Data.DataModel.ModelElement.IsSystemOrApplicationSpecificElement
  - TimeCockpit.Data.DataModel.ModelElement.InvariantFriendlyName
  - TimeCockpit.Data.DataModel.ModelElement.CreationVersion
  - TimeCockpit.Data.DataModel.ModelElement.LastUpdateVersion
  - TimeCockpit.Data.DataModel.ModelElement.Error
  - TimeCockpit.Data.DataModel.ModelElement.ErrorSummary
  - TimeCockpit.Data.DataModel.ModelElement.IsValid
  - TimeCockpit.Data.DataModel.ModelElement.Ownership
  - TimeCockpit.Data.DataModel.ModelElement.OwnershipPrefix
  - TimeCockpit.Data.DataModel.ModelElement.NonPrefixedName
  - TimeCockpit.Data.DataModel.ModelElement.System#ComponentModel#IDataErrorInfo#Item(System.String)
  - TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier(System.String)
  - TimeCockpit.Data.DataModel.ModelElement.Detach
  - TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix(System.String)
  - TimeCockpit.Data.DataModel.ModelElement.UpdateChildren(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior(TimeCockpit.Data.DataModel.PersistBehavior)
  - TimeCockpit.Data.DataModel.ModelElement.SetName(System.String)
  - TimeCockpit.Data.DataModel.ModelElement.SetOwnership(TimeCockpit.Data.DataModel.Ownership)
  - TimeCockpit.Data.DataModel.NamedDynamicObject.PropertyChanged
  - TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged(System.String)
  - TimeCockpit.Data.DynamicObject.GetMember(System.String)
  - TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  - TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)
    arguments:
    - type: Newtonsoft.Json.MemberSerialization
      value: 1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.DataModel.Relation.#ctor
  commentId: M:TimeCockpit.Data.DataModel.Relation.#ctor
  id: '#ctor'
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: Relation()
  nameWithType: Relation.Relation()
  fullName: TimeCockpit.Data.DataModel.Relation.Relation()
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 111
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nInitializes a new instance of the Relation class\n"
  example: []
  syntax:
    content: public Relation()
    content.vb: Public Sub New
  overload: TimeCockpit.Data.DataModel.Relation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.#ctor(TimeCockpit.Data.DataModel.Relation)
  commentId: M:TimeCockpit.Data.DataModel.Relation.#ctor(TimeCockpit.Data.DataModel.Relation)
  id: '#ctor(TimeCockpit.Data.DataModel.Relation)'
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: Relation(Relation)
  nameWithType: Relation.Relation(Relation)
  fullName: TimeCockpit.Data.DataModel.Relation.Relation(TimeCockpit.Data.DataModel.Relation)
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 127
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nInitializes a new instance of the Relation class\n"
  remarks: "\nThis copy constructor creates copies of all value-typed properties.\n<xref href=\"TimeCockpit.Data.DataModel.StorageColumn\" data-throw-if-not-resolved=\"false\"></xref>s and <xref href=\"TimeCockpit.Data.Security.Permission\" data-throw-if-not-resolved=\"false\"></xref>s from element\nare just added to the corresponding collections of the new <xref href=\"TimeCockpit.Data.DataModel.Relation\" data-throw-if-not-resolved=\"false\"></xref>.\nNo copying is performed.\n"
  example: []
  syntax:
    content: public Relation(Relation element)
    parameters:
    - id: element
      type: TimeCockpit.Data.DataModel.Relation
      description: The relation to copy.
    content.vb: Public Sub New(element As Relation)
  overload: TimeCockpit.Data.DataModel.Relation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  commentId: M:TimeCockpit.Data.DataModel.Relation.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})'
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: Relation(IEnumerable<KeyValuePair<Object, Object>>)
  nameWithType: Relation.Relation(IEnumerable<KeyValuePair<Object, Object>>)
  fullName: TimeCockpit.Data.DataModel.Relation.Relation(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>)
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 159
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nInitializes a new instance of the Relation class.\n"
  remarks: "\n<p>You can use this constructor to initialize a new instance of the\nModelRelation class by specifying its properties in a list of key/value\npairs. This is especially useful for dynamic languages like python.</p>\n"
  example: []
  syntax:
    content: public Relation(IEnumerable<KeyValuePair<object, object>> properties)
    parameters:
    - id: properties
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
      description: Collection of properties.
    content.vb: Public Sub New(properties As IEnumerable(Of KeyValuePair(Of Object, Object)))
  overload: TimeCockpit.Data.DataModel.Relation.#ctor*
  nameWithType.vb: Relation.Relation(IEnumerable(Of KeyValuePair(Of Object, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataModel.Relation.Relation(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)))
  name.vb: Relation(IEnumerable(Of KeyValuePair(Of Object, Object)))
- uid: TimeCockpit.Data.DataModel.Relation.Target
  commentId: P:TimeCockpit.Data.DataModel.Relation.Target
  id: Target
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: Target
  nameWithType: Relation.Target
  fullName: TimeCockpit.Data.DataModel.Relation.Target
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: Target
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 173
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets or sets the target of the relation.\n"
  example: []
  syntax:
    content: public override ModelEntityBase Target { get; set; }
    parameters: []
    return:
      type: TimeCockpit.Data.DataModel.ModelEntityBase
    content.vb: Public Overrides Property Target As ModelEntityBase
  overridden: TimeCockpit.Data.DataModel.RelationBase.Target
  overload: TimeCockpit.Data.DataModel.Relation.Target*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.DataModel.Relation.StorageColumns
  commentId: P:TimeCockpit.Data.DataModel.Relation.StorageColumns
  id: StorageColumns
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: StorageColumns
  nameWithType: Relation.StorageColumns
  fullName: TimeCockpit.Data.DataModel.Relation.StorageColumns
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: StorageColumns
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 190
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets a list of storage columns.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public virtual Collection<StorageColumn> StorageColumns { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{TimeCockpit.Data.DataModel.StorageColumn}
      description: List of storage columns.
    content.vb: >-
      <JsonIgnore>

      Public Overridable ReadOnly Property StorageColumns As Collection(Of StorageColumn)
  overload: TimeCockpit.Data.DataModel.Relation.StorageColumns*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: TimeCockpit.Data.DataModel.Relation.BackReferenceName
  commentId: P:TimeCockpit.Data.DataModel.Relation.BackReferenceName
  id: BackReferenceName
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: BackReferenceName
  nameWithType: Relation.BackReferenceName
  fullName: TimeCockpit.Data.DataModel.Relation.BackReferenceName
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: BackReferenceName
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 236
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets or sets the name of the back reference for the relation.\n"
  remarks: "\n<p>\n  In a 1:n relation the relation&apos;s name can be used to identify the\n  related object on the left side of the relation (e.g. given a 1:n relationship\n<code>CustomerRelation</code> between customers and project its name can be used on a \n<code>Project</code> entity to identify the related <code>Customer</code> entity: \n<code>Project.CustomerRelation</code>).\n</p>\n<p>\n  The back reference name can be used to identify the list of entities\n  on the right side of the relation (e.g. <code>Customer.Projects</code> can be used\n  to identify all projects for a customer entity if <code>Projects</code> is the \n<code>BackReferenceName</code> of the relation).\n</p>\n<p>\n  You have to set the back reference name explicitly. If you do not set it you\n  cannot use functions depending on back reference names (e.g. subqueries).\n</p>\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string BackReferenceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Property BackReferenceName As String
  overload: TimeCockpit.Data.DataModel.Relation.BackReferenceName*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName
  commentId: P:TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName
  id: BackReferenceInvariantFriendlyName
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: BackReferenceInvariantFriendlyName
  nameWithType: Relation.BackReferenceInvariantFriendlyName
  fullName: TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: BackReferenceInvariantFriendlyName
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 258
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets or sets the name of the back reference invariant friendly.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string BackReferenceInvariantFriendlyName { get; set; }
    parameters: []
    return:
      type: System.String
      description: The name of the back reference invariant friendly.
    content.vb: >-
      <DataMember>

      Public Property BackReferenceInvariantFriendlyName As String
  overload: TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.IsNullable
  commentId: P:TimeCockpit.Data.DataModel.Relation.IsNullable
  id: IsNullable
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: IsNullable
  nameWithType: Relation.IsNullable
  fullName: TimeCockpit.Data.DataModel.Relation.IsNullable
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: IsNullable
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 282
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets or sets a value indicating whether the <xref href=\"TimeCockpit.Data.DataModel.Relation\" data-throw-if-not-resolved=\"false\"></xref> instance should be nullable or not.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty]

      public override bool IsNullable { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is nullable; otherwise, <code>false</code>.\n"
    content.vb: >-
      <JsonProperty>

      Public Overrides Property IsNullable As Boolean
  overridden: TimeCockpit.Data.DataModel.RelationBase.IsNullable
  overload: TimeCockpit.Data.DataModel.Relation.IsNullable*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.DataModel.Relation.DefaultValueExpression
  commentId: P:TimeCockpit.Data.DataModel.Relation.DefaultValueExpression
  id: DefaultValueExpression
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: DefaultValueExpression
  nameWithType: Relation.DefaultValueExpression
  fullName: TimeCockpit.Data.DataModel.Relation.DefaultValueExpression
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: DefaultValueExpression
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 301
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets or sets the expression that determines the default value \nof the property\n"
  example: []
  syntax:
    content: >-
      [JsonProperty]

      public string DefaultValueExpression { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty>

      Public Property DefaultValueExpression As String
  overload: TimeCockpit.Data.DataModel.Relation.DefaultValueExpression*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression
  commentId: P:TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression
  id: EvaluateDefaultValueExpression
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: EvaluateDefaultValueExpression
  nameWithType: Relation.EvaluateDefaultValueExpression
  fullName: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: EvaluateDefaultValueExpression
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 327
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets or sets the default value evaluation time expression.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty]

      public string EvaluateDefaultValueExpression { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nThe default value evaluation time expression.\n"
    content.vb: >-
      <JsonProperty>

      Public Property EvaluateDefaultValueExpression As String
  overload: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression
  commentId: P:TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression
  id: HasDefaultValueExpression
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: HasDefaultValueExpression
  nameWithType: Relation.HasDefaultValueExpression
  fullName: TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: HasDefaultValueExpression
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 350
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets a value indicating whether a property has a default value expression or not\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public bool HasDefaultValueExpression { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property HasDefaultValueExpression As Boolean
  overload: TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataModel.Relation.DefaultValueFunction
  commentId: P:TimeCockpit.Data.DataModel.Relation.DefaultValueFunction
  id: DefaultValueFunction
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: DefaultValueFunction
  nameWithType: Relation.DefaultValueFunction
  fullName: TimeCockpit.Data.DataModel.Relation.DefaultValueFunction
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: DefaultValueFunction
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 362
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets the default value of a property by evaluate an expression\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Func<EntityObject, Environment, IEnumerable<QueryParameter>, object> DefaultValueFunction { get; }
    parameters: []
    return:
      type: System.Func{TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},System.Object}
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property DefaultValueFunction As Func(Of EntityObject, Environment, IEnumerable(Of QueryParameter), Object)
  overload: TimeCockpit.Data.DataModel.Relation.DefaultValueFunction*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction
  commentId: P:TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction
  id: EvaluateDefaultValueFunction
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: EvaluateDefaultValueFunction
  nameWithType: Relation.EvaluateDefaultValueFunction
  fullName: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: EvaluateDefaultValueFunction
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 380
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets a value determining whether a default value should be evaluated\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Func<EntityObject, bool> EvaluateDefaultValueFunction { get; }
    parameters: []
    return:
      type: System.Func{TimeCockpit.Data.EntityObject,System.Boolean}
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property EvaluateDefaultValueFunction As Func(Of EntityObject, Boolean)
  overload: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue
  commentId: P:TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue
  id: EvaluateDefaultValue
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: EvaluateDefaultValue
  nameWithType: Relation.EvaluateDefaultValue
  fullName: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: EvaluateDefaultValue
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 401
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets a value indicating whether to evaluate the default value.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public bool EvaluateDefaultValue { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the default value is to be evaluate; otherwise, <code>false</code>.\n"
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property EvaluateDefaultValue As Boolean
  overload: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataModel.Relation.OnDeleteAction
  commentId: P:TimeCockpit.Data.DataModel.Relation.OnDeleteAction
  id: OnDeleteAction
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: OnDeleteAction
  nameWithType: Relation.OnDeleteAction
  fullName: TimeCockpit.Data.DataModel.Relation.OnDeleteAction
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: OnDeleteAction
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 419
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nGets or sets the on delete action.\n"
  example: []
  syntax:
    content: public OnDeleteAction OnDeleteAction { get; set; }
    parameters: []
    return:
      type: TimeCockpit.Data.DataModel.OnDeleteAction
    content.vb: Public Property OnDeleteAction As OnDeleteAction
  overload: TimeCockpit.Data.DataModel.Relation.OnDeleteAction*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange(TimeCockpit.Data.EntityObject,System.String)
  commentId: M:TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange(TimeCockpit.Data.EntityObject,System.String)
  id: IsValueAffectedByPropertyChange(TimeCockpit.Data.EntityObject,System.String)
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: IsValueAffectedByPropertyChange(EntityObject, String)
  nameWithType: Relation.IsValueAffectedByPropertyChange(EntityObject, String)
  fullName: TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange(TimeCockpit.Data.EntityObject, System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: IsValueAffectedByPropertyChange
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 478
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nDetermines whether the value for this property is changed if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">memberName</code> is changed.\n"
  example: []
  syntax:
    content: public bool IsValueAffectedByPropertyChange(EntityObject entityObject, string memberName)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The entityobject holding the property that changed.
    - id: memberName
      type: System.String
      description: The name of the member (relation or property) that changed.
    return:
      type: System.Boolean
      description: 'Returns a value indicating whether the value of a property is affected by a changed property name. '
    content.vb: Public Function IsValueAffectedByPropertyChange(entityObject As EntityObject, memberName As String) As Boolean
  overload: TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  commentId: M:TimeCockpit.Data.DataModel.Relation.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  id: Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: Accept(ModelElementVisitor)
  nameWithType: Relation.Accept(ModelElementVisitor)
  fullName: TimeCockpit.Data.DataModel.Relation.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: Accept
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 508
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nAccepts a visitor. Dispatches the correct call in the visitor.\n"
  example: []
  syntax:
    content: public override void Accept(ModelElementVisitor visitor)
    parameters:
    - id: visitor
      type: TimeCockpit.Data.DataModel.ModelElementVisitor
      description: the visitor to accept.
    content.vb: Public Overrides Sub Accept(visitor As ModelElementVisitor)
  overridden: TimeCockpit.Data.DataModel.ModelElement.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  overload: TimeCockpit.Data.DataModel.Relation.Accept*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.DataModel.Relation.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
  commentId: M:TimeCockpit.Data.DataModel.Relation.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
  id: ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: ShallowCopy(String, PersistBehavior, Ownership, Boolean, Boolean)
  nameWithType: Relation.ShallowCopy(String, PersistBehavior, Ownership, Boolean, Boolean)
  fullName: TimeCockpit.Data.DataModel.Relation.ShallowCopy(System.String, TimeCockpit.Data.DataModel.PersistBehavior, TimeCockpit.Data.DataModel.Ownership, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: ShallowCopy
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 530
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nPerforms a shallow copy of the current <xref href=\"TimeCockpit.Data.DataModel.Relation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThe MemberwiseClone method creates a shallow copy by creating a new object,\nand then copying the nonstatic fields of the current object to the new object.\nIf a field is a value type, a bit-by-bit copy of the field is performed. If a field is a reference type,\nthe reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.\n"
  example: []
  syntax:
    content: public override RelationBase ShallowCopy(string name, PersistBehavior persistBehavior, Ownership ownership, bool ignorePermissions = false, bool ignoreDefaultValues = false)
    parameters:
    - id: name
      type: System.String
      description: The name of the property to clone.
    - id: persistBehavior
      type: TimeCockpit.Data.DataModel.PersistBehavior
      description: The <xref href="TimeCockpit.Data.DataModel.PersistBehavior" data-throw-if-not-resolved="false"></xref> the cloned relation should have.
    - id: ownership
      type: TimeCockpit.Data.DataModel.Ownership
      description: The <xref href="TimeCockpit.Data.DataModel.Ownership" data-throw-if-not-resolved="false"></xref> the cloned relation should have.
    - id: ignorePermissions
      type: System.Boolean
      description: if set to <code>true</code> [ignore permissions].
    - id: ignoreDefaultValues
      type: System.Boolean
      description: if set to <code>true</code> [ignore default values].
    return:
      type: TimeCockpit.Data.DataModel.RelationBase
      description: "\nA shallow copy of the current <xref href=\"TimeCockpit.Data.DataModel.Relation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function ShallowCopy(name As String, persistBehavior As PersistBehavior, ownership As Ownership, ignorePermissions As Boolean = False, ignoreDefaultValues As Boolean = False) As RelationBase
  overridden: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
  overload: TimeCockpit.Data.DataModel.Relation.ShallowCopy*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.DataModel.Relation.ShallowCopy
  commentId: M:TimeCockpit.Data.DataModel.Relation.ShallowCopy
  id: ShallowCopy
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: ShallowCopy()
  nameWithType: Relation.ShallowCopy()
  fullName: TimeCockpit.Data.DataModel.Relation.ShallowCopy()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: ShallowCopy
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 561
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nPerforms a shallow copy of the current <xref href=\"TimeCockpit.Data.DataModel.Relation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThe MemberwiseClone method creates a shallow copy by creating a new object, \nand then copying the nonstatic fields of the current object to the new object. \nIf a field is a value type, a bit-by-bit copy of the field is performed. If a field is a reference type, \nthe reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.\n"
  example: []
  syntax:
    content: public override RelationBase ShallowCopy()
    return:
      type: TimeCockpit.Data.DataModel.RelationBase
      description: A shallow copy of the current <xref href="TimeCockpit.Data.DataModel.Relation" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ShallowCopy As RelationBase
  overridden: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
  overload: TimeCockpit.Data.DataModel.Relation.ShallowCopy*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.DataModel.Relation.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  commentId: M:TimeCockpit.Data.DataModel.Relation.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: OnDeserializing(StreamingContext)
  nameWithType: Relation.OnDeserializing(StreamingContext)
  fullName: TimeCockpit.Data.DataModel.Relation.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: OnDeserializing
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 576
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nCalled whenever deserialization of the model element is happening\n"
  remarks: "\nThis method is necessary to instantiate an instance of the current\n<xref href=\"TimeCockpit.Data.DataModel.ModelElement\" data-throw-if-not-resolved=\"false\"></xref> after deserialization. As for the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>,\nconstructors are not always called and fields not correctly initialized. While deserializing,\nthis method is called and the fields of the <xref href=\"TimeCockpit.Data.DataModel.ModelElement\" data-throw-if-not-resolved=\"false\"></xref> are correctly initialized.\n"
  example: []
  syntax:
    content: >-
      [OnDeserializing]

      public void OnDeserializing(StreamingContext context)
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: Stream context used for deserialization.
    content.vb: >-
      <OnDeserializing>

      Public Sub OnDeserializing(context As StreamingContext)
  overload: TimeCockpit.Data.DataModel.Relation.OnDeserializing*
  attributes:
  - type: System.Runtime.Serialization.OnDeserializingAttribute
    ctor: System.Runtime.Serialization.OnDeserializingAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataModel.Relation.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  commentId: M:TimeCockpit.Data.DataModel.Relation.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  id: Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: Validate(ref IList<PropertyValidationMessage>, Boolean)
  nameWithType: Relation.Validate(ref IList<PropertyValidationMessage>, Boolean)
  fullName: TimeCockpit.Data.DataModel.Relation.Validate(ref System.Collections.Generic.IList<TimeCockpit.Data.DataModel.PropertyValidationMessage>, System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: Validate
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 622
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nValidates a <xref href=\"TimeCockpit.Data.DataModel.ModelElement\" data-throw-if-not-resolved=\"false\"></xref> according to certain rules.\n"
  remarks: "\n<p>\nThe rules the <xref href=\"TimeCockpit.Data.DataModel.ModelElement\" data-throw-if-not-resolved=\"false\"></xref> is validated against are dependent on the \ntype of <xref href=\"TimeCockpit.Data.DataModel.ModelElement\" data-throw-if-not-resolved=\"false\"></xref> that is validated. \nThis method can be overridden to provide custom validation behavior for subclasses of \n<xref href=\"TimeCockpit.Data.DataModel.ModelElement\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\nWhen <xref href=\"TimeCockpit.Data.DataModel.Relation.Validate(System.Collections.Generic.IList%7bTimeCockpit.Data.DataModel.PropertyValidationMessage%7d%40%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called on a modelelement, the <xref href=\"TimeCockpit.Data.DataModel.Relation.Validate(System.Collections.Generic.IList%7bTimeCockpit.Data.DataModel.PropertyValidationMessage%7d%40%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method\nof all children attatched to the modelelemnt are validated recursivly.\n</p>\n"
  example: []
  syntax:
    content: protected override void Validate(ref IList<PropertyValidationMessage> messages, bool validateRecursively)
    parameters:
    - id: messages
      type: System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}
      description: "\nAn list of strings that stores that picks up the validation errors of a model element.\n"
    - id: validateRecursively
      type: System.Boolean
      description: "\nIndicates wheter to validate only the current model element or all its children (recursively) as well.\n"
    content.vb: Protected Overrides Sub Validate(ByRef messages As IList(Of PropertyValidationMessage), validateRecursively As Boolean)
  overridden: TimeCockpit.Data.DataModel.ModelElement.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  overload: TimeCockpit.Data.DataModel.Relation.Validate*
  nameWithType.vb: Relation.Validate(ByRef IList(Of PropertyValidationMessage), Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TimeCockpit.Data.DataModel.Relation.Validate(ByRef System.Collections.Generic.IList(Of TimeCockpit.Data.DataModel.PropertyValidationMessage), System.Boolean)
  name.vb: Validate(ByRef IList(Of PropertyValidationMessage), Boolean)
- uid: TimeCockpit.Data.DataModel.Relation.InitializeObject
  commentId: M:TimeCockpit.Data.DataModel.Relation.InitializeObject
  id: InitializeObject
  parent: TimeCockpit.Data.DataModel.Relation
  langs:
  - csharp
  - vb
  name: InitializeObject()
  nameWithType: Relation.InitializeObject()
  fullName: TimeCockpit.Data.DataModel.Relation.InitializeObject()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    id: InitializeObject
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/DataModel/Relation.cs
    startLine: 794
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nInitializes the <xref href=\"TimeCockpit.Data.DataModel.Relation\" data-throw-if-not-resolved=\"false\"></xref> object\nsetting fields of the object to their default values.\n"
  example: []
  syntax:
    content: protected override void InitializeObject()
    content.vb: Protected Overrides Sub InitializeObject
  overridden: TimeCockpit.Data.DataModel.RelationBase.InitializeObject
  overload: TimeCockpit.Data.DataModel.Relation.InitializeObject*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: false
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TimeCockpit.Data.DynamicObject
  commentId: T:TimeCockpit.Data.DynamicObject
  parent: TimeCockpit.Data
  isExternal: false
  name: DynamicObject
  nameWithType: DynamicObject
  fullName: TimeCockpit.Data.DynamicObject
- uid: TimeCockpit.Data.DataModel.NamedDynamicObject
  commentId: T:TimeCockpit.Data.DataModel.NamedDynamicObject
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: NamedDynamicObject
  nameWithType: NamedDynamicObject
  fullName: TimeCockpit.Data.DataModel.NamedDynamicObject
- uid: TimeCockpit.Data.DataModel.ModelElement
  commentId: T:TimeCockpit.Data.DataModel.ModelElement
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: ModelElement
  nameWithType: ModelElement
  fullName: TimeCockpit.Data.DataModel.ModelElement
- uid: TimeCockpit.Data.DataModel.RelationBase
  commentId: T:TimeCockpit.Data.DataModel.RelationBase
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: RelationBase
  nameWithType: RelationBase
  fullName: TimeCockpit.Data.DataModel.RelationBase
- uid: System.Dynamic.IDynamicMetaObjectProvider
  commentId: T:System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: true
  name: IDynamicMetaObjectProvider
  nameWithType: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.ComponentModel.IDataErrorInfo
  commentId: T:System.ComponentModel.IDataErrorInfo
  parent: System.ComponentModel
  isExternal: true
  name: IDataErrorInfo
  nameWithType: IDataErrorInfo
  fullName: System.ComponentModel.IDataErrorInfo
- uid: TimeCockpit.Data.DataModel.INullable
  commentId: T:TimeCockpit.Data.DataModel.INullable
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: INullable
  nameWithType: INullable
  fullName: TimeCockpit.Data.DataModel.INullable
- uid: TimeCockpit.Data.DataModel.RelationBase.Permissions
  commentId: P:TimeCockpit.Data.DataModel.RelationBase.Permissions
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: Permissions
  nameWithType: RelationBase.Permissions
  fullName: TimeCockpit.Data.DataModel.RelationBase.Permissions
- uid: TimeCockpit.Data.DataModel.RelationBase.DataType
  commentId: P:TimeCockpit.Data.DataModel.RelationBase.DataType
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: DataType
  nameWithType: RelationBase.DataType
  fullName: TimeCockpit.Data.DataModel.RelationBase.DataType
- uid: TimeCockpit.Data.DataModel.RelationBase.Attach(TimeCockpit.Data.DataModel.ModelElement)
  commentId: M:TimeCockpit.Data.DataModel.RelationBase.Attach(TimeCockpit.Data.DataModel.ModelElement)
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: Attach(ModelElement)
  nameWithType: RelationBase.Attach(ModelElement)
  fullName: TimeCockpit.Data.DataModel.RelationBase.Attach(TimeCockpit.Data.DataModel.ModelElement)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.RelationBase.Attach(TimeCockpit.Data.DataModel.ModelElement)
    name: Attach
    nameWithType: RelationBase.Attach
    fullName: TimeCockpit.Data.DataModel.RelationBase.Attach
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.ModelElement
    name: ModelElement
    nameWithType: ModelElement
    fullName: TimeCockpit.Data.DataModel.ModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.RelationBase.Attach(TimeCockpit.Data.DataModel.ModelElement)
    name: Attach
    nameWithType: RelationBase.Attach
    fullName: TimeCockpit.Data.DataModel.RelationBase.Attach
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.ModelElement
    name: ModelElement
    nameWithType: ModelElement
    fullName: TimeCockpit.Data.DataModel.ModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.RelationBase.RemovePermissions
  commentId: M:TimeCockpit.Data.DataModel.RelationBase.RemovePermissions
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: RemovePermissions()
  nameWithType: RelationBase.RemovePermissions()
  fullName: TimeCockpit.Data.DataModel.RelationBase.RemovePermissions()
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.RelationBase.RemovePermissions
    name: RemovePermissions
    nameWithType: RelationBase.RemovePermissions
    fullName: TimeCockpit.Data.DataModel.RelationBase.RemovePermissions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.RelationBase.RemovePermissions
    name: RemovePermissions
    nameWithType: RelationBase.RemovePermissions
    fullName: TimeCockpit.Data.DataModel.RelationBase.RemovePermissions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.ElementGuid
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.ElementGuid
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: ElementGuid
  nameWithType: ModelElement.ElementGuid
  fullName: TimeCockpit.Data.DataModel.ModelElement.ElementGuid
- uid: TimeCockpit.Data.DataModel.ModelElement.Name
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.Name
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: Name
  nameWithType: ModelElement.Name
  fullName: TimeCockpit.Data.DataModel.ModelElement.Name
- uid: TimeCockpit.Data.DataModel.ModelElement.Parent
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.Parent
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: Parent
  nameWithType: ModelElement.Parent
  fullName: TimeCockpit.Data.DataModel.ModelElement.Parent
- uid: TimeCockpit.Data.DataModel.ModelElement.Children
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.Children
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: Children
  nameWithType: ModelElement.Children
  fullName: TimeCockpit.Data.DataModel.ModelElement.Children
- uid: TimeCockpit.Data.DataModel.ModelElement.PersistBehavior
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.PersistBehavior
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: PersistBehavior
  nameWithType: ModelElement.PersistBehavior
  fullName: TimeCockpit.Data.DataModel.ModelElement.PersistBehavior
- uid: TimeCockpit.Data.DataModel.ModelElement.IsFullPersistBehavior
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.IsFullPersistBehavior
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: IsFullPersistBehavior
  nameWithType: ModelElement.IsFullPersistBehavior
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsFullPersistBehavior
- uid: TimeCockpit.Data.DataModel.ModelElement.IsNonePersistBehavior
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.IsNonePersistBehavior
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: IsNonePersistBehavior
  nameWithType: ModelElement.IsNonePersistBehavior
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsNonePersistBehavior
- uid: TimeCockpit.Data.DataModel.ModelElement.IsSystemElement
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.IsSystemElement
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: IsSystemElement
  nameWithType: ModelElement.IsSystemElement
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsSystemElement
- uid: TimeCockpit.Data.DataModel.ModelElement.IsApplicationSpecificElement
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.IsApplicationSpecificElement
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: IsApplicationSpecificElement
  nameWithType: ModelElement.IsApplicationSpecificElement
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsApplicationSpecificElement
- uid: TimeCockpit.Data.DataModel.ModelElement.IsUserElement
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.IsUserElement
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: IsUserElement
  nameWithType: ModelElement.IsUserElement
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsUserElement
- uid: TimeCockpit.Data.DataModel.ModelElement.IsSystemOrApplicationSpecificElement
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.IsSystemOrApplicationSpecificElement
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: IsSystemOrApplicationSpecificElement
  nameWithType: ModelElement.IsSystemOrApplicationSpecificElement
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsSystemOrApplicationSpecificElement
- uid: TimeCockpit.Data.DataModel.ModelElement.InvariantFriendlyName
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.InvariantFriendlyName
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: InvariantFriendlyName
  nameWithType: ModelElement.InvariantFriendlyName
  fullName: TimeCockpit.Data.DataModel.ModelElement.InvariantFriendlyName
- uid: TimeCockpit.Data.DataModel.ModelElement.CreationVersion
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.CreationVersion
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: CreationVersion
  nameWithType: ModelElement.CreationVersion
  fullName: TimeCockpit.Data.DataModel.ModelElement.CreationVersion
- uid: TimeCockpit.Data.DataModel.ModelElement.LastUpdateVersion
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.LastUpdateVersion
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: LastUpdateVersion
  nameWithType: ModelElement.LastUpdateVersion
  fullName: TimeCockpit.Data.DataModel.ModelElement.LastUpdateVersion
- uid: TimeCockpit.Data.DataModel.ModelElement.Error
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.Error
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: Error
  nameWithType: ModelElement.Error
  fullName: TimeCockpit.Data.DataModel.ModelElement.Error
- uid: TimeCockpit.Data.DataModel.ModelElement.ErrorSummary
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.ErrorSummary
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: ErrorSummary
  nameWithType: ModelElement.ErrorSummary
  fullName: TimeCockpit.Data.DataModel.ModelElement.ErrorSummary
- uid: TimeCockpit.Data.DataModel.ModelElement.IsValid
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.IsValid
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: IsValid
  nameWithType: ModelElement.IsValid
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsValid
- uid: TimeCockpit.Data.DataModel.ModelElement.Ownership
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.Ownership
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: Ownership
  nameWithType: ModelElement.Ownership
  fullName: TimeCockpit.Data.DataModel.ModelElement.Ownership
- uid: TimeCockpit.Data.DataModel.ModelElement.OwnershipPrefix
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.OwnershipPrefix
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: OwnershipPrefix
  nameWithType: ModelElement.OwnershipPrefix
  fullName: TimeCockpit.Data.DataModel.ModelElement.OwnershipPrefix
- uid: TimeCockpit.Data.DataModel.ModelElement.NonPrefixedName
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.NonPrefixedName
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: NonPrefixedName
  nameWithType: ModelElement.NonPrefixedName
  fullName: TimeCockpit.Data.DataModel.ModelElement.NonPrefixedName
- uid: TimeCockpit.Data.DataModel.ModelElement.System#ComponentModel#IDataErrorInfo#Item(System.String)
  commentId: P:TimeCockpit.Data.DataModel.ModelElement.System#ComponentModel#IDataErrorInfo#Item(System.String)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: true
  name: IDataErrorInfo.Item[String]
  nameWithType: ModelElement.IDataErrorInfo.Item[String]
  fullName: TimeCockpit.Data.DataModel.ModelElement.System.ComponentModel.IDataErrorInfo.Item[System.String]
  nameWithType.vb: ModelElement.System.ComponentModel.IDataErrorInfo.Item(String)
  fullName.vb: TimeCockpit.Data.DataModel.ModelElement.System.ComponentModel.IDataErrorInfo.Item(System.String)
  name.vb: System.ComponentModel.IDataErrorInfo.Item(String)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.System#ComponentModel#IDataErrorInfo#Item(System.String)
    name: IDataErrorInfo.Item
    nameWithType: ModelElement.IDataErrorInfo.Item
    fullName: TimeCockpit.Data.DataModel.ModelElement.System.ComponentModel.IDataErrorInfo.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.System#ComponentModel#IDataErrorInfo#Item(System.String)
    name: System.ComponentModel.IDataErrorInfo.Item
    nameWithType: ModelElement.System.ComponentModel.IDataErrorInfo.Item
    fullName: TimeCockpit.Data.DataModel.ModelElement.System.ComponentModel.IDataErrorInfo.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier(System.String)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier(System.String)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: true
  name: IsValidIdentifier(String)
  nameWithType: ModelElement.IsValidIdentifier(String)
  fullName: TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier(System.String)
    name: IsValidIdentifier
    nameWithType: ModelElement.IsValidIdentifier
    fullName: TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier(System.String)
    name: IsValidIdentifier
    nameWithType: ModelElement.IsValidIdentifier
    fullName: TimeCockpit.Data.DataModel.ModelElement.IsValidIdentifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.Detach
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.Detach
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: Detach()
  nameWithType: ModelElement.Detach()
  fullName: TimeCockpit.Data.DataModel.ModelElement.Detach()
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.Detach
    name: Detach
    nameWithType: ModelElement.Detach
    fullName: TimeCockpit.Data.DataModel.ModelElement.Detach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.Detach
    name: Detach
    nameWithType: ModelElement.Detach
    fullName: TimeCockpit.Data.DataModel.ModelElement.Detach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix(System.String)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix(System.String)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: true
  name: SetOwnershipPrefix(String)
  nameWithType: ModelElement.SetOwnershipPrefix(String)
  fullName: TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix(System.String)
    name: SetOwnershipPrefix
    nameWithType: ModelElement.SetOwnershipPrefix
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix(System.String)
    name: SetOwnershipPrefix
    nameWithType: ModelElement.SetOwnershipPrefix
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetOwnershipPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.UpdateChildren(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.UpdateChildren(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: true
  name: UpdateChildren(NotifyCollectionChangedEventArgs)
  nameWithType: ModelElement.UpdateChildren(NotifyCollectionChangedEventArgs)
  fullName: TimeCockpit.Data.DataModel.ModelElement.UpdateChildren(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.UpdateChildren(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: UpdateChildren
    nameWithType: ModelElement.UpdateChildren
    fullName: TimeCockpit.Data.DataModel.ModelElement.UpdateChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.UpdateChildren(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: UpdateChildren
    nameWithType: ModelElement.UpdateChildren
    fullName: TimeCockpit.Data.DataModel.ModelElement.UpdateChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior(TimeCockpit.Data.DataModel.PersistBehavior)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior(TimeCockpit.Data.DataModel.PersistBehavior)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: SetPersistBehavior(PersistBehavior)
  nameWithType: ModelElement.SetPersistBehavior(PersistBehavior)
  fullName: TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior(TimeCockpit.Data.DataModel.PersistBehavior)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior(TimeCockpit.Data.DataModel.PersistBehavior)
    name: SetPersistBehavior
    nameWithType: ModelElement.SetPersistBehavior
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.PersistBehavior
    name: PersistBehavior
    nameWithType: PersistBehavior
    fullName: TimeCockpit.Data.DataModel.PersistBehavior
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior(TimeCockpit.Data.DataModel.PersistBehavior)
    name: SetPersistBehavior
    nameWithType: ModelElement.SetPersistBehavior
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetPersistBehavior
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.PersistBehavior
    name: PersistBehavior
    nameWithType: PersistBehavior
    fullName: TimeCockpit.Data.DataModel.PersistBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.SetName(System.String)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.SetName(System.String)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: true
  name: SetName(String)
  nameWithType: ModelElement.SetName(String)
  fullName: TimeCockpit.Data.DataModel.ModelElement.SetName(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetName(System.String)
    name: SetName
    nameWithType: ModelElement.SetName
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetName(System.String)
    name: SetName
    nameWithType: ModelElement.SetName
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ModelElement.SetOwnership(TimeCockpit.Data.DataModel.Ownership)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.SetOwnership(TimeCockpit.Data.DataModel.Ownership)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: SetOwnership(Ownership)
  nameWithType: ModelElement.SetOwnership(Ownership)
  fullName: TimeCockpit.Data.DataModel.ModelElement.SetOwnership(TimeCockpit.Data.DataModel.Ownership)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetOwnership(TimeCockpit.Data.DataModel.Ownership)
    name: SetOwnership
    nameWithType: ModelElement.SetOwnership
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetOwnership
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.Ownership
    name: Ownership
    nameWithType: Ownership
    fullName: TimeCockpit.Data.DataModel.Ownership
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.SetOwnership(TimeCockpit.Data.DataModel.Ownership)
    name: SetOwnership
    nameWithType: ModelElement.SetOwnership
    fullName: TimeCockpit.Data.DataModel.ModelElement.SetOwnership
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.Ownership
    name: Ownership
    nameWithType: Ownership
    fullName: TimeCockpit.Data.DataModel.Ownership
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.NamedDynamicObject.PropertyChanged
  commentId: E:TimeCockpit.Data.DataModel.NamedDynamicObject.PropertyChanged
  parent: TimeCockpit.Data.DataModel.NamedDynamicObject
  isExternal: false
  name: PropertyChanged
  nameWithType: NamedDynamicObject.PropertyChanged
  fullName: TimeCockpit.Data.DataModel.NamedDynamicObject.PropertyChanged
- uid: TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged(System.String)
  commentId: M:TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged(System.String)
  parent: TimeCockpit.Data.DataModel.NamedDynamicObject
  isExternal: true
  name: OnPropertyChanged(String)
  nameWithType: NamedDynamicObject.OnPropertyChanged(String)
  fullName: TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: NamedDynamicObject.OnPropertyChanged
    fullName: TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: NamedDynamicObject.OnPropertyChanged
    fullName: TimeCockpit.Data.DataModel.NamedDynamicObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  commentId: M:TimeCockpit.Data.DynamicObject.GetMember(System.String)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: GetMember(String)
  nameWithType: DynamicObject.GetMember(String)
  fullName: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
    name: GetMember
    nameWithType: DynamicObject.GetMember
    fullName: TimeCockpit.Data.DynamicObject.GetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
    name: GetMember
    nameWithType: DynamicObject.GetMember
    fullName: TimeCockpit.Data.DynamicObject.GetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  commentId: M:TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: SetMember(String, Object)
  nameWithType: DynamicObject.SetMember(String, Object)
  fullName: TimeCockpit.Data.DynamicObject.SetMember(System.String, System.Object)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
    name: SetMember
    nameWithType: DynamicObject.SetMember
    fullName: TimeCockpit.Data.DynamicObject.SetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
    name: SetMember
    nameWithType: DynamicObject.SetMember
    fullName: TimeCockpit.Data.DynamicObject.SetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: GetMetaObject(Expression)
  nameWithType: DynamicObject.GetMetaObject(Expression)
  fullName: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: DynamicObject.GetMetaObject
    fullName: TimeCockpit.Data.DynamicObject.GetMetaObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: DynamicObject.GetMetaObject
    fullName: TimeCockpit.Data.DynamicObject.GetMetaObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data
  commentId: N:TimeCockpit.Data
  isExternal: false
  name: TimeCockpit.Data
  nameWithType: TimeCockpit.Data
  fullName: TimeCockpit.Data
- uid: System.Dynamic
  commentId: N:System.Dynamic
  isExternal: false
  name: System.Dynamic
  nameWithType: System.Dynamic
  fullName: System.Dynamic
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: TimeCockpit.Data.DataModel.Relation.#ctor*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.#ctor
  isExternal: false
  name: Relation
  nameWithType: Relation.Relation
  fullName: TimeCockpit.Data.DataModel.Relation.Relation
- uid: TimeCockpit.Data.DataModel.StorageColumn
  commentId: T:TimeCockpit.Data.DataModel.StorageColumn
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: StorageColumn
  nameWithType: StorageColumn
  fullName: TimeCockpit.Data.DataModel.StorageColumn
- uid: TimeCockpit.Data.Security.Permission
  commentId: T:TimeCockpit.Data.Security.Permission
  parent: TimeCockpit.Data.Security
  isExternal: false
  name: Permission
  nameWithType: Permission
  fullName: TimeCockpit.Data.Security.Permission
- uid: TimeCockpit.Data.DataModel.Relation
  commentId: T:TimeCockpit.Data.DataModel.Relation
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: Relation
  nameWithType: Relation
  fullName: TimeCockpit.Data.DataModel.Relation
- uid: TimeCockpit.Data.Security
  commentId: N:TimeCockpit.Data.Security
  isExternal: false
  name: TimeCockpit.Data.Security
  nameWithType: TimeCockpit.Data.Security
  fullName: TimeCockpit.Data.Security
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Object, Object>>
  nameWithType: IEnumerable<KeyValuePair<Object, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Object, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.DataModel.RelationBase.Target
  commentId: P:TimeCockpit.Data.DataModel.RelationBase.Target
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: Target
  nameWithType: RelationBase.Target
  fullName: TimeCockpit.Data.DataModel.RelationBase.Target
- uid: TimeCockpit.Data.DataModel.Relation.Target*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.Target
  isExternal: false
  name: Target
  nameWithType: Relation.Target
  fullName: TimeCockpit.Data.DataModel.Relation.Target
- uid: TimeCockpit.Data.DataModel.ModelEntityBase
  commentId: T:TimeCockpit.Data.DataModel.ModelEntityBase
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: ModelEntityBase
  nameWithType: ModelEntityBase
  fullName: TimeCockpit.Data.DataModel.ModelEntityBase
- uid: TimeCockpit.Data.DataModel.Relation.StorageColumns*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.StorageColumns
  isExternal: false
  name: StorageColumns
  nameWithType: Relation.StorageColumns
  fullName: TimeCockpit.Data.DataModel.Relation.StorageColumns
- uid: System.Collections.ObjectModel.Collection{TimeCockpit.Data.DataModel.StorageColumn}
  commentId: T:System.Collections.ObjectModel.Collection{TimeCockpit.Data.DataModel.StorageColumn}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<StorageColumn>
  nameWithType: Collection<StorageColumn>
  fullName: System.Collections.ObjectModel.Collection<TimeCockpit.Data.DataModel.StorageColumn>
  nameWithType.vb: Collection(Of StorageColumn)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TimeCockpit.Data.DataModel.StorageColumn)
  name.vb: Collection(Of StorageColumn)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.DataModel.StorageColumn
    name: StorageColumn
    nameWithType: StorageColumn
    fullName: TimeCockpit.Data.DataModel.StorageColumn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.DataModel.StorageColumn
    name: StorageColumn
    nameWithType: StorageColumn
    fullName: TimeCockpit.Data.DataModel.StorageColumn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TimeCockpit.Data.DataModel.Relation.BackReferenceName*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.BackReferenceName
  isExternal: false
  name: BackReferenceName
  nameWithType: Relation.BackReferenceName
  fullName: TimeCockpit.Data.DataModel.Relation.BackReferenceName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName
  isExternal: false
  name: BackReferenceInvariantFriendlyName
  nameWithType: Relation.BackReferenceInvariantFriendlyName
  fullName: TimeCockpit.Data.DataModel.Relation.BackReferenceInvariantFriendlyName
- uid: TimeCockpit.Data.DataModel.RelationBase.IsNullable
  commentId: P:TimeCockpit.Data.DataModel.RelationBase.IsNullable
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: IsNullable
  nameWithType: RelationBase.IsNullable
  fullName: TimeCockpit.Data.DataModel.RelationBase.IsNullable
- uid: TimeCockpit.Data.DataModel.Relation.IsNullable*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.IsNullable
  isExternal: false
  name: IsNullable
  nameWithType: Relation.IsNullable
  fullName: TimeCockpit.Data.DataModel.Relation.IsNullable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data.DataModel.Relation.DefaultValueExpression*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.DefaultValueExpression
  isExternal: false
  name: DefaultValueExpression
  nameWithType: Relation.DefaultValueExpression
  fullName: TimeCockpit.Data.DataModel.Relation.DefaultValueExpression
- uid: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression
  isExternal: false
  name: EvaluateDefaultValueExpression
  nameWithType: Relation.EvaluateDefaultValueExpression
  fullName: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueExpression
- uid: TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression
  isExternal: false
  name: HasDefaultValueExpression
  nameWithType: Relation.HasDefaultValueExpression
  fullName: TimeCockpit.Data.DataModel.Relation.HasDefaultValueExpression
- uid: TimeCockpit.Data.DataModel.Relation.DefaultValueFunction*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.DefaultValueFunction
  isExternal: false
  name: DefaultValueFunction
  nameWithType: Relation.DefaultValueFunction
  fullName: TimeCockpit.Data.DataModel.Relation.DefaultValueFunction
- uid: System.Func{TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},System.Object}
  commentId: T:System.Func{TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},System.Object}
  parent: System
  definition: System.Func`4
  name: Func<EntityObject, Environment, IEnumerable<QueryParameter>, Object>
  nameWithType: Func<EntityObject, Environment, IEnumerable<QueryParameter>, Object>
  fullName: System.Func<TimeCockpit.Data.EntityObject, TimeCockpit.Data.Environment, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, System.Object>
  nameWithType.vb: Func(Of EntityObject, Environment, IEnumerable(Of QueryParameter), Object)
  fullName.vb: System.Func(Of TimeCockpit.Data.EntityObject, TimeCockpit.Data.Environment, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), System.Object)
  name.vb: Func(Of EntityObject, Environment, IEnumerable(Of QueryParameter), Object)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Environment
    name: Environment
    nameWithType: Environment
    fullName: TimeCockpit.Data.Environment
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Environment
    name: Environment
    nameWithType: Environment
    fullName: TimeCockpit.Data.Environment
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction
  isExternal: false
  name: EvaluateDefaultValueFunction
  nameWithType: Relation.EvaluateDefaultValueFunction
  fullName: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValueFunction
- uid: System.Func{TimeCockpit.Data.EntityObject,System.Boolean}
  commentId: T:System.Func{TimeCockpit.Data.EntityObject,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<EntityObject, Boolean>
  nameWithType: Func<EntityObject, Boolean>
  fullName: System.Func<TimeCockpit.Data.EntityObject, System.Boolean>
  nameWithType.vb: Func(Of EntityObject, Boolean)
  fullName.vb: System.Func(Of TimeCockpit.Data.EntityObject, System.Boolean)
  name.vb: Func(Of EntityObject, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue
  isExternal: false
  name: EvaluateDefaultValue
  nameWithType: Relation.EvaluateDefaultValue
  fullName: TimeCockpit.Data.DataModel.Relation.EvaluateDefaultValue
- uid: TimeCockpit.Data.DataModel.Relation.OnDeleteAction*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.OnDeleteAction
  isExternal: false
  name: OnDeleteAction
  nameWithType: Relation.OnDeleteAction
  fullName: TimeCockpit.Data.DataModel.Relation.OnDeleteAction
- uid: TimeCockpit.Data.DataModel.OnDeleteAction
  commentId: T:TimeCockpit.Data.DataModel.OnDeleteAction
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: OnDeleteAction
  nameWithType: OnDeleteAction
  fullName: TimeCockpit.Data.DataModel.OnDeleteAction
- uid: TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange
  isExternal: false
  name: IsValueAffectedByPropertyChange
  nameWithType: Relation.IsValueAffectedByPropertyChange
  fullName: TimeCockpit.Data.DataModel.Relation.IsValueAffectedByPropertyChange
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  parent: TimeCockpit.Data
  isExternal: false
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
- uid: TimeCockpit.Data.DataModel.ModelElement.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: false
  name: Accept(ModelElementVisitor)
  nameWithType: ModelElement.Accept(ModelElementVisitor)
  fullName: TimeCockpit.Data.DataModel.ModelElement.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
    name: Accept
    nameWithType: ModelElement.Accept
    fullName: TimeCockpit.Data.DataModel.ModelElement.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.ModelElementVisitor
    name: ModelElementVisitor
    nameWithType: ModelElementVisitor
    fullName: TimeCockpit.Data.DataModel.ModelElementVisitor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.Accept(TimeCockpit.Data.DataModel.ModelElementVisitor)
    name: Accept
    nameWithType: ModelElement.Accept
    fullName: TimeCockpit.Data.DataModel.ModelElement.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.ModelElementVisitor
    name: ModelElementVisitor
    nameWithType: ModelElementVisitor
    fullName: TimeCockpit.Data.DataModel.ModelElementVisitor
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Relation.Accept*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.Accept
  isExternal: false
  name: Accept
  nameWithType: Relation.Accept
  fullName: TimeCockpit.Data.DataModel.Relation.Accept
- uid: TimeCockpit.Data.DataModel.ModelElementVisitor
  commentId: T:TimeCockpit.Data.DataModel.ModelElementVisitor
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: ModelElementVisitor
  nameWithType: ModelElementVisitor
  fullName: TimeCockpit.Data.DataModel.ModelElementVisitor
- uid: TimeCockpit.Data.DataModel.PersistBehavior
  commentId: T:TimeCockpit.Data.DataModel.PersistBehavior
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: PersistBehavior
  nameWithType: PersistBehavior
  fullName: TimeCockpit.Data.DataModel.PersistBehavior
- uid: TimeCockpit.Data.DataModel.Ownership
  commentId: T:TimeCockpit.Data.DataModel.Ownership
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: Ownership
  nameWithType: Ownership
  fullName: TimeCockpit.Data.DataModel.Ownership
- uid: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
  commentId: M:TimeCockpit.Data.DataModel.RelationBase.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: true
  name: ShallowCopy(String, PersistBehavior, Ownership, Boolean, Boolean)
  nameWithType: RelationBase.ShallowCopy(String, PersistBehavior, Ownership, Boolean, Boolean)
  fullName: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy(System.String, TimeCockpit.Data.DataModel.PersistBehavior, TimeCockpit.Data.DataModel.Ownership, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
    name: ShallowCopy
    nameWithType: RelationBase.ShallowCopy
    fullName: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.PersistBehavior
    name: PersistBehavior
    nameWithType: PersistBehavior
    fullName: TimeCockpit.Data.DataModel.PersistBehavior
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.Ownership
    name: Ownership
    nameWithType: Ownership
    fullName: TimeCockpit.Data.DataModel.Ownership
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy(System.String,TimeCockpit.Data.DataModel.PersistBehavior,TimeCockpit.Data.DataModel.Ownership,System.Boolean,System.Boolean)
    name: ShallowCopy
    nameWithType: RelationBase.ShallowCopy
    fullName: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.PersistBehavior
    name: PersistBehavior
    nameWithType: PersistBehavior
    fullName: TimeCockpit.Data.DataModel.PersistBehavior
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.Ownership
    name: Ownership
    nameWithType: Ownership
    fullName: TimeCockpit.Data.DataModel.Ownership
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Relation.ShallowCopy*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.ShallowCopy
  isExternal: false
  name: ShallowCopy
  nameWithType: Relation.ShallowCopy
  fullName: TimeCockpit.Data.DataModel.Relation.ShallowCopy
- uid: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
  commentId: M:TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: ShallowCopy()
  nameWithType: RelationBase.ShallowCopy()
  fullName: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy()
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
    name: ShallowCopy
    nameWithType: RelationBase.ShallowCopy
    fullName: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
    name: ShallowCopy
    nameWithType: RelationBase.ShallowCopy
    fullName: TimeCockpit.Data.DataModel.RelationBase.ShallowCopy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.DataContractSerializer
  commentId: T:System.Runtime.Serialization.DataContractSerializer
- uid: TimeCockpit.Data.DataModel.Relation.OnDeserializing*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.OnDeserializing
  isExternal: false
  name: OnDeserializing
  nameWithType: Relation.OnDeserializing
  fullName: TimeCockpit.Data.DataModel.Relation.OnDeserializing
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: TimeCockpit.Data.DataModel.Relation.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  commentId: M:TimeCockpit.Data.DataModel.Relation.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
- uid: TimeCockpit.Data.DataModel.ModelElement.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  commentId: M:TimeCockpit.Data.DataModel.ModelElement.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
  parent: TimeCockpit.Data.DataModel.ModelElement
  isExternal: true
  name: Validate(IList<PropertyValidationMessage>, Boolean)
  nameWithType: ModelElement.Validate(IList<PropertyValidationMessage>, Boolean)
  fullName: TimeCockpit.Data.DataModel.ModelElement.Validate(System.Collections.Generic.IList<TimeCockpit.Data.DataModel.PropertyValidationMessage>, System.Boolean)
  nameWithType.vb: ModelElement.Validate(IList(Of PropertyValidationMessage), Boolean)
  fullName.vb: TimeCockpit.Data.DataModel.ModelElement.Validate(System.Collections.Generic.IList(Of TimeCockpit.Data.DataModel.PropertyValidationMessage), System.Boolean)
  name.vb: Validate(IList(Of PropertyValidationMessage), Boolean)
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.ModelElement.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
    name: Validate
    nameWithType: ModelElement.Validate
    fullName: TimeCockpit.Data.DataModel.ModelElement.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.DataModel.PropertyValidationMessage
    name: PropertyValidationMessage
    nameWithType: PropertyValidationMessage
    fullName: TimeCockpit.Data.DataModel.PropertyValidationMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.ModelElement.Validate(System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}@,System.Boolean)
    name: Validate
    nameWithType: ModelElement.Validate
    fullName: TimeCockpit.Data.DataModel.ModelElement.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.DataModel.PropertyValidationMessage
    name: PropertyValidationMessage
    nameWithType: PropertyValidationMessage
    fullName: TimeCockpit.Data.DataModel.PropertyValidationMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Relation.Validate*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.Validate
  isExternal: false
  name: Validate
  nameWithType: Relation.Validate
  fullName: TimeCockpit.Data.DataModel.Relation.Validate
- uid: System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}
  commentId: T:System.Collections.Generic.IList{TimeCockpit.Data.DataModel.PropertyValidationMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<PropertyValidationMessage>
  nameWithType: IList<PropertyValidationMessage>
  fullName: System.Collections.Generic.IList<TimeCockpit.Data.DataModel.PropertyValidationMessage>
  nameWithType.vb: IList(Of PropertyValidationMessage)
  fullName.vb: System.Collections.Generic.IList(Of TimeCockpit.Data.DataModel.PropertyValidationMessage)
  name.vb: IList(Of PropertyValidationMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.DataModel.PropertyValidationMessage
    name: PropertyValidationMessage
    nameWithType: PropertyValidationMessage
    fullName: TimeCockpit.Data.DataModel.PropertyValidationMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.DataModel.PropertyValidationMessage
    name: PropertyValidationMessage
    nameWithType: PropertyValidationMessage
    fullName: TimeCockpit.Data.DataModel.PropertyValidationMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.RelationBase.InitializeObject
  commentId: M:TimeCockpit.Data.DataModel.RelationBase.InitializeObject
  parent: TimeCockpit.Data.DataModel.RelationBase
  isExternal: false
  name: InitializeObject()
  nameWithType: RelationBase.InitializeObject()
  fullName: TimeCockpit.Data.DataModel.RelationBase.InitializeObject()
  spec.csharp:
  - uid: TimeCockpit.Data.DataModel.RelationBase.InitializeObject
    name: InitializeObject
    nameWithType: RelationBase.InitializeObject
    fullName: TimeCockpit.Data.DataModel.RelationBase.InitializeObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataModel.RelationBase.InitializeObject
    name: InitializeObject
    nameWithType: RelationBase.InitializeObject
    fullName: TimeCockpit.Data.DataModel.RelationBase.InitializeObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Relation.InitializeObject*
  commentId: Overload:TimeCockpit.Data.DataModel.Relation.InitializeObject
  isExternal: false
  name: InitializeObject
  nameWithType: Relation.InitializeObject
  fullName: TimeCockpit.Data.DataModel.Relation.InitializeObject
