### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.DataModel.MultiDurationExtensions
  commentId: T:TimeCockpit.Data.DataModel.MultiDurationExtensions
  id: MultiDurationExtensions
  parent: TimeCockpit.Data.DataModel
  children:
  - TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String)
  - TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String,System.String)
  langs:
  - csharp
  - vb
  name: MultiDurationExtensions
  nameWithType: MultiDurationExtensions
  fullName: TimeCockpit.Data.DataModel.MultiDurationExtensions
  type: Class
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nHelper methods for MultiDurations dealing with TCQL statements and range extensions.\n"
  syntax:
    content: public static class MultiDurationExtensions
    content.vb: Public Module MultiDurationExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String,System.String)
  commentId: M:TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String,System.String)
  id: BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String,System.String)
  parent: TimeCockpit.Data.DataModel.MultiDurationExtensions
  langs:
  - csharp
  - vb
  name: BuildMultiDurationPredicate(out String, out ICollection<QueryParameter>, MultiDuration, String, String)
  nameWithType: MultiDurationExtensions.BuildMultiDurationPredicate(out String, out ICollection<QueryParameter>, MultiDuration, String, String)
  fullName: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(out System.String, out System.Collections.Generic.ICollection<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.DataModel.MultiDuration, System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nCreates a condition for a TCQL expression, where a\nduration signal described by signalBegin and signalEnd\nis checked against whether any of the multi duration\nparts touches the duration signal\n"
  syntax:
    content: public static void BuildMultiDurationPredicate(out string predicate, out ICollection<QueryParameter> queryParams, MultiDuration multiDuration, string signalBeginProperty, string signalEndProperty)
    parameters:
    - id: predicate
      type: System.String
      description: resulting predicate string
    - id: queryParams
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: queryparameters to add to the final query.
    - id: multiDuration
      type: TimeCockpit.Data.DataModel.MultiDuration
      description: multi duration to create conditional for.
    - id: signalBeginProperty
      type: System.String
      description: string describing the begin field of the entity to check.
    - id: signalEndProperty
      type: System.String
      description: string describing the end field of the entity to check.
    content.vb: Public Shared Sub BuildMultiDurationPredicate(ByRef predicate As String, ByRef queryParams As ICollection(Of QueryParameter), multiDuration As MultiDuration, signalBeginProperty As String, signalEndProperty As String)
  overload: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate*
  nameWithType.vb: MultiDurationExtensions.BuildMultiDurationPredicate(ByRef String, ByRef ICollection(Of QueryParameter), MultiDuration, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(ByRef System.String, ByRef System.Collections.Generic.ICollection(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.DataModel.MultiDuration, System.String, System.String)
  name.vb: BuildMultiDurationPredicate(ByRef String, ByRef ICollection(Of QueryParameter), MultiDuration, String, String)
- uid: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String)
  commentId: M:TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String)
  id: BuildMultiDurationPredicate(System.String@,System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}@,TimeCockpit.Data.DataModel.MultiDuration,System.String)
  parent: TimeCockpit.Data.DataModel.MultiDurationExtensions
  langs:
  - csharp
  - vb
  name: BuildMultiDurationPredicate(out String, out ICollection<QueryParameter>, MultiDuration, String)
  nameWithType: MultiDurationExtensions.BuildMultiDurationPredicate(out String, out ICollection<QueryParameter>, MultiDuration, String)
  fullName: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(out System.String, out System.Collections.Generic.ICollection<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.DataModel.MultiDuration, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.DataModel
  summary: "\nCreates a condition for a TCQL expression, where a\npoint signal described by a eventTime\nis checked against whether any of the multi duration\nparts touches the duration signal\n"
  syntax:
    content: public static void BuildMultiDurationPredicate(out string predicate, out ICollection<QueryParameter> queryParams, MultiDuration multiDuration, string signalEventTimeProperty)
    parameters:
    - id: predicate
      type: System.String
      description: resulting predicate string
    - id: queryParams
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: queryparameters to add to the final query.
    - id: multiDuration
      type: TimeCockpit.Data.DataModel.MultiDuration
      description: multi duration to create conditional for.
    - id: signalEventTimeProperty
      type: System.String
      description: string describing the event time field of the entity to check.
    content.vb: Public Shared Sub BuildMultiDurationPredicate(ByRef predicate As String, ByRef queryParams As ICollection(Of QueryParameter), multiDuration As MultiDuration, signalEventTimeProperty As String)
  overload: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate*
  nameWithType.vb: MultiDurationExtensions.BuildMultiDurationPredicate(ByRef String, ByRef ICollection(Of QueryParameter), MultiDuration, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate(ByRef System.String, ByRef System.Collections.Generic.ICollection(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.DataModel.MultiDuration, System.String)
  name.vb: BuildMultiDurationPredicate(ByRef String, ByRef ICollection(Of QueryParameter), MultiDuration, String)
references:
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: true
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate*
  commentId: Overload:TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate
  isExternal: true
  name: BuildMultiDurationPredicate
  nameWithType: MultiDurationExtensions.BuildMultiDurationPredicate
  fullName: TimeCockpit.Data.DataModel.MultiDurationExtensions.BuildMultiDurationPredicate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}
  commentId: T:System.Collections.Generic.ICollection{TimeCockpit.Data.QueryLanguage.QueryParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<QueryParameter>
  nameWithType: ICollection<QueryParameter>
  fullName: System.Collections.Generic.ICollection<TimeCockpit.Data.QueryLanguage.QueryParameter>
  nameWithType.vb: ICollection(Of QueryParameter)
  fullName.vb: System.Collections.Generic.ICollection(Of TimeCockpit.Data.QueryLanguage.QueryParameter)
  name.vb: ICollection(Of QueryParameter)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.MultiDuration
  commentId: T:TimeCockpit.Data.DataModel.MultiDuration
  parent: TimeCockpit.Data.DataModel
  isExternal: true
  name: MultiDuration
  nameWithType: MultiDuration
  fullName: TimeCockpit.Data.DataModel.MultiDuration
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
