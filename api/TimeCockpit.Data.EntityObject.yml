### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  id: EntityObject
  parent: TimeCockpit.Data
  children:
  - TimeCockpit.Data.EntityObject.#ctor
  - TimeCockpit.Data.EntityObject.CalculateMember(System.String)
  - TimeCockpit.Data.EntityObject.Clone
  - TimeCockpit.Data.EntityObject.Clone(System.Boolean)
  - TimeCockpit.Data.EntityObject.Clone(System.Boolean,System.Boolean)
  - TimeCockpit.Data.EntityObject.Clone(System.Boolean,System.Boolean,TimeCockpit.Data.Environment)
  - TimeCockpit.Data.EntityObject.Clone(TimeCockpit.Data.DataModel.ModelEntityBase)
  - TimeCockpit.Data.EntityObject.CompareTo(System.Object)
  - TimeCockpit.Data.EntityObject.CopyTo(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.EntityObject.CreationVersion
  - TimeCockpit.Data.EntityObject.Deserialize(System.String,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  - TimeCockpit.Data.EntityObject.Deserialize(System.Xml.Linq.XElement,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  - TimeCockpit.Data.EntityObject.Entity
  - TimeCockpit.Data.EntityObject.Evaluate``1(System.String)
  - TimeCockpit.Data.EntityObject.Evaluate``1(System.String,TimeCockpit.Data.Environment,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  - TimeCockpit.Data.EntityObject.GetActualMember(System.String)
  - TimeCockpit.Data.EntityObject.GetChangedMembers
  - TimeCockpit.Data.EntityObject.GetMember(System.Int32)
  - TimeCockpit.Data.EntityObject.GetMember(System.String)
  - TimeCockpit.Data.EntityObject.GetMetaObject(System.Linq.Expressions.Expression)
  - TimeCockpit.Data.EntityObject.GetPropertyIndex(System.String)
  - TimeCockpit.Data.EntityObject.GetValidationMessages(TimeCockpit.Data.Localization.NameLocalizer)
  - TimeCockpit.Data.EntityObject.HasPermission(System.String,TimeCockpit.Data.Security.PermissionType)
  - TimeCockpit.Data.EntityObject.IsChanged
  - TimeCockpit.Data.EntityObject.IsCloned
  - TimeCockpit.Data.EntityObject.IsDeleted
  - TimeCockpit.Data.EntityObject.IsNew
  - TimeCockpit.Data.EntityObject.IsReadOnly
  - TimeCockpit.Data.EntityObject.Item(System.String)
  - TimeCockpit.Data.EntityObject.LastUpdateVersion
  - TimeCockpit.Data.EntityObject.LocalizedPropertyValues
  - TimeCockpit.Data.EntityObject.MarkAsDeleted
  - TimeCockpit.Data.EntityObject.MarkAsNew(System.Boolean)
  - TimeCockpit.Data.EntityObject.Me
  - TimeCockpit.Data.EntityObject.ModelEntityName
  - TimeCockpit.Data.EntityObject.ObjectUuid
  - TimeCockpit.Data.EntityObject.OnPropertyChanged(System.Int32,System.Object,System.Object)
  - TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String,System.Object,System.Object)
  - TimeCockpit.Data.EntityObject.Permission
  - TimeCockpit.Data.EntityObject.PropertyChanged
  - TimeCockpit.Data.EntityObject.RelationIdentifiers
  - TimeCockpit.Data.EntityObject.Serialize
  - TimeCockpit.Data.EntityObject.Serialize(System.Boolean)
  - TimeCockpit.Data.EntityObject.Serialize(System.Xml.XmlWriter,System.Boolean)
  - TimeCockpit.Data.EntityObject.SetMember(System.Int32,System.Object)
  - TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object)
  - TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object,System.Boolean,System.Boolean)
  - TimeCockpit.Data.EntityObject.States
  - TimeCockpit.Data.EntityObject.ToString
  - TimeCockpit.Data.EntityObject.Validate(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{TimeCockpit.Data.DataModel.ValidationRule}@,TimeCockpit.Data.Localization.NameLocalizer)
  - TimeCockpit.Data.EntityObject.Validate(System.String,System.String@,TimeCockpit.Data.DataModel.ValidationRule@,TimeCockpit.Data.Localization.NameLocalizer)
  - TimeCockpit.Data.EntityObject.Values
  langs:
  - csharp
  - vb
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: EntityObject
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 34
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nRepresents an instance of a <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      [JsonObject(MemberSerialization.OptIn)]

      public class EntityObject : DynamicObject, IDynamicMetaObjectProvider, INotifyPropertyChanged, IEntityObject, IComparable
    content.vb: >-
      <DataContract>

      <JsonObject(MemberSerialization.OptIn)>

      Public Class EntityObject
          Inherits DynamicObject
          Implements IDynamicMetaObjectProvider, INotifyPropertyChanged, IEntityObject, IComparable
  inheritance:
  - System.Object
  - TimeCockpit.Data.DynamicObject
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider
  - System.ComponentModel.INotifyPropertyChanged
  - TimeCockpit.Data.IEntityObject
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - TimeCockpit.Data.EntityObject.TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(System.String,System.String)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)
    arguments:
    - type: Newtonsoft.Json.MemberSerialization
      value: 1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.EntityObject.#ctor
  commentId: M:TimeCockpit.Data.EntityObject.#ctor
  id: '#ctor'
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: EntityObject()
  nameWithType: EntityObject.EntityObject()
  fullName: TimeCockpit.Data.EntityObject.EntityObject()
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 76
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInitializes a new instance of the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public EntityObject()
    content.vb: Public Sub New
  overload: TimeCockpit.Data.EntityObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.PropertyChanged
  commentId: E:TimeCockpit.Data.EntityObject.PropertyChanged
  id: PropertyChanged
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: EntityObject.PropertyChanged
  fullName: TimeCockpit.Data.EntityObject.PropertyChanged
  type: Event
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: PropertyChanged
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 132
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nOccurs after the value of an application settings property is changed.\n"
  example: []
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Entity
  commentId: P:TimeCockpit.Data.EntityObject.Entity
  id: Entity
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Entity
  nameWithType: EntityObject.Entity
  fullName: TimeCockpit.Data.EntityObject.Entity
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Entity
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 137
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets or sets the <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> of the object.\n"
  example: []
  syntax:
    content: public ModelEntityBase Entity { get; protected set; }
    parameters: []
    return:
      type: TimeCockpit.Data.DataModel.ModelEntityBase
    content.vb: Public Property Entity As ModelEntityBase
  overload: TimeCockpit.Data.EntityObject.Entity*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TimeCockpit.Data.EntityObject.ObjectUuid
  commentId: P:TimeCockpit.Data.EntityObject.ObjectUuid
  id: ObjectUuid
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: ObjectUuid
  nameWithType: EntityObject.ObjectUuid
  fullName: TimeCockpit.Data.EntityObject.ObjectUuid
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: ObjectUuid
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 142
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the unique id of the object.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Guid ObjectUuid { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public ReadOnly Property ObjectUuid As Guid
  overload: TimeCockpit.Data.EntityObject.ObjectUuid*
  implements:
  - TimeCockpit.Data.IEntityObject.ObjectUuid
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.ModelEntityName
  commentId: P:TimeCockpit.Data.EntityObject.ModelEntityName
  id: ModelEntityName
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: ModelEntityName
  nameWithType: EntityObject.ModelEntityName
  fullName: TimeCockpit.Data.EntityObject.ModelEntityName
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: ModelEntityName
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 148
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the name of the current instance of <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [JsonProperty]

      public string ModelEntityName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty>

      Public ReadOnly Property ModelEntityName As String
  overload: TimeCockpit.Data.EntityObject.ModelEntityName*
  implements:
  - TimeCockpit.Data.IEntityObject.ModelEntityName
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.IsNew
  commentId: P:TimeCockpit.Data.EntityObject.IsNew
  id: IsNew
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: IsNew
  nameWithType: EntityObject.IsNew
  fullName: TimeCockpit.Data.EntityObject.IsNew
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: IsNew
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 161
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a value indicating whether the object is new.\nSee also <xref href=\"TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String%2cSystem.Object%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      public bool IsNew { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Public ReadOnly Property IsNew As Boolean
  overload: TimeCockpit.Data.EntityObject.IsNew*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.IsChanged
  commentId: P:TimeCockpit.Data.EntityObject.IsChanged
  id: IsChanged
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: IsChanged
  nameWithType: EntityObject.IsChanged
  fullName: TimeCockpit.Data.EntityObject.IsChanged
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: IsChanged
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 185
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a value indicating whether the object was changed.\nSee also <xref href=\"TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String%2cSystem.Object%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      public bool IsChanged { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Public ReadOnly Property IsChanged As Boolean
  overload: TimeCockpit.Data.EntityObject.IsChanged*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.IsDeleted
  commentId: P:TimeCockpit.Data.EntityObject.IsDeleted
  id: IsDeleted
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: IsDeleted
  nameWithType: EntityObject.IsDeleted
  fullName: TimeCockpit.Data.EntityObject.IsDeleted
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: IsDeleted
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 209
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a value indicating whether the object was deleted.\nSee also <xref href=\"TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String%2cSystem.Object%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      public bool IsDeleted { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Public ReadOnly Property IsDeleted As Boolean
  overload: TimeCockpit.Data.EntityObject.IsDeleted*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.IsCloned
  commentId: P:TimeCockpit.Data.EntityObject.IsCloned
  id: IsCloned
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: IsCloned
  nameWithType: EntityObject.IsCloned
  fullName: TimeCockpit.Data.EntityObject.IsCloned
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: IsCloned
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 232
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a value indicating whether this instance is cloned.\n"
  example: []
  syntax:
    content: public bool IsCloned { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCloned As Boolean
  overload: TimeCockpit.Data.EntityObject.IsCloned*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.Me
  commentId: P:TimeCockpit.Data.EntityObject.Me
  id: Me
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Me
  nameWithType: EntityObject.Me
  fullName: TimeCockpit.Data.EntityObject.Me
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Me
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 248
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the it self\n"
  remarks: "\nThis property is needed for DataBinding reasons. \nWhenever a property of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> is changed (e.g. via z.SetMember(&quot;X&quot;, &quot;Y&quot;)), the <xref href=\"TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String%2cSystem.Object%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> event\nof that property + the <xref href=\"TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String%2cSystem.Object%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> event of the Me property is fired.\n"
  example: []
  syntax:
    content: public EntityObject Me { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.EntityObject
    content.vb: Public ReadOnly Property Me As EntityObject
  overload: TimeCockpit.Data.EntityObject.Me*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.RelationIdentifiers
  commentId: P:TimeCockpit.Data.EntityObject.RelationIdentifiers
  id: RelationIdentifiers
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: RelationIdentifiers
  nameWithType: EntityObject.RelationIdentifiers
  fullName: TimeCockpit.Data.EntityObject.RelationIdentifiers
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: RelationIdentifiers
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 259
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the relation identifiers for the <code>EntityObject</code>\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      public RelationIdentifiers RelationIdentifiers { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.RelationIdentifiers
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Public ReadOnly Property RelationIdentifiers As RelationIdentifiers
  overload: TimeCockpit.Data.EntityObject.RelationIdentifiers*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.CreationVersion
  commentId: P:TimeCockpit.Data.EntityObject.CreationVersion
  id: CreationVersion
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: CreationVersion
  nameWithType: EntityObject.CreationVersion
  fullName: TimeCockpit.Data.EntityObject.CreationVersion
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: CreationVersion
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 266
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the creation version of the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ulong CreationVersion { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property CreationVersion As ULong
  overload: TimeCockpit.Data.EntityObject.CreationVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.LastUpdateVersion
  commentId: P:TimeCockpit.Data.EntityObject.LastUpdateVersion
  id: LastUpdateVersion
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: LastUpdateVersion
  nameWithType: EntityObject.LastUpdateVersion
  fullName: TimeCockpit.Data.EntityObject.LastUpdateVersion
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: LastUpdateVersion
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 271
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the update version of the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ulong LastUpdateVersion { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property LastUpdateVersion As ULong
  overload: TimeCockpit.Data.EntityObject.LastUpdateVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.IsReadOnly
  commentId: P:TimeCockpit.Data.EntityObject.IsReadOnly
  id: IsReadOnly
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: EntityObject.IsReadOnly
  fullName: TimeCockpit.Data.EntityObject.IsReadOnly
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: IsReadOnly
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 283
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a value indicating whether an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nis locked depending on the <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyFunction\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIf the <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> that underlies the current <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nhas no <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyExpression\" data-throw-if-not-resolved=\"false\"></xref> set the property always returns false.\nIf the <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> has a <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyExpression\" data-throw-if-not-resolved=\"false\"></xref> set, it\nis evaluated with the values of the current <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> an returns a boolean value accordingly.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Public ReadOnly Property IsReadOnly As Boolean
  overload: TimeCockpit.Data.EntityObject.IsReadOnly*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.LocalizedPropertyValues
  commentId: P:TimeCockpit.Data.EntityObject.LocalizedPropertyValues
  id: LocalizedPropertyValues
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: LocalizedPropertyValues
  nameWithType: EntityObject.LocalizedPropertyValues
  fullName: TimeCockpit.Data.EntityObject.LocalizedPropertyValues
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: LocalizedPropertyValues
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 303
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the localized property values.\n"
  example: []
  syntax:
    content: public LocalizedTextPropertyCollection LocalizedPropertyValues { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.Localization.LocalizedTextPropertyCollection
    content.vb: Public ReadOnly Property LocalizedPropertyValues As LocalizedTextPropertyCollection
  overload: TimeCockpit.Data.EntityObject.LocalizedPropertyValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.Permission
  commentId: P:TimeCockpit.Data.EntityObject.Permission
  id: Permission
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Permission
  nameWithType: EntityObject.Permission
  fullName: TimeCockpit.Data.EntityObject.Permission
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Permission
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 308
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the permissions of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      public PermissionType Permission { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.Security.PermissionType
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Public ReadOnly Property Permission As PermissionType
  overload: TimeCockpit.Data.EntityObject.Permission*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.Values
  commentId: P:TimeCockpit.Data.EntityObject.Values
  id: Values
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: EntityObject.Values
  fullName: TimeCockpit.Data.EntityObject.Values
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Values
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 376
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a dictionary of values for an object.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      protected object[] Values { get; }
    parameters: []
    return:
      type: System.Object[]
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Protected ReadOnly Property Values As Object()
  overload: TimeCockpit.Data.EntityObject.Values*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.States
  commentId: P:TimeCockpit.Data.EntityObject.States
  id: States
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: States
  nameWithType: EntityObject.States
  fullName: TimeCockpit.Data.EntityObject.States
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: States
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 383
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a dictionary of property states for an object.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonIgnore]

      protected MemberStatus[] States { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.MemberStatus[]
    content.vb: >-
      <DataMember>

      <JsonIgnore>

      Protected ReadOnly Property States As MemberStatus()
  overload: TimeCockpit.Data.EntityObject.States*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: TimeCockpit.Data.EntityObject.Item(System.String)
  commentId: P:TimeCockpit.Data.EntityObject.Item(System.String)
  id: Item(System.String)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: EntityObject.Item[String]
  fullName: TimeCockpit.Data.EntityObject.Item[System.String]
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: this[]
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 406
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the value of a specified member\n"
  remarks: "\nInternally, this indexer calls <xref href=\"TimeCockpit.Data.EntityObject.GetMember(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TimeCockpit.Data.EntityObject.SetMember(System.String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe indexer was introduced for the use in IronPython, where no <xref href=\"TimeCockpit.Data.EntityObject.GetMember(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"TimeCockpit.Data.EntityObject.SetMember(System.String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> can be called. Without the indexer it was not possible in Python\nto run through the properties/ relations of a <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> and set the values\nof a dependent <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public object this[string propertyName] { get; set; }
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the member to get the value for.
    return:
      type: System.Object
      description: Returns the value of the specified member.
    content.vb: Public Property Item(propertyName As String) As Object
  overload: TimeCockpit.Data.EntityObject.Item*
  nameWithType.vb: EntityObject.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.EntityObject.Item(System.String)
  name.vb: Item(String)
- uid: TimeCockpit.Data.EntityObject.Deserialize(System.Xml.Linq.XElement,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  commentId: M:TimeCockpit.Data.EntityObject.Deserialize(System.Xml.Linq.XElement,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  id: Deserialize(System.Xml.Linq.XElement,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Deserialize(XElement, EntityObject, Model)
  nameWithType: EntityObject.Deserialize(XElement, EntityObject, Model)
  fullName: TimeCockpit.Data.EntityObject.Deserialize(System.Xml.Linq.XElement, TimeCockpit.Data.EntityObject, TimeCockpit.Data.DataModel.Model)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Deserialize
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 437
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nDeserializes an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> from a string in XML format.\n"
  remarks: "\n<p>\nFor <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> that have relations, this method calls itself recursively\nto deserialize all the properties/ relations of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>. See also <xref href=\"TimeCockpit.Data.EntityObject.Serialize\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public static EntityObject Deserialize(XElement root, EntityObject parentEntity, Model model)
    parameters:
    - id: root
      type: System.Xml.Linq.XElement
      description: <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> from the XML parser
    - id: parentEntity
      type: TimeCockpit.Data.EntityObject
      description: The parent <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: An instance of <xref href="TimeCockpit.Data.DataModel.Model" data-throw-if-not-resolved="false"></xref>
    return:
      type: TimeCockpit.Data.EntityObject
      description: The deserialized instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Deserialize(root As XElement, parentEntity As EntityObject, model As Model) As EntityObject
  overload: TimeCockpit.Data.EntityObject.Deserialize*
  exceptions:
  - type: TimeCockpit.Data.DataModel.UnknownEncodingException
    commentId: T:TimeCockpit.Data.DataModel.UnknownEncodingException
    description: "\nIf the propertyEncoding attribute is present in the XML to deserialize and it is set\nto another value than &apos;Base64&apos; this method throws a <xref href=\"TimeCockpit.Data.DataModel.UnknownEncodingException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.EntityObject.Deserialize(System.String,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  commentId: M:TimeCockpit.Data.EntityObject.Deserialize(System.String,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  id: Deserialize(System.String,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Deserialize(String, EntityObject, Model)
  nameWithType: EntityObject.Deserialize(String, EntityObject, Model)
  fullName: TimeCockpit.Data.EntityObject.Deserialize(System.String, TimeCockpit.Data.EntityObject, TimeCockpit.Data.DataModel.Model)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Deserialize
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 578
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nDeserializes an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> from a string in XML format.\n"
  example: []
  syntax:
    content: public static EntityObject Deserialize(string data, EntityObject parentEntity, Model model)
    parameters:
    - id: data
      type: System.String
      description: An instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> in XML representation.
    - id: parentEntity
      type: TimeCockpit.Data.EntityObject
      description: The parent <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: An instance of <xref href="TimeCockpit.Data.DataModel.Model" data-throw-if-not-resolved="false"></xref> to fetch type information about the <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>&apos;s underlying <xref href="TimeCockpit.Data.DataModel.ModelEntityBase" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TimeCockpit.Data.EntityObject
      description: An instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> deserialized from XML
    content.vb: Public Shared Function Deserialize(data As String, parentEntity As EntityObject, model As Model) As EntityObject
  overload: TimeCockpit.Data.EntityObject.Deserialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.EntityObject.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.EntityObject.GetMetaObject(System.Linq.Expressions.Expression)
  id: GetMetaObject(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: GetMetaObject(Expression)
  nameWithType: EntityObject.GetMetaObject(Expression)
  fullName: TimeCockpit.Data.EntityObject.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: GetMetaObject
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 589
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the meta object of the dynamic object.\n"
  example: []
  syntax:
    content: public override DynamicMetaObject GetMetaObject(Expression parameter)
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
      description: Provided by the DLR (Dynamic Language Runtime).
    return:
      type: System.Dynamic.DynamicMetaObject
      description: <xref href="System.Dynamic.DynamicMetaObject" data-throw-if-not-resolved="false"></xref> that represents this specific object’s binding logic.
    content.vb: Public Overrides Function GetMetaObject(parameter As Expression) As DynamicMetaObject
  overridden: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  overload: TimeCockpit.Data.EntityObject.GetMetaObject*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.EntityObject.ToString
  commentId: M:TimeCockpit.Data.EntityObject.ToString
  id: ToString
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: EntityObject.ToString()
  fullName: TimeCockpit.Data.EntityObject.ToString()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: ToString
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 605
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  remarks: "\nThis methods returns the value of the default display property as string. \nIf the default display property happens to be a relation, it returns the value\nof the default display property of the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> that is behind the relation.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: TimeCockpit.Data.EntityObject.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.EntityObject.Clone
  commentId: M:TimeCockpit.Data.EntityObject.Clone
  id: Clone
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: EntityObject.Clone()
  fullName: TimeCockpit.Data.EntityObject.Clone()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Clone
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 644
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nMakes a deep clone an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> while preserving the type of the underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EntityObject Clone()
    return:
      type: TimeCockpit.Data.EntityObject
      description: A cloned entity object
    content.vb: Public Function Clone As EntityObject
  overload: TimeCockpit.Data.EntityObject.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Clone(System.Boolean)
  commentId: M:TimeCockpit.Data.EntityObject.Clone(System.Boolean)
  id: Clone(System.Boolean)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Clone(Boolean)
  nameWithType: EntityObject.Clone(Boolean)
  fullName: TimeCockpit.Data.EntityObject.Clone(System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Clone
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 656
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nMakes a deep clone an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> while preserving the type of the underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EntityObject Clone(bool deepClone)
    parameters:
    - id: deepClone
      type: System.Boolean
      description: if set to <code>true</code> the instances of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> are created with a new id.
    return:
      type: TimeCockpit.Data.EntityObject
      description: "\nA cloned entity object\n"
    content.vb: Public Function Clone(deepClone As Boolean) As EntityObject
  overload: TimeCockpit.Data.EntityObject.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Clone(System.Boolean,System.Boolean)
  commentId: M:TimeCockpit.Data.EntityObject.Clone(System.Boolean,System.Boolean)
  id: Clone(System.Boolean,System.Boolean)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Clone(Boolean, Boolean)
  nameWithType: EntityObject.Clone(Boolean, Boolean)
  fullName: TimeCockpit.Data.EntityObject.Clone(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Clone
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 669
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nMakes a deep clone an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> while preserving the type of the underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EntityObject Clone(bool deepClone, bool resetMembersInReadonlyExpression)
    parameters:
    - id: deepClone
      type: System.Boolean
      description: if set to <code>true</code> the instances of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> are created with a new id.
    - id: resetMembersInReadonlyExpression
      type: System.Boolean
      description: if set to <code>true</code> [reset members in readonly expression].
    return:
      type: TimeCockpit.Data.EntityObject
      description: "\nA cloned entity object\n"
    content.vb: Public Function Clone(deepClone As Boolean, resetMembersInReadonlyExpression As Boolean) As EntityObject
  overload: TimeCockpit.Data.EntityObject.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Clone(System.Boolean,System.Boolean,TimeCockpit.Data.Environment)
  commentId: M:TimeCockpit.Data.EntityObject.Clone(System.Boolean,System.Boolean,TimeCockpit.Data.Environment)
  id: Clone(System.Boolean,System.Boolean,TimeCockpit.Data.Environment)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Clone(Boolean, Boolean, Environment)
  nameWithType: EntityObject.Clone(Boolean, Boolean, Environment)
  fullName: TimeCockpit.Data.EntityObject.Clone(System.Boolean, System.Boolean, TimeCockpit.Data.Environment)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Clone
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 683
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nMakes a deep clone an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> while preserving the type of the underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EntityObject Clone(bool deepClone, bool resetMembersInReadonlyExpression, Environment environment)
    parameters:
    - id: deepClone
      type: System.Boolean
      description: if set to <code>true</code> the instances of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> are created with a new id.
    - id: resetMembersInReadonlyExpression
      type: System.Boolean
      description: if set to <code>true</code> [reset members in readonly expression].
    - id: environment
      type: TimeCockpit.Data.Environment
      description: An instance of environment to perform permission validation.
    return:
      type: TimeCockpit.Data.EntityObject
      description: "\nA cloned entity object\n"
    content.vb: Public Function Clone(deepClone As Boolean, resetMembersInReadonlyExpression As Boolean, environment As Environment) As EntityObject
  overload: TimeCockpit.Data.EntityObject.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Clone(TimeCockpit.Data.DataModel.ModelEntityBase)
  commentId: M:TimeCockpit.Data.EntityObject.Clone(TimeCockpit.Data.DataModel.ModelEntityBase)
  id: Clone(TimeCockpit.Data.DataModel.ModelEntityBase)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Clone(ModelEntityBase)
  nameWithType: EntityObject.Clone(ModelEntityBase)
  fullName: TimeCockpit.Data.EntityObject.Clone(TimeCockpit.Data.DataModel.ModelEntityBase)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Clone
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 693
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nMakes a deep clone of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> but does not preserve the orignial <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EntityObject Clone(ModelEntityBase entity)
    parameters:
    - id: entity
      type: TimeCockpit.Data.DataModel.ModelEntityBase
      description: The <xref href="TimeCockpit.Data.DataModel.ModelEntityBase" data-throw-if-not-resolved="false"></xref> that the cloned <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> should base on.
    return:
      type: TimeCockpit.Data.EntityObject
      description: A cloned instance of an <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Clone(entity As ModelEntityBase) As EntityObject
  overload: TimeCockpit.Data.EntityObject.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.CopyTo(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.EntityObject.CopyTo(TimeCockpit.Data.EntityObject)
  id: CopyTo(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: CopyTo(EntityObject)
  nameWithType: EntityObject.CopyTo(EntityObject)
  fullName: TimeCockpit.Data.EntityObject.CopyTo(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: CopyTo
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 703
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCopies the values of an instance of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> to another instance.\nThis method only copies first level relations and properties.\n/// "
  example: []
  syntax:
    content: public void CopyTo(EntityObject target)
    parameters:
    - id: target
      type: TimeCockpit.Data.EntityObject
      description: The target <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub CopyTo(target As EntityObject)
  overload: TimeCockpit.Data.EntityObject.CopyTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.GetMember(System.String)
  commentId: M:TimeCockpit.Data.EntityObject.GetMember(System.String)
  id: GetMember(System.String)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: GetMember(String)
  nameWithType: EntityObject.GetMember(String)
  fullName: TimeCockpit.Data.EntityObject.GetMember(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: GetMember
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 749
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the value of the specified member.\n"
  remarks: "\nThis method also returns the clr properties &apos;{ModelEntityName}Uuid&apos; and &apos;IsReadOnly&apos; of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override object GetMember(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the member.
    return:
      type: System.Object
      description: Returns the value of the specified member.
    content.vb: Public Overrides Function GetMember(name As String) As Object
  overridden: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  overload: TimeCockpit.Data.EntityObject.GetMember*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.EntityObject.GetMember(System.Int32)
  commentId: M:TimeCockpit.Data.EntityObject.GetMember(System.Int32)
  id: GetMember(System.Int32)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: GetMember(Int32)
  nameWithType: EntityObject.GetMember(Int32)
  fullName: TimeCockpit.Data.EntityObject.GetMember(System.Int32)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: GetMember
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 759
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the value of the specified member.\n"
  example: []
  syntax:
    content: public object GetMember(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the member.
    return:
      type: System.Object
      description: Returns the value of the specified member.
    content.vb: Public Function GetMember(index As Integer) As Object
  overload: TimeCockpit.Data.EntityObject.GetMember*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.GetActualMember(System.String)
  commentId: M:TimeCockpit.Data.EntityObject.GetActualMember(System.String)
  id: GetActualMember(System.String)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: GetActualMember(String)
  nameWithType: EntityObject.GetActualMember(String)
  fullName: TimeCockpit.Data.EntityObject.GetActualMember(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: GetActualMember
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 775
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the actual value of the specified member.\n"
  example: []
  syntax:
    content: public virtual object GetActualMember(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the member.
    return:
      type: System.Object
      description: "\nReturns the actual value of the specified member. The default implementation\nof this method calls <xref href=\"TimeCockpit.Data.EntityObject.GetMember(System.String)\" data-throw-if-not-resolved=\"false\"></xref>. However, classes that implement\nspecific business logic in <xref href=\"TimeCockpit.Data.EntityObject.GetMember(System.String)\" data-throw-if-not-resolved=\"false\"></xref> that should be available from \nscripts but should NOT be used for saving objects&apos; values to the database can override\n<code>GetActualMember</code>.\n"
    content.vb: Public Overridable Function GetActualMember(name As String) As Object
  overload: TimeCockpit.Data.EntityObject.GetActualMember*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TimeCockpit.Data.EntityObject.CalculateMember(System.String)
  commentId: M:TimeCockpit.Data.EntityObject.CalculateMember(System.String)
  id: CalculateMember(System.String)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: CalculateMember(String)
  nameWithType: EntityObject.CalculateMember(String)
  fullName: TimeCockpit.Data.EntityObject.CalculateMember(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: CalculateMember
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 787
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nEvaluates a formla, applies it to this <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> and returns the result.\n"
  example: []
  syntax:
    content: public object CalculateMember(string formula)
    parameters:
    - id: formula
      type: System.String
      description: Formla to evaluate
    return:
      type: System.Object
      description: Result of the formula
    content.vb: Public Function CalculateMember(formula As String) As Object
  overload: TimeCockpit.Data.EntityObject.CalculateMember*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: might throw a NullReferenceException.
  seealso:
  - linkId: TimeCockpit.Data.DataModel.CalculatedProperty
    commentId: T:TimeCockpit.Data.DataModel.CalculatedProperty
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.SetMember(System.Int32,System.Object)
  commentId: M:TimeCockpit.Data.EntityObject.SetMember(System.Int32,System.Object)
  id: SetMember(System.Int32,System.Object)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: SetMember(Int32, Object)
  nameWithType: EntityObject.SetMember(Int32, Object)
  fullName: TimeCockpit.Data.EntityObject.SetMember(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: SetMember
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 823
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSets a dynamic member.\n"
  example: []
  syntax:
    content: public void SetMember(int index, object value)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the member to set.
    - id: value
      type: System.Object
      description: Value to set.
    content.vb: Public Sub SetMember(index As Integer, value As Object)
  overload: TimeCockpit.Data.EntityObject.SetMember*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object)
  commentId: M:TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object)
  id: SetMember(System.String,System.Object)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: SetMember(String, Object)
  nameWithType: EntityObject.SetMember(String, Object)
  fullName: TimeCockpit.Data.EntityObject.SetMember(System.String, System.Object)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: SetMember
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 833
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSets a dynamic member.\n"
  example: []
  syntax:
    content: public override void SetMember(string name, object value)
    parameters:
    - id: name
      type: System.String
      description: Name of the member to set.
    - id: value
      type: System.Object
      description: Value to set.
    content.vb: Public Overrides Sub SetMember(name As String, value As Object)
  overridden: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  overload: TimeCockpit.Data.EntityObject.SetMember*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.EntityObject.Serialize
  commentId: M:TimeCockpit.Data.EntityObject.Serialize
  id: Serialize
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Serialize()
  nameWithType: EntityObject.Serialize()
  fullName: TimeCockpit.Data.EntityObject.Serialize()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Serialize
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 842
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSerializes an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> in XML\n"
  example: []
  syntax:
    content: public XmlReader Serialize()
    return:
      type: System.Xml.XmlReader
      description: An instance of an <xref href="System.Xml.XmlReader" data-throw-if-not-resolved="false"></xref> representing the serialized <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Serialize As XmlReader
  overload: TimeCockpit.Data.EntityObject.Serialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Serialize(System.Boolean)
  commentId: M:TimeCockpit.Data.EntityObject.Serialize(System.Boolean)
  id: Serialize(System.Boolean)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Serialize(Boolean)
  nameWithType: EntityObject.Serialize(Boolean)
  fullName: TimeCockpit.Data.EntityObject.Serialize(System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Serialize
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 866
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSerializes an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> in XML.\n"
  remarks: "\n<p>\nIf the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> that should be serialized has not been attatched to an instance of <xref href=\"TimeCockpit.Data.DataModel.Model\" data-throw-if-not-resolved=\"false\"></xref> the method serializes the type information of \nthe underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> as well. During deserialization (see <xref href=\"TimeCockpit.Data.EntityObject.Deserialize(System.String%2cTimeCockpit.Data.EntityObject%2cTimeCockpit.Data.DataModel.Model)\" data-throw-if-not-resolved=\"false\"></xref>) the <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> type is reconstructed and \nthe <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> can be deserialized on its basis.\n</p>\n<p>\nThis method serializes an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> in UTF8 XML\n</p>\n<p>\nThis method serializes properties of a <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> by converting their value into a Base64 string. Therefore, e.g. a <xref href=\"TimeCockpit.Data.DataModel.TextProperty\" data-throw-if-not-resolved=\"false\"></xref>\ncan contain all ASCII character. If the values would not be encoded, control characters e.g. would lead to invalid XML.\n</p>\n"
  example: []
  syntax:
    content: public XmlReader Serialize(bool idsOnly)
    parameters:
    - id: idsOnly
      type: System.Boolean
      description: Determines whether to serialize the whole entity object in case of a relation or just the identifier or the relation.
    return:
      type: System.Xml.XmlReader
      description: An instance of an <xref href="System.Xml.XmlReader" data-throw-if-not-resolved="false"></xref> representig <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Serialize(idsOnly As Boolean) As XmlReader
  overload: TimeCockpit.Data.EntityObject.Serialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Serialize(System.Xml.XmlWriter,System.Boolean)
  commentId: M:TimeCockpit.Data.EntityObject.Serialize(System.Xml.XmlWriter,System.Boolean)
  id: Serialize(System.Xml.XmlWriter,System.Boolean)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Serialize(XmlWriter, Boolean)
  nameWithType: EntityObject.Serialize(XmlWriter, Boolean)
  fullName: TimeCockpit.Data.EntityObject.Serialize(System.Xml.XmlWriter, System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Serialize
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 903
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nWrites the XML representation of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> to a predifined \ninstance of <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nIf the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> that should be serialized has not been attatched to an instance of <xref href=\"TimeCockpit.Data.DataModel.Model\" data-throw-if-not-resolved=\"false\"></xref> the method serializes the type information of \nthe underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> as well. During deserialization (see <xref href=\"TimeCockpit.Data.EntityObject.Deserialize(System.String%2cTimeCockpit.Data.EntityObject%2cTimeCockpit.Data.DataModel.Model)\" data-throw-if-not-resolved=\"false\"></xref>) the <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> type is reconstructed and \nthe <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> can be deserialized on its basis.\n</p>\n<p>\nThis method serializes an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> in UTF8 XML\n</p>\n<p>\nThis method serializes properties of a <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> by converting their value into a Base64 string. Therefore, e.g. a <xref href=\"TimeCockpit.Data.DataModel.TextProperty\" data-throw-if-not-resolved=\"false\"></xref>\ncan contain all ASCII character. If the values would not be encoded, control characters e.g. would lead to invalid XML.\n</p>\n"
  example: []
  syntax:
    content: public void Serialize(XmlWriter xmlWriter, bool idsOnly)
    parameters:
    - id: xmlWriter
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref> to write to.
    - id: idsOnly
      type: System.Boolean
      description: Determines whether to serialize the whole <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> in case of a relation or just the identifier of the relations.
    content.vb: Public Sub Serialize(xmlWriter As XmlWriter, idsOnly As Boolean)
  overload: TimeCockpit.Data.EntityObject.Serialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.MarkAsNew(System.Boolean)
  commentId: M:TimeCockpit.Data.EntityObject.MarkAsNew(System.Boolean)
  id: MarkAsNew(System.Boolean)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: MarkAsNew(Boolean)
  nameWithType: EntityObject.MarkAsNew(Boolean)
  fullName: TimeCockpit.Data.EntityObject.MarkAsNew(System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: MarkAsNew
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 912
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nMarks an entity object as new\n"
  example: []
  syntax:
    content: public void MarkAsNew(bool resetMemberStates = true)
    parameters:
    - id: resetMemberStates
      type: System.Boolean
      description: Indicates whether the member states and IssChanged should be adjusted.
    content.vb: Public Sub MarkAsNew(resetMemberStates As Boolean = True)
  overload: TimeCockpit.Data.EntityObject.MarkAsNew*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.MarkAsDeleted
  commentId: M:TimeCockpit.Data.EntityObject.MarkAsDeleted
  id: MarkAsDeleted
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: MarkAsDeleted()
  nameWithType: EntityObject.MarkAsDeleted()
  fullName: TimeCockpit.Data.EntityObject.MarkAsDeleted()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: MarkAsDeleted
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 927
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nMarks the object as deleted.\n"
  example: []
  syntax:
    content: public void MarkAsDeleted()
    content.vb: Public Sub MarkAsDeleted
  overload: TimeCockpit.Data.EntityObject.MarkAsDeleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Evaluate``1(System.String)
  commentId: M:TimeCockpit.Data.EntityObject.Evaluate``1(System.String)
  id: Evaluate``1(System.String)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Evaluate<T>(String)
  nameWithType: EntityObject.Evaluate<T>(String)
  fullName: TimeCockpit.Data.EntityObject.Evaluate<T>(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Evaluate
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 939
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nEvaluates the specified expression and returns a compiled function \n"
  example: []
  syntax:
    content: public T Evaluate<T>(string expression)
    parameters:
    - id: expression
      type: System.String
      description: The expression that should be compiled.
    typeParameters:
    - id: T
      description: The datatype the result of the expression should be casted to
    return:
      type: '{T}'
      description: The result of the expression when applied to the instance of the <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Evaluate(Of T)(expression As String) As T
  overload: TimeCockpit.Data.EntityObject.Evaluate*
  nameWithType.vb: EntityObject.Evaluate(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.EntityObject.Evaluate(Of T)(System.String)
  name.vb: Evaluate(Of T)(String)
- uid: TimeCockpit.Data.EntityObject.Evaluate``1(System.String,TimeCockpit.Data.Environment,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  commentId: M:TimeCockpit.Data.EntityObject.Evaluate``1(System.String,TimeCockpit.Data.Environment,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  id: Evaluate``1(System.String,TimeCockpit.Data.Environment,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Evaluate<T>(String, Environment, IEnumerable<QueryParameter>)
  nameWithType: EntityObject.Evaluate<T>(String, Environment, IEnumerable<QueryParameter>)
  fullName: TimeCockpit.Data.EntityObject.Evaluate<T>(System.String, TimeCockpit.Data.Environment, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Evaluate
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 954
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nEvaluates the specified expression and returns a compiled function\n"
  example: []
  syntax:
    content: public T Evaluate<T>(string expression, Environment environment, IEnumerable<QueryParameter> parameters = null)
    parameters:
    - id: expression
      type: System.String
      description: The expression that should be compiled.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: An instance of <xref href="TimeCockpit.Data.Environment" data-throw-if-not-resolved="false"></xref> that has to be supplied, if the expression referenes Environment variables
    - id: parameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: The parameters that are passed to the expression.
    typeParameters:
    - id: T
      description: The datatype the result of the expression should be casted to
    return:
      type: '{T}'
      description: "\nThe result of the expression when applied to the instance of the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Function Evaluate(Of T)(expression As String, environment As Environment, parameters As IEnumerable(Of QueryParameter) = Nothing) As T
  overload: TimeCockpit.Data.EntityObject.Evaluate*
  nameWithType.vb: EntityObject.Evaluate(Of T)(String, Environment, IEnumerable(Of QueryParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.EntityObject.Evaluate(Of T)(System.String, TimeCockpit.Data.Environment, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter))
  name.vb: Evaluate(Of T)(String, Environment, IEnumerable(Of QueryParameter))
- uid: TimeCockpit.Data.EntityObject.HasPermission(System.String,TimeCockpit.Data.Security.PermissionType)
  commentId: M:TimeCockpit.Data.EntityObject.HasPermission(System.String,TimeCockpit.Data.Security.PermissionType)
  id: HasPermission(System.String,TimeCockpit.Data.Security.PermissionType)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: HasPermission(String, PermissionType)
  nameWithType: EntityObject.HasPermission(String, PermissionType)
  fullName: TimeCockpit.Data.EntityObject.HasPermission(System.String, TimeCockpit.Data.Security.PermissionType)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: HasPermission
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 965
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nChecks if a user has a permission of a certain type.\n"
  example: []
  syntax:
    content: public bool HasPermission(string memberName, PermissionType permissionType)
    parameters:
    - id: memberName
      type: System.String
      description: The name of the property to check for permission.
    - id: permissionType
      type: TimeCockpit.Data.Security.PermissionType
      description: The type of the permission (see also <xref href="TimeCockpit.Data.Security.PermissionType" data-throw-if-not-resolved="false"></xref>)
    return:
      type: System.Boolean
      description: True, if the property has the same permission as permissionIdentifier, else false.
    content.vb: Public Function HasPermission(memberName As String, permissionType As PermissionType) As Boolean
  overload: TimeCockpit.Data.EntityObject.HasPermission*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.CompareTo(System.Object)
  commentId: M:TimeCockpit.Data.EntityObject.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: EntityObject.CompareTo(Object)
  fullName: TimeCockpit.Data.EntityObject.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: CompareTo
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 981
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCompares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. \n"
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'An object to compare with this instance. '
    return:
      type: System.Int32
      description: A value that indicates the relative order of the objects being compared.
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: TimeCockpit.Data.EntityObject.CompareTo*
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Validate(System.String,System.String@,TimeCockpit.Data.DataModel.ValidationRule@,TimeCockpit.Data.Localization.NameLocalizer)
  commentId: M:TimeCockpit.Data.EntityObject.Validate(System.String,System.String@,TimeCockpit.Data.DataModel.ValidationRule@,TimeCockpit.Data.Localization.NameLocalizer)
  id: Validate(System.String,System.String@,TimeCockpit.Data.DataModel.ValidationRule@,TimeCockpit.Data.Localization.NameLocalizer)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Validate(String, out String, out ValidationRule, NameLocalizer)
  nameWithType: EntityObject.Validate(String, out String, out ValidationRule, NameLocalizer)
  fullName: TimeCockpit.Data.EntityObject.Validate(System.String, out System.String, out TimeCockpit.Data.DataModel.ValidationRule, TimeCockpit.Data.Localization.NameLocalizer)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Validate
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1010
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nValidates a property of an instance of <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> in accordance to the <xref href=\"TimeCockpit.Data.DataModel.ValidationRule\" data-throw-if-not-resolved=\"false\"></xref>s defined\nin the underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Validate(string name, out string message, out ValidationRule failingValidationRule, NameLocalizer localizer)
    parameters:
    - id: name
      type: System.String
      description: The name of the property that is to be validated.
    - id: message
      type: System.String
      description: An error message provided by the failing <xref href="TimeCockpit.Data.DataModel.ValidationRule" data-throw-if-not-resolved="false"></xref>.
    - id: failingValidationRule
      type: TimeCockpit.Data.DataModel.ValidationRule
      description: The <xref href="TimeCockpit.Data.DataModel.ValidationRule" data-throw-if-not-resolved="false"></xref> that raised the validation error.
    - id: localizer
      type: TimeCockpit.Data.Localization.NameLocalizer
      description: The <xref href="TimeCockpit.Data.Localization.NameLocalizer" data-throw-if-not-resolved="false"></xref> used to get the correct localizations for properties and validation rules.
    return:
      type: System.Boolean
      description: True if the <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> validates o.k, else false.
    content.vb: Public Function Validate(name As String, ByRef message As String, ByRef failingValidationRule As ValidationRule, localizer As NameLocalizer) As Boolean
  overload: TimeCockpit.Data.EntityObject.Validate*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\nThis method throws a <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> if a <xref href=\"TimeCockpit.Data.DataModel.ValidationRule\" data-throw-if-not-resolved=\"false\"></xref> contains a condition\nthat contains a reference to a relation which is null.\n<example>\n:Iif(Current.Project.ProjectUuid = Current.Task.Project.ProjectUuid, True, False)\n</example>\nIf &apos;Project&apos; in Current.Task.Project is null, the latter example throws a <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is because up to now nullable/notnullable relations do no exists (NOT YET).\n"
  nameWithType.vb: EntityObject.Validate(String, ByRef String, ByRef ValidationRule, NameLocalizer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.EntityObject.Validate(System.String, ByRef System.String, ByRef TimeCockpit.Data.DataModel.ValidationRule, TimeCockpit.Data.Localization.NameLocalizer)
  name.vb: Validate(String, ByRef String, ByRef ValidationRule, NameLocalizer)
- uid: TimeCockpit.Data.EntityObject.GetValidationMessages(TimeCockpit.Data.Localization.NameLocalizer)
  commentId: M:TimeCockpit.Data.EntityObject.GetValidationMessages(TimeCockpit.Data.Localization.NameLocalizer)
  id: GetValidationMessages(TimeCockpit.Data.Localization.NameLocalizer)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: GetValidationMessages(NameLocalizer)
  nameWithType: EntityObject.GetValidationMessages(NameLocalizer)
  fullName: TimeCockpit.Data.EntityObject.GetValidationMessages(TimeCockpit.Data.Localization.NameLocalizer)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: GetValidationMessages
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1090
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the validation messages.\n"
  example: []
  syntax:
    content: public IEnumerable<ValidationMessage> GetValidationMessages(NameLocalizer localizer)
    parameters:
    - id: localizer
      type: TimeCockpit.Data.Localization.NameLocalizer
      description: The localizer to use for localizing validation rules.
    return:
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.ValidationMessage}
      description: Iterates the validation messages.
    content.vb: Public Function GetValidationMessages(localizer As NameLocalizer) As IEnumerable(Of ValidationMessage)
  overload: TimeCockpit.Data.EntityObject.GetValidationMessages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.Validate(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{TimeCockpit.Data.DataModel.ValidationRule}@,TimeCockpit.Data.Localization.NameLocalizer)
  commentId: M:TimeCockpit.Data.EntityObject.Validate(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{TimeCockpit.Data.DataModel.ValidationRule}@,TimeCockpit.Data.Localization.NameLocalizer)
  id: Validate(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{TimeCockpit.Data.DataModel.ValidationRule}@,TimeCockpit.Data.Localization.NameLocalizer)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: Validate(out List<String>, out List<ValidationRule>, NameLocalizer)
  nameWithType: EntityObject.Validate(out List<String>, out List<ValidationRule>, NameLocalizer)
  fullName: TimeCockpit.Data.EntityObject.Validate(out System.Collections.Generic.List<System.String>, out System.Collections.Generic.List<TimeCockpit.Data.DataModel.ValidationRule>, TimeCockpit.Data.Localization.NameLocalizer)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: Validate
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1169
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nValidates all values (properties and relations) of an instance of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  remarks: "\nInternally, this method calls <xref href=\"TimeCockpit.Data.EntityObject.Validate(System.String%2cSystem.String%40%2cTimeCockpit.Data.DataModel.ValidationRule%40%2cTimeCockpit.Data.Localization.NameLocalizer)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool Validate(out List<string> errorMessages, out List<ValidationRule> failingValidationRules, NameLocalizer localizer)
    parameters:
    - id: errorMessages
      type: System.Collections.Generic.List{System.String}
      description: The error messages provided by the failing <xref href="TimeCockpit.Data.DataModel.ValidationRule" data-throw-if-not-resolved="false"></xref>s.
    - id: failingValidationRules
      type: System.Collections.Generic.List{TimeCockpit.Data.DataModel.ValidationRule}
      description: The <xref href="TimeCockpit.Data.DataModel.ValidationRule" data-throw-if-not-resolved="false"></xref>s that raised the validation error
    - id: localizer
      type: TimeCockpit.Data.Localization.NameLocalizer
      description: The <xref href="TimeCockpit.Data.Localization.NameLocalizer" data-throw-if-not-resolved="false"></xref> used to get the correct localizations for properties and validation rules.
    return:
      type: System.Boolean
      description: True if the <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> validates o.k, else false
    content.vb: Public Function Validate(ByRef errorMessages As List(Of String), ByRef failingValidationRules As List(Of ValidationRule), localizer As NameLocalizer) As Boolean
  overload: TimeCockpit.Data.EntityObject.Validate*
  nameWithType.vb: EntityObject.Validate(ByRef List(Of String), ByRef List(Of ValidationRule), NameLocalizer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.EntityObject.Validate(ByRef System.Collections.Generic.List(Of System.String), ByRef System.Collections.Generic.List(Of TimeCockpit.Data.DataModel.ValidationRule), TimeCockpit.Data.Localization.NameLocalizer)
  name.vb: Validate(ByRef List(Of String), ByRef List(Of ValidationRule), NameLocalizer)
- uid: TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object,System.Boolean,System.Boolean)
  commentId: M:TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object,System.Boolean,System.Boolean)
  id: SetMember(System.String,System.Object,System.Boolean,System.Boolean)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: SetMember(String, Object, Boolean, Boolean)
  nameWithType: EntityObject.SetMember(String, Object, Boolean, Boolean)
  fullName: TimeCockpit.Data.EntityObject.SetMember(System.String, System.Object, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: SetMember
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1246
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSets a dynamic member.\n"
  example: []
  syntax:
    content: public void SetMember(string name, object value, bool initialization, bool ignoreDefaultValues = false)
    parameters:
    - id: name
      type: System.String
      description: Name of the member to set.
    - id: value
      type: System.Object
      description: Value to set.
    - id: initialization
      type: System.Boolean
      description: Indicates if SetMember is called during initialization of the object.
    - id: ignoreDefaultValues
      type: System.Boolean
      description: Indicates that no default values are set if this flag is set to true. Default is false
    content.vb: Public Sub SetMember(name As String, value As Object, initialization As Boolean, ignoreDefaultValues As Boolean = False)
  overload: TimeCockpit.Data.EntityObject.SetMember*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.GetChangedMembers
  commentId: M:TimeCockpit.Data.EntityObject.GetChangedMembers
  id: GetChangedMembers
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: GetChangedMembers()
  nameWithType: EntityObject.GetChangedMembers()
  fullName: TimeCockpit.Data.EntityObject.GetChangedMembers()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: GetChangedMembers
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1299
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a list of member names that have the status <xref href=\"TimeCockpit.Data.MemberStatus.Changed\" data-throw-if-not-resolved=\"false\"></xref> \n"
  example: []
  syntax:
    content: public IEnumerable<string> GetChangedMembers()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A list of member name that have the status <xref href="TimeCockpit.Data.MemberStatus.Changed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function GetChangedMembers As IEnumerable(Of String)
  overload: TimeCockpit.Data.EntityObject.GetChangedMembers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.EntityObject.GetPropertyIndex(System.String)
  commentId: M:TimeCockpit.Data.EntityObject.GetPropertyIndex(System.String)
  id: GetPropertyIndex(System.String)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: GetPropertyIndex(String)
  nameWithType: EntityObject.GetPropertyIndex(String)
  fullName: TimeCockpit.Data.EntityObject.GetPropertyIndex(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: GetPropertyIndex
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1928
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets ContentMap index for a name.\n"
  example: []
  syntax:
    content: protected virtual int GetPropertyIndex(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the property to get ContentMap index for.
    return:
      type: System.Int32
      description: The ContentMap index of the Prooperty. Value is -1 if property does not exists in ContentMap
    content.vb: Protected Overridable Function GetPropertyIndex(name As String) As Integer
  overload: TimeCockpit.Data.EntityObject.GetPropertyIndex*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String,System.Object,System.Object)
  commentId: M:TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String,System.Object,System.Object)
  id: OnPropertyChanged(System.String,System.Object,System.Object)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(String, Object, Object)
  nameWithType: EntityObject.OnPropertyChanged(String, Object, Object)
  fullName: TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: OnPropertyChanged
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1945
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvoked whenever the value of any property on this object has been updated. \nThe specific property that changed is reported in the event data. \n"
  remarks: "\nThis method sets a property in the <xref href=\"TimeCockpit.Data.EntityObject.Values\" data-throw-if-not-resolved=\"false\"></xref> collection of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nto MemberStatus.Changed. Each call of the method calls <xref href=\"OnPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> for the \nclr properties &apos;Me&apos;, &apos;IsReadonly&apos;.\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanged(string propertyName, object previousValue, object currentValue)
    parameters:
    - id: propertyName
      type: System.String
      description: Name of the property that has been updated.
    - id: previousValue
      type: System.Object
      description: the previous value of the property.
    - id: currentValue
      type: System.Object
      description: the current value of the property.
    content.vb: Protected Overridable Sub OnPropertyChanged(propertyName As String, previousValue As Object, currentValue As Object)
  overload: TimeCockpit.Data.EntityObject.OnPropertyChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TimeCockpit.Data.EntityObject.OnPropertyChanged(System.Int32,System.Object,System.Object)
  commentId: M:TimeCockpit.Data.EntityObject.OnPropertyChanged(System.Int32,System.Object,System.Object)
  id: OnPropertyChanged(System.Int32,System.Object,System.Object)
  parent: TimeCockpit.Data.EntityObject
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(Int32, Object, Object)
  nameWithType: EntityObject.OnPropertyChanged(Int32, Object, Object)
  fullName: TimeCockpit.Data.EntityObject.OnPropertyChanged(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    id: OnPropertyChanged
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/EntityObject.cs
    startLine: 1973
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvoked whenever the value of any property on this object has been updated. \nThe specific property that changed is reported in the event data. \n"
  remarks: "\nThis method sets a property in the <xref href=\"TimeCockpit.Data.EntityObject.Values\" data-throw-if-not-resolved=\"false\"></xref> collection of an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nto MemberStatus.Changed. Each call of the method calls <xref href=\"OnPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> for the \nclr properties &apos;IsNew&apos;, &apos;IsChanged&apos;, &apos;Me&apos;, &apos;IsReadonly&apos;.\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanged(int index, object previousValue, object currentValue)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the property that has been updated.
    - id: previousValue
      type: System.Object
      description: the previous value of the property.
    - id: currentValue
      type: System.Object
      description: the currentValue of the property.
    content.vb: Protected Overridable Sub OnPropertyChanged(index As Integer, previousValue As Object, currentValue As Object)
  overload: TimeCockpit.Data.EntityObject.OnPropertyChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: TimeCockpit.Data.DataModel.ModelEntityBase
  commentId: T:TimeCockpit.Data.DataModel.ModelEntityBase
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: ModelEntityBase
  nameWithType: ModelEntityBase
  fullName: TimeCockpit.Data.DataModel.ModelEntityBase
- uid: TimeCockpit.Data
  commentId: N:TimeCockpit.Data
  isExternal: false
  name: TimeCockpit.Data
  nameWithType: TimeCockpit.Data
  fullName: TimeCockpit.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TimeCockpit.Data.DynamicObject
  commentId: T:TimeCockpit.Data.DynamicObject
  parent: TimeCockpit.Data
  isExternal: false
  name: DynamicObject
  nameWithType: DynamicObject
  fullName: TimeCockpit.Data.DynamicObject
- uid: System.Dynamic.IDynamicMetaObjectProvider
  commentId: T:System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: true
  name: IDynamicMetaObjectProvider
  nameWithType: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: TimeCockpit.Data.IEntityObject
  commentId: T:TimeCockpit.Data.IEntityObject
  parent: TimeCockpit.Data
  isExternal: false
  name: IEntityObject
  nameWithType: IEntityObject
  fullName: TimeCockpit.Data.IEntityObject
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject.TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(System.String,System.String)
  commentId: M:TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(TimeCockpit.Data.EntityObject,System.String,System.String)
  parent: TimeCockpit.Data.EntityObjectExtensions
  definition: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(TimeCockpit.Data.EntityObject,System.String,System.String)
  name: SetTextMemberTruncated(String, String)
  nameWithType: EntityObjectExtensions.SetTextMemberTruncated(String, String)
  fullName: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(System.String, System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(System.String,System.String)
    name: SetTextMemberTruncated
    nameWithType: EntityObjectExtensions.SetTextMemberTruncated
    fullName: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(System.String,System.String)
    name: SetTextMemberTruncated
    nameWithType: EntityObjectExtensions.SetTextMemberTruncated
    fullName: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: false
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Dynamic
  commentId: N:System.Dynamic
  isExternal: false
  name: System.Dynamic
  nameWithType: System.Dynamic
  fullName: System.Dynamic
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(TimeCockpit.Data.EntityObject,System.String,System.String)
  commentId: M:TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(TimeCockpit.Data.EntityObject,System.String,System.String)
  isExternal: true
  name: SetTextMemberTruncated(EntityObject, String, String)
  nameWithType: EntityObjectExtensions.SetTextMemberTruncated(EntityObject, String, String)
  fullName: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(TimeCockpit.Data.EntityObject, System.String, System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(TimeCockpit.Data.EntityObject,System.String,System.String)
    name: SetTextMemberTruncated
    nameWithType: EntityObjectExtensions.SetTextMemberTruncated
    fullName: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated(TimeCockpit.Data.EntityObject,System.String,System.String)
    name: SetTextMemberTruncated
    nameWithType: EntityObjectExtensions.SetTextMemberTruncated
    fullName: TimeCockpit.Data.EntityObjectExtensions.SetTextMemberTruncated
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObjectExtensions
  commentId: T:TimeCockpit.Data.EntityObjectExtensions
  parent: TimeCockpit.Data
  isExternal: false
  name: EntityObjectExtensions
  nameWithType: EntityObjectExtensions
  fullName: TimeCockpit.Data.EntityObjectExtensions
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  parent: TimeCockpit.Data
  isExternal: false
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
- uid: TimeCockpit.Data.EntityObject.#ctor*
  commentId: Overload:TimeCockpit.Data.EntityObject.#ctor
  isExternal: false
  name: EntityObject
  nameWithType: EntityObject.EntityObject
  fullName: TimeCockpit.Data.EntityObject.EntityObject
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: TimeCockpit.Data.EntityObject.Entity*
  commentId: Overload:TimeCockpit.Data.EntityObject.Entity
  isExternal: false
  name: Entity
  nameWithType: EntityObject.Entity
  fullName: TimeCockpit.Data.EntityObject.Entity
- uid: TimeCockpit.Data.EntityObject.ObjectUuid*
  commentId: Overload:TimeCockpit.Data.EntityObject.ObjectUuid
  isExternal: false
  name: ObjectUuid
  nameWithType: EntityObject.ObjectUuid
  fullName: TimeCockpit.Data.EntityObject.ObjectUuid
- uid: TimeCockpit.Data.IEntityObject.ObjectUuid
  commentId: P:TimeCockpit.Data.IEntityObject.ObjectUuid
  parent: TimeCockpit.Data.IEntityObject
  isExternal: false
  name: ObjectUuid
  nameWithType: IEntityObject.ObjectUuid
  fullName: TimeCockpit.Data.IEntityObject.ObjectUuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TimeCockpit.Data.EntityObject.ModelEntityName*
  commentId: Overload:TimeCockpit.Data.EntityObject.ModelEntityName
  isExternal: false
  name: ModelEntityName
  nameWithType: EntityObject.ModelEntityName
  fullName: TimeCockpit.Data.EntityObject.ModelEntityName
- uid: TimeCockpit.Data.IEntityObject.ModelEntityName
  commentId: P:TimeCockpit.Data.IEntityObject.ModelEntityName
  parent: TimeCockpit.Data.IEntityObject
  isExternal: false
  name: ModelEntityName
  nameWithType: IEntityObject.ModelEntityName
  fullName: TimeCockpit.Data.IEntityObject.ModelEntityName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String,System.Object,System.Object)
  commentId: M:TimeCockpit.Data.EntityObject.OnPropertyChanged(System.String,System.Object,System.Object)
- uid: TimeCockpit.Data.EntityObject.IsNew*
  commentId: Overload:TimeCockpit.Data.EntityObject.IsNew
  isExternal: false
  name: IsNew
  nameWithType: EntityObject.IsNew
  fullName: TimeCockpit.Data.EntityObject.IsNew
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data.EntityObject.IsChanged*
  commentId: Overload:TimeCockpit.Data.EntityObject.IsChanged
  isExternal: false
  name: IsChanged
  nameWithType: EntityObject.IsChanged
  fullName: TimeCockpit.Data.EntityObject.IsChanged
- uid: TimeCockpit.Data.EntityObject.IsDeleted*
  commentId: Overload:TimeCockpit.Data.EntityObject.IsDeleted
  isExternal: false
  name: IsDeleted
  nameWithType: EntityObject.IsDeleted
  fullName: TimeCockpit.Data.EntityObject.IsDeleted
- uid: TimeCockpit.Data.EntityObject.IsCloned*
  commentId: Overload:TimeCockpit.Data.EntityObject.IsCloned
  isExternal: false
  name: IsCloned
  nameWithType: EntityObject.IsCloned
  fullName: TimeCockpit.Data.EntityObject.IsCloned
- uid: TimeCockpit.Data.EntityObject.Me*
  commentId: Overload:TimeCockpit.Data.EntityObject.Me
  isExternal: false
  name: Me
  nameWithType: EntityObject.Me
  fullName: TimeCockpit.Data.EntityObject.Me
- uid: TimeCockpit.Data.EntityObject.RelationIdentifiers*
  commentId: Overload:TimeCockpit.Data.EntityObject.RelationIdentifiers
  isExternal: false
  name: RelationIdentifiers
  nameWithType: EntityObject.RelationIdentifiers
  fullName: TimeCockpit.Data.EntityObject.RelationIdentifiers
- uid: TimeCockpit.Data.RelationIdentifiers
  commentId: T:TimeCockpit.Data.RelationIdentifiers
  parent: TimeCockpit.Data
  isExternal: false
  name: RelationIdentifiers
  nameWithType: RelationIdentifiers
  fullName: TimeCockpit.Data.RelationIdentifiers
- uid: TimeCockpit.Data.EntityObject.CreationVersion*
  commentId: Overload:TimeCockpit.Data.EntityObject.CreationVersion
  isExternal: false
  name: CreationVersion
  nameWithType: EntityObject.CreationVersion
  fullName: TimeCockpit.Data.EntityObject.CreationVersion
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: TimeCockpit.Data.EntityObject.LastUpdateVersion*
  commentId: Overload:TimeCockpit.Data.EntityObject.LastUpdateVersion
  isExternal: false
  name: LastUpdateVersion
  nameWithType: EntityObject.LastUpdateVersion
  fullName: TimeCockpit.Data.EntityObject.LastUpdateVersion
- uid: TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyFunction
  commentId: P:TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyFunction
- uid: TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyExpression
  commentId: P:TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyExpression
  parent: TimeCockpit.Data.DataModel.ModelEntityBase
  isExternal: false
  name: ReadOnlyExpression
  nameWithType: ModelEntityBase.ReadOnlyExpression
  fullName: TimeCockpit.Data.DataModel.ModelEntityBase.ReadOnlyExpression
- uid: TimeCockpit.Data.EntityObject.IsReadOnly*
  commentId: Overload:TimeCockpit.Data.EntityObject.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: EntityObject.IsReadOnly
  fullName: TimeCockpit.Data.EntityObject.IsReadOnly
- uid: TimeCockpit.Data.EntityObject.LocalizedPropertyValues*
  commentId: Overload:TimeCockpit.Data.EntityObject.LocalizedPropertyValues
  isExternal: false
  name: LocalizedPropertyValues
  nameWithType: EntityObject.LocalizedPropertyValues
  fullName: TimeCockpit.Data.EntityObject.LocalizedPropertyValues
- uid: TimeCockpit.Data.Localization.LocalizedTextPropertyCollection
  commentId: T:TimeCockpit.Data.Localization.LocalizedTextPropertyCollection
  parent: TimeCockpit.Data.Localization
  isExternal: false
  name: LocalizedTextPropertyCollection
  nameWithType: LocalizedTextPropertyCollection
  fullName: TimeCockpit.Data.Localization.LocalizedTextPropertyCollection
- uid: TimeCockpit.Data.Localization
  commentId: N:TimeCockpit.Data.Localization
  isExternal: false
  name: TimeCockpit.Data.Localization
  nameWithType: TimeCockpit.Data.Localization
  fullName: TimeCockpit.Data.Localization
- uid: TimeCockpit.Data.EntityObject.Permission*
  commentId: Overload:TimeCockpit.Data.EntityObject.Permission
  isExternal: false
  name: Permission
  nameWithType: EntityObject.Permission
  fullName: TimeCockpit.Data.EntityObject.Permission
- uid: TimeCockpit.Data.Security.PermissionType
  commentId: T:TimeCockpit.Data.Security.PermissionType
  parent: TimeCockpit.Data.Security
  isExternal: false
  name: PermissionType
  nameWithType: PermissionType
  fullName: TimeCockpit.Data.Security.PermissionType
- uid: TimeCockpit.Data.Security
  commentId: N:TimeCockpit.Data.Security
  isExternal: false
  name: TimeCockpit.Data.Security
  nameWithType: TimeCockpit.Data.Security
  fullName: TimeCockpit.Data.Security
- uid: TimeCockpit.Data.EntityObject.Values*
  commentId: Overload:TimeCockpit.Data.EntityObject.Values
  isExternal: false
  name: Values
  nameWithType: EntityObject.Values
  fullName: TimeCockpit.Data.EntityObject.Values
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.EntityObject.States*
  commentId: Overload:TimeCockpit.Data.EntityObject.States
  isExternal: false
  name: States
  nameWithType: EntityObject.States
  fullName: TimeCockpit.Data.EntityObject.States
- uid: TimeCockpit.Data.MemberStatus[]
  name: MemberStatus[]
  nameWithType: MemberStatus[]
  fullName: TimeCockpit.Data.MemberStatus[]
  nameWithType.vb: MemberStatus()
  fullName.vb: TimeCockpit.Data.MemberStatus()
  name.vb: MemberStatus()
  spec.csharp:
  - uid: TimeCockpit.Data.MemberStatus
    name: MemberStatus
    nameWithType: MemberStatus
    fullName: TimeCockpit.Data.MemberStatus
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TimeCockpit.Data.MemberStatus
    name: MemberStatus
    nameWithType: MemberStatus
    fullName: TimeCockpit.Data.MemberStatus
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.EntityObject.GetMember(System.String)
  commentId: M:TimeCockpit.Data.EntityObject.GetMember(System.String)
- uid: TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object)
  commentId: M:TimeCockpit.Data.EntityObject.SetMember(System.String,System.Object)
- uid: TimeCockpit.Data.EntityObject.Item*
  commentId: Overload:TimeCockpit.Data.EntityObject.Item
  isExternal: false
  name: Item
  nameWithType: EntityObject.Item
  fullName: TimeCockpit.Data.EntityObject.Item
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: TimeCockpit.Data.DataModel.Model
  commentId: T:TimeCockpit.Data.DataModel.Model
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: Model
  nameWithType: Model
  fullName: TimeCockpit.Data.DataModel.Model
- uid: TimeCockpit.Data.EntityObject.Serialize
  commentId: M:TimeCockpit.Data.EntityObject.Serialize
- uid: TimeCockpit.Data.DataModel.UnknownEncodingException
  commentId: T:TimeCockpit.Data.DataModel.UnknownEncodingException
  isExternal: false
  name: UnknownEncodingException
  nameWithType: UnknownEncodingException
  fullName: TimeCockpit.Data.DataModel.UnknownEncodingException
- uid: TimeCockpit.Data.EntityObject.Deserialize*
  commentId: Overload:TimeCockpit.Data.EntityObject.Deserialize
  isExternal: false
  name: Deserialize
  nameWithType: EntityObject.Deserialize
  fullName: TimeCockpit.Data.EntityObject.Deserialize
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Dynamic.DynamicMetaObject
  commentId: T:System.Dynamic.DynamicMetaObject
  parent: System.Dynamic
  isExternal: true
  name: DynamicMetaObject
  nameWithType: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: GetMetaObject(Expression)
  nameWithType: DynamicObject.GetMetaObject(Expression)
  fullName: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: DynamicObject.GetMetaObject
    fullName: TimeCockpit.Data.DynamicObject.GetMetaObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: DynamicObject.GetMetaObject
    fullName: TimeCockpit.Data.DynamicObject.GetMetaObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject.GetMetaObject*
  commentId: Overload:TimeCockpit.Data.EntityObject.GetMetaObject
  isExternal: false
  name: GetMetaObject
  nameWithType: EntityObject.GetMetaObject
  fullName: TimeCockpit.Data.EntityObject.GetMetaObject
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject.ToString*
  commentId: Overload:TimeCockpit.Data.EntityObject.ToString
  isExternal: false
  name: ToString
  nameWithType: EntityObject.ToString
  fullName: TimeCockpit.Data.EntityObject.ToString
- uid: TimeCockpit.Data.EntityObject.Clone*
  commentId: Overload:TimeCockpit.Data.EntityObject.Clone
  isExternal: false
  name: Clone
  nameWithType: EntityObject.Clone
  fullName: TimeCockpit.Data.EntityObject.Clone
- uid: TimeCockpit.Data.Environment
  commentId: T:TimeCockpit.Data.Environment
  parent: TimeCockpit.Data
  isExternal: false
  name: Environment
  nameWithType: Environment
  fullName: TimeCockpit.Data.Environment
- uid: TimeCockpit.Data.EntityObject.CopyTo*
  commentId: Overload:TimeCockpit.Data.EntityObject.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: EntityObject.CopyTo
  fullName: TimeCockpit.Data.EntityObject.CopyTo
- uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  commentId: M:TimeCockpit.Data.DynamicObject.GetMember(System.String)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: GetMember(String)
  nameWithType: DynamicObject.GetMember(String)
  fullName: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
    name: GetMember
    nameWithType: DynamicObject.GetMember
    fullName: TimeCockpit.Data.DynamicObject.GetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
    name: GetMember
    nameWithType: DynamicObject.GetMember
    fullName: TimeCockpit.Data.DynamicObject.GetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject.GetMember*
  commentId: Overload:TimeCockpit.Data.EntityObject.GetMember
  isExternal: false
  name: GetMember
  nameWithType: EntityObject.GetMember
  fullName: TimeCockpit.Data.EntityObject.GetMember
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeCockpit.Data.EntityObject.GetActualMember*
  commentId: Overload:TimeCockpit.Data.EntityObject.GetActualMember
  isExternal: false
  name: GetActualMember
  nameWithType: EntityObject.GetActualMember
  fullName: TimeCockpit.Data.EntityObject.GetActualMember
- uid: TimeCockpit.Data.DataModel.CalculatedProperty
  commentId: T:TimeCockpit.Data.DataModel.CalculatedProperty
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: CalculatedProperty
  nameWithType: CalculatedProperty
  fullName: TimeCockpit.Data.DataModel.CalculatedProperty
- uid: TimeCockpit.Data.EntityObject.CalculateMember*
  commentId: Overload:TimeCockpit.Data.EntityObject.CalculateMember
  isExternal: false
  name: CalculateMember
  nameWithType: EntityObject.CalculateMember
  fullName: TimeCockpit.Data.EntityObject.CalculateMember
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
- uid: TimeCockpit.Data.EntityObject.SetMember*
  commentId: Overload:TimeCockpit.Data.EntityObject.SetMember
  isExternal: false
  name: SetMember
  nameWithType: EntityObject.SetMember
  fullName: TimeCockpit.Data.EntityObject.SetMember
- uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  commentId: M:TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: SetMember(String, Object)
  nameWithType: DynamicObject.SetMember(String, Object)
  fullName: TimeCockpit.Data.DynamicObject.SetMember(System.String, System.Object)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
    name: SetMember
    nameWithType: DynamicObject.SetMember
    fullName: TimeCockpit.Data.DynamicObject.SetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
    name: SetMember
    nameWithType: DynamicObject.SetMember
    fullName: TimeCockpit.Data.DynamicObject.SetMember
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: TimeCockpit.Data.EntityObject.Serialize*
  commentId: Overload:TimeCockpit.Data.EntityObject.Serialize
  isExternal: false
  name: Serialize
  nameWithType: EntityObject.Serialize
  fullName: TimeCockpit.Data.EntityObject.Serialize
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: TimeCockpit.Data.EntityObject.Deserialize(System.String,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
  commentId: M:TimeCockpit.Data.EntityObject.Deserialize(System.String,TimeCockpit.Data.EntityObject,TimeCockpit.Data.DataModel.Model)
- uid: TimeCockpit.Data.DataModel.TextProperty
  commentId: T:TimeCockpit.Data.DataModel.TextProperty
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: TextProperty
  nameWithType: TextProperty
  fullName: TimeCockpit.Data.DataModel.TextProperty
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: TimeCockpit.Data.EntityObject.MarkAsNew*
  commentId: Overload:TimeCockpit.Data.EntityObject.MarkAsNew
  isExternal: false
  name: MarkAsNew
  nameWithType: EntityObject.MarkAsNew
  fullName: TimeCockpit.Data.EntityObject.MarkAsNew
- uid: TimeCockpit.Data.EntityObject.MarkAsDeleted*
  commentId: Overload:TimeCockpit.Data.EntityObject.MarkAsDeleted
  isExternal: false
  name: MarkAsDeleted
  nameWithType: EntityObject.MarkAsDeleted
  fullName: TimeCockpit.Data.EntityObject.MarkAsDeleted
- uid: TimeCockpit.Data.EntityObject.Evaluate*
  commentId: Overload:TimeCockpit.Data.EntityObject.Evaluate
  isExternal: false
  name: Evaluate
  nameWithType: EntityObject.Evaluate
  fullName: TimeCockpit.Data.EntityObject.Evaluate
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
  commentId: T:System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<QueryParameter>
  nameWithType: IEnumerable<QueryParameter>
  fullName: System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>
  nameWithType.vb: IEnumerable(Of QueryParameter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter)
  name.vb: IEnumerable(Of QueryParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.EntityObject.HasPermission*
  commentId: Overload:TimeCockpit.Data.EntityObject.HasPermission
  isExternal: false
  name: HasPermission
  nameWithType: EntityObject.HasPermission
  fullName: TimeCockpit.Data.EntityObject.HasPermission
- uid: TimeCockpit.Data.EntityObject.CompareTo*
  commentId: Overload:TimeCockpit.Data.EntityObject.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: EntityObject.CompareTo
  fullName: TimeCockpit.Data.EntityObject.CompareTo
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.ValidationRule
  commentId: T:TimeCockpit.Data.DataModel.ValidationRule
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: ValidationRule
  nameWithType: ValidationRule
  fullName: TimeCockpit.Data.DataModel.ValidationRule
- uid: TimeCockpit.Data.Localization.NameLocalizer
  commentId: T:TimeCockpit.Data.Localization.NameLocalizer
  parent: TimeCockpit.Data.Localization
  isExternal: false
  name: NameLocalizer
  nameWithType: NameLocalizer
  fullName: TimeCockpit.Data.Localization.NameLocalizer
- uid: TimeCockpit.Data.EntityObject.Validate*
  commentId: Overload:TimeCockpit.Data.EntityObject.Validate
  isExternal: false
  name: Validate
  nameWithType: EntityObject.Validate
  fullName: TimeCockpit.Data.EntityObject.Validate
- uid: TimeCockpit.Data.EntityObject.GetValidationMessages*
  commentId: Overload:TimeCockpit.Data.EntityObject.GetValidationMessages
  isExternal: false
  name: GetValidationMessages
  nameWithType: EntityObject.GetValidationMessages
  fullName: TimeCockpit.Data.EntityObject.GetValidationMessages
- uid: System.Collections.Generic.IEnumerable{TimeCockpit.Data.ValidationMessage}
  commentId: T:System.Collections.Generic.IEnumerable{TimeCockpit.Data.ValidationMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ValidationMessage>
  nameWithType: IEnumerable<ValidationMessage>
  fullName: System.Collections.Generic.IEnumerable<TimeCockpit.Data.ValidationMessage>
  nameWithType.vb: IEnumerable(Of ValidationMessage)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.ValidationMessage)
  name.vb: IEnumerable(Of ValidationMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.ValidationMessage
    name: ValidationMessage
    nameWithType: ValidationMessage
    fullName: TimeCockpit.Data.ValidationMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.ValidationMessage
    name: ValidationMessage
    nameWithType: ValidationMessage
    fullName: TimeCockpit.Data.ValidationMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject.Validate(System.String,System.String@,TimeCockpit.Data.DataModel.ValidationRule@,TimeCockpit.Data.Localization.NameLocalizer)
  commentId: M:TimeCockpit.Data.EntityObject.Validate(System.String,System.String@,TimeCockpit.Data.DataModel.ValidationRule@,TimeCockpit.Data.Localization.NameLocalizer)
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TimeCockpit.Data.DataModel.ValidationRule}
  commentId: T:System.Collections.Generic.List{TimeCockpit.Data.DataModel.ValidationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ValidationRule>
  nameWithType: List<ValidationRule>
  fullName: System.Collections.Generic.List<TimeCockpit.Data.DataModel.ValidationRule>
  nameWithType.vb: List(Of ValidationRule)
  fullName.vb: System.Collections.Generic.List(Of TimeCockpit.Data.DataModel.ValidationRule)
  name.vb: List(Of ValidationRule)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.DataModel.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: TimeCockpit.Data.DataModel.ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.DataModel.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: TimeCockpit.Data.DataModel.ValidationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.MemberStatus.Changed
  commentId: F:TimeCockpit.Data.MemberStatus.Changed
- uid: TimeCockpit.Data.EntityObject.GetChangedMembers*
  commentId: Overload:TimeCockpit.Data.EntityObject.GetChangedMembers
  isExternal: false
  name: GetChangedMembers
  nameWithType: EntityObject.GetChangedMembers
  fullName: TimeCockpit.Data.EntityObject.GetChangedMembers
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject.GetPropertyIndex*
  commentId: Overload:TimeCockpit.Data.EntityObject.GetPropertyIndex
  isExternal: false
  name: GetPropertyIndex
  nameWithType: EntityObject.GetPropertyIndex
  fullName: TimeCockpit.Data.EntityObject.GetPropertyIndex
- uid: TimeCockpit.Data.EntityObject.Values
  commentId: P:TimeCockpit.Data.EntityObject.Values
- uid: OnPropertyChanged
  commentId: M:OnPropertyChanged
- uid: TimeCockpit.Data.EntityObject.OnPropertyChanged*
  commentId: Overload:TimeCockpit.Data.EntityObject.OnPropertyChanged
  isExternal: false
  name: OnPropertyChanged
  nameWithType: EntityObject.OnPropertyChanged
  fullName: TimeCockpit.Data.EntityObject.OnPropertyChanged
