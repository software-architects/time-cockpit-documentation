### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Database.LocalBlobStorage
  commentId: T:TimeCockpit.Data.Database.LocalBlobStorage
  id: LocalBlobStorage
  parent: TimeCockpit.Data.Database
  children:
  - TimeCockpit.Data.Database.LocalBlobStorage.#ctor(System.String,System.Guid)
  - TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath
  - TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
  - TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
  - TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer(System.String)
  - TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob(System.String,System.String,System.String)
  - TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent(System.String,System.String,System.String)
  - TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
  - TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer
  - TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer
  langs:
  - csharp
  - vb
  name: LocalBlobStorage
  nameWithType: LocalBlobStorage
  fullName: TimeCockpit.Data.Database.LocalBlobStorage
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: LocalBlobStorage
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 19
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nImplements access methods to local blob storage\n"
  example: []
  syntax:
    content: 'public sealed class LocalBlobStorage : BlobStorage'
    content.vb: >-
      Public NotInheritable Class LocalBlobStorage
          Inherits BlobStorage
  inheritance:
  - System.Object
  - TimeCockpit.Data.Database.BlobStorage
  inheritedMembers:
  - TimeCockpit.Data.Database.BlobStorage.BlobEncryptionKey
  - TimeCockpit.Data.Database.BlobStorage.CurrentContainer
  - TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.Guid,System.Guid,System.Guid,System.Byte[])
  - TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.Guid,System.Guid,System.Guid,System.Byte[])
  - TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.Guid,System.Guid,System.Guid)
  - TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.Guid,System.Guid,System.Guid)
  - TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.Guid,System.Guid,System.Guid)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: TimeCockpit.Data.Database.LocalBlobStorage.#ctor(System.String,System.Guid)
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.#ctor(System.String,System.Guid)
  id: '#ctor(System.String,System.Guid)'
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: LocalBlobStorage(String, Guid)
  nameWithType: LocalBlobStorage.LocalBlobStorage(String, Guid)
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.LocalBlobStorage(System.String, System.Guid)
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 26
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nInitializes a new instance of the LocalBlobStorage class\n"
  example: []
  syntax:
    content: public LocalBlobStorage(string blobStoragePath, Guid clientReplicaId)
    parameters:
    - id: blobStoragePath
      type: System.String
      description: Base path under which blobs should be stored
    - id: clientReplicaId
      type: System.Guid
      description: Replica id of the client to which this blob storage belongs
    content.vb: Public Sub New(blobStoragePath As String, clientReplicaId As Guid)
  overload: TimeCockpit.Data.Database.LocalBlobStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath
  commentId: P:TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath
  id: BlobStoragePath
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: BlobStoragePath
  nameWithType: LocalBlobStorage.BlobStoragePath
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: BlobStoragePath
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 46
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nGets the base path under which blobs are stored\n"
  example: []
  syntax:
    content: public string BlobStoragePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BlobStoragePath As String
  overload: TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer
  id: OpenOrCreateCurrentContainer
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: OpenOrCreateCurrentContainer()
  nameWithType: LocalBlobStorage.OpenOrCreateCurrentContainer()
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: OpenOrCreateCurrentContainer
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 51
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nCreates the tenant&apos;s container if it does not already exist.\n"
  example: []
  syntax:
    content: public override void OpenOrCreateCurrentContainer()
    content.vb: Public Overrides Sub OpenOrCreateCurrentContainer
  overridden: TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer
  overload: TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer
  id: OpenCurrentContainer
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: OpenCurrentContainer()
  nameWithType: LocalBlobStorage.OpenCurrentContainer()
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer()
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: OpenCurrentContainer
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 78
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nOpens the tenant&apos;s container which already exist.\n"
  remarks: "\nThis methods is used for the share access key authenticatio method, where the tenant needs to be \ncreated via a key and name pair. A data context which provides name and the shared access signature\nis nt allowed to create a tenant\n"
  example: []
  syntax:
    content: public override void OpenCurrentContainer()
    content.vb: Public Overrides Sub OpenCurrentContainer
  overridden: TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer
  overload: TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer(System.String)
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer(System.String)
  id: CreateContainer(System.String)
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: CreateContainer(String)
  nameWithType: LocalBlobStorage.CreateContainer(String)
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: CreateContainer
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 87
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nCreates a container in the blob storage\n"
  example: []
  syntax:
    content: protected override void CreateContainer(string containerName)
    parameters:
    - id: containerName
      type: System.String
      description: Name of the container
    content.vb: Protected Overrides Sub CreateContainer(containerName As String)
  overridden: TimeCockpit.Data.Database.BlobStorage.CreateContainer(System.String)
  overload: TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
  id: CreateBlob(System.String,System.String,System.String,System.Byte[])
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: CreateBlob(String, String, String, Byte[])
  nameWithType: LocalBlobStorage.CreateBlob(String, String, String, Byte[])
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob(System.String, System.String, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: CreateBlob
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 100
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nCreates or replaces a blob in the blob storage\n"
  example: []
  syntax:
    content: protected override void CreateBlob(string containerName, string blobName, string categoryName, byte[] blobContent)
    parameters:
    - id: containerName
      type: System.String
      description: Name of the container
    - id: blobName
      type: System.String
      description: Name of the blob
    - id: categoryName
      type: System.String
      description: Name of the category to which the blob belongs
    - id: blobContent
      type: System.Byte[]
      description: Content of the blob
    content.vb: Protected Overrides Sub CreateBlob(containerName As String, blobName As String, categoryName As String, blobContent As Byte())
  overridden: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
  overload: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob*
  nameWithType.vb: LocalBlobStorage.CreateBlob(String, String, String, Byte())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob(System.String, System.String, System.String, System.Byte())
  name.vb: CreateBlob(String, String, String, Byte())
- uid: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
  id: CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: CreateBlobAsync(String, String, String, Byte[])
  nameWithType: LocalBlobStorage.CreateBlobAsync(String, String, String, Byte[])
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync(System.String, System.String, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: CreateBlobAsync
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 129
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nCreates or replaces a blob in the blob storage\n"
  example: []
  syntax:
    content: protected override Task CreateBlobAsync(string containerName, string blobName, string categoryName, byte[] blobContent)
    parameters:
    - id: containerName
      type: System.String
      description: Name of the container
    - id: blobName
      type: System.String
      description: Name of the blob
    - id: categoryName
      type: System.String
      description: Name of the category to which the blob belongs
    - id: blobContent
      type: System.Byte[]
      description: Content of the blob
    return:
      type: System.Threading.Tasks.Task
      description: The task representing the operation.
    content.vb: Protected Overrides Function CreateBlobAsync(containerName As String, blobName As String, categoryName As String, blobContent As Byte()) As Task
  overridden: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
  overload: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync*
  nameWithType.vb: LocalBlobStorage.CreateBlobAsync(String, String, String, Byte())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync(System.String, System.String, System.String, System.Byte())
  name.vb: CreateBlobAsync(String, String, String, Byte())
- uid: TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob(System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob(System.String,System.String,System.String)
  id: DeleteBlob(System.String,System.String,System.String)
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: DeleteBlob(String, String, String)
  nameWithType: LocalBlobStorage.DeleteBlob(String, String, String)
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: DeleteBlob
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 166
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nDelets a blob in the blob storage\n"
  example: []
  syntax:
    content: protected override void DeleteBlob(string containerName, string blobName, string categoryName)
    parameters:
    - id: containerName
      type: System.String
      description: Name of the container
    - id: blobName
      type: System.String
      description: Name of the blob
    - id: categoryName
      type: System.String
      description: Name of the category to which the blob belongs
    content.vb: Protected Overrides Sub DeleteBlob(containerName As String, blobName As String, categoryName As String)
  overridden: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.String,System.String,System.String)
  overload: TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent(System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent(System.String,System.String,System.String)
  id: GetBlobContent(System.String,System.String,System.String)
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: GetBlobContent(String, String, String)
  nameWithType: LocalBlobStorage.GetBlobContent(String, String, String)
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: GetBlobContent
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 186
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nGets the content of a blob in the blob storage\n"
  example: []
  syntax:
    content: protected override byte[] GetBlobContent(string containerName, string blobName, string categoryName)
    parameters:
    - id: containerName
      type: System.String
      description: Name of the container
    - id: blobName
      type: System.String
      description: Name of the blob
    - id: categoryName
      type: System.String
      description: Name of the category to which the blob belongs
    return:
      type: System.Byte[]
      description: Content of the blob
    content.vb: Protected Overrides Function GetBlobContent(containerName As String, blobName As String, categoryName As String) As Byte()
  overridden: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.String,System.String,System.String)
  overload: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
  id: GetBlobContentAsync(System.String,System.String,System.String)
  parent: TimeCockpit.Data.Database.LocalBlobStorage
  langs:
  - csharp
  - vb
  name: GetBlobContentAsync(String, String, String)
  nameWithType: LocalBlobStorage.GetBlobContentAsync(String, String, String)
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    id: GetBlobContentAsync
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Database/LocalBlobStorage.cs
    startLine: 207
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Database
  summary: "\nGets the content of a blob in the blob storage asynchronously.\n"
  example: []
  syntax:
    content: protected override Task<byte[]> GetBlobContentAsync(string containerName, string blobName, string categoryName)
    parameters:
    - id: containerName
      type: System.String
      description: Name of the container
    - id: blobName
      type: System.String
      description: Name of the blob
    - id: categoryName
      type: System.String
      description: Name of the category to which the blob belongs
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: Returns the content of the blob.
    content.vb: Protected Overrides Function GetBlobContentAsync(containerName As String, blobName As String, categoryName As String) As Task(Of Byte())
  overridden: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
  overload: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: TimeCockpit.Data.Database
  commentId: N:TimeCockpit.Data.Database
  isExternal: false
  name: TimeCockpit.Data.Database
  nameWithType: TimeCockpit.Data.Database
  fullName: TimeCockpit.Data.Database
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TimeCockpit.Data.Database.BlobStorage
  commentId: T:TimeCockpit.Data.Database.BlobStorage
  parent: TimeCockpit.Data.Database
  isExternal: false
  name: BlobStorage
  nameWithType: BlobStorage
  fullName: TimeCockpit.Data.Database.BlobStorage
- uid: TimeCockpit.Data.Database.BlobStorage.BlobEncryptionKey
  commentId: P:TimeCockpit.Data.Database.BlobStorage.BlobEncryptionKey
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: false
  name: BlobEncryptionKey
  nameWithType: BlobStorage.BlobEncryptionKey
  fullName: TimeCockpit.Data.Database.BlobStorage.BlobEncryptionKey
- uid: TimeCockpit.Data.Database.BlobStorage.CurrentContainer
  commentId: P:TimeCockpit.Data.Database.BlobStorage.CurrentContainer
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: false
  name: CurrentContainer
  nameWithType: BlobStorage.CurrentContainer
  fullName: TimeCockpit.Data.Database.BlobStorage.CurrentContainer
- uid: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.Guid,System.Guid,System.Guid,System.Byte[])
  commentId: M:TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.Guid,System.Guid,System.Guid,System.Byte[])
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: CreateBlob(Guid, Guid, Guid, Byte[])
  nameWithType: BlobStorage.CreateBlob(Guid, Guid, Guid, Byte[])
  fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.Guid, System.Guid, System.Guid, System.Byte[])
  nameWithType.vb: BlobStorage.CreateBlob(Guid, Guid, Guid, Byte())
  fullName.vb: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.Guid, System.Guid, System.Guid, System.Byte())
  name.vb: CreateBlob(Guid, Guid, Guid, Byte())
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.Guid,System.Guid,System.Guid,System.Byte[])
    name: CreateBlob
    nameWithType: BlobStorage.CreateBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.Guid,System.Guid,System.Guid,System.Byte[])
    name: CreateBlob
    nameWithType: BlobStorage.CreateBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.Guid,System.Guid,System.Guid,System.Byte[])
  commentId: M:TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.Guid,System.Guid,System.Guid,System.Byte[])
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: CreateBlobAsync(Guid, Guid, Guid, Byte[])
  nameWithType: BlobStorage.CreateBlobAsync(Guid, Guid, Guid, Byte[])
  fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.Guid, System.Guid, System.Guid, System.Byte[])
  nameWithType.vb: BlobStorage.CreateBlobAsync(Guid, Guid, Guid, Byte())
  fullName.vb: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.Guid, System.Guid, System.Guid, System.Byte())
  name.vb: CreateBlobAsync(Guid, Guid, Guid, Byte())
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.Guid,System.Guid,System.Guid,System.Byte[])
    name: CreateBlobAsync
    nameWithType: BlobStorage.CreateBlobAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.Guid,System.Guid,System.Guid,System.Byte[])
    name: CreateBlobAsync
    nameWithType: BlobStorage.CreateBlobAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.Guid,System.Guid,System.Guid)
  commentId: M:TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.Guid,System.Guid,System.Guid)
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: GetBlobContent(Guid, Guid, Guid)
  nameWithType: BlobStorage.GetBlobContent(Guid, Guid, Guid)
  fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.Guid, System.Guid, System.Guid)
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.Guid,System.Guid,System.Guid)
    name: GetBlobContent
    nameWithType: BlobStorage.GetBlobContent
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.Guid,System.Guid,System.Guid)
    name: GetBlobContent
    nameWithType: BlobStorage.GetBlobContent
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.Guid,System.Guid,System.Guid)
  commentId: M:TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.Guid,System.Guid,System.Guid)
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: GetBlobContentAsync(Guid, Guid, Guid)
  nameWithType: BlobStorage.GetBlobContentAsync(Guid, Guid, Guid)
  fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.Guid, System.Guid, System.Guid)
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.Guid,System.Guid,System.Guid)
    name: GetBlobContentAsync
    nameWithType: BlobStorage.GetBlobContentAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.Guid,System.Guid,System.Guid)
    name: GetBlobContentAsync
    nameWithType: BlobStorage.GetBlobContentAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.Guid,System.Guid,System.Guid)
  commentId: M:TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.Guid,System.Guid,System.Guid)
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: DeleteBlob(Guid, Guid, Guid)
  nameWithType: BlobStorage.DeleteBlob(Guid, Guid, Guid)
  fullName: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.Guid, System.Guid, System.Guid)
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.Guid,System.Guid,System.Guid)
    name: DeleteBlob
    nameWithType: BlobStorage.DeleteBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.DeleteBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.Guid,System.Guid,System.Guid)
    name: DeleteBlob
    nameWithType: BlobStorage.DeleteBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.DeleteBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Database.LocalBlobStorage.#ctor*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.#ctor
  isExternal: false
  name: LocalBlobStorage
  nameWithType: LocalBlobStorage.LocalBlobStorage
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.LocalBlobStorage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath
  isExternal: false
  name: BlobStoragePath
  nameWithType: LocalBlobStorage.BlobStoragePath
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.BlobStoragePath
- uid: TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer
  commentId: M:TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: false
  name: OpenOrCreateCurrentContainer()
  nameWithType: BlobStorage.OpenOrCreateCurrentContainer()
  fullName: TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer()
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer
    name: OpenOrCreateCurrentContainer
    nameWithType: BlobStorage.OpenOrCreateCurrentContainer
    fullName: TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer
    name: OpenOrCreateCurrentContainer
    nameWithType: BlobStorage.OpenOrCreateCurrentContainer
    fullName: TimeCockpit.Data.Database.BlobStorage.OpenOrCreateCurrentContainer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer
  isExternal: false
  name: OpenOrCreateCurrentContainer
  nameWithType: LocalBlobStorage.OpenOrCreateCurrentContainer
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.OpenOrCreateCurrentContainer
- uid: TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer
  commentId: M:TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: false
  name: OpenCurrentContainer()
  nameWithType: BlobStorage.OpenCurrentContainer()
  fullName: TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer()
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer
    name: OpenCurrentContainer
    nameWithType: BlobStorage.OpenCurrentContainer
    fullName: TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer
    name: OpenCurrentContainer
    nameWithType: BlobStorage.OpenCurrentContainer
    fullName: TimeCockpit.Data.Database.BlobStorage.OpenCurrentContainer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer
  isExternal: false
  name: OpenCurrentContainer
  nameWithType: LocalBlobStorage.OpenCurrentContainer
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.OpenCurrentContainer
- uid: TimeCockpit.Data.Database.BlobStorage.CreateContainer(System.String)
  commentId: M:TimeCockpit.Data.Database.BlobStorage.CreateContainer(System.String)
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: CreateContainer(String)
  nameWithType: BlobStorage.CreateContainer(String)
  fullName: TimeCockpit.Data.Database.BlobStorage.CreateContainer(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateContainer(System.String)
    name: CreateContainer
    nameWithType: BlobStorage.CreateContainer
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateContainer(System.String)
    name: CreateContainer
    nameWithType: BlobStorage.CreateContainer
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer
  isExternal: false
  name: CreateContainer
  nameWithType: LocalBlobStorage.CreateContainer
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.CreateContainer
- uid: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
  commentId: M:TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: CreateBlob(String, String, String, Byte[])
  nameWithType: BlobStorage.CreateBlob(String, String, String, Byte[])
  fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.String, System.String, System.String, System.Byte[])
  nameWithType.vb: BlobStorage.CreateBlob(String, String, String, Byte())
  fullName.vb: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.String, System.String, System.String, System.Byte())
  name.vb: CreateBlob(String, String, String, Byte())
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
    name: CreateBlob
    nameWithType: BlobStorage.CreateBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlob(System.String,System.String,System.String,System.Byte[])
    name: CreateBlob
    nameWithType: BlobStorage.CreateBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob
  isExternal: false
  name: CreateBlob
  nameWithType: LocalBlobStorage.CreateBlob
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlob
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
  commentId: M:TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: CreateBlobAsync(String, String, String, Byte[])
  nameWithType: BlobStorage.CreateBlobAsync(String, String, String, Byte[])
  fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.String, System.String, System.String, System.Byte[])
  nameWithType.vb: BlobStorage.CreateBlobAsync(String, String, String, Byte())
  fullName.vb: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.String, System.String, System.String, System.Byte())
  name.vb: CreateBlobAsync(String, String, String, Byte())
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
    name: CreateBlobAsync
    nameWithType: BlobStorage.CreateBlobAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync(System.String,System.String,System.String,System.Byte[])
    name: CreateBlobAsync
    nameWithType: BlobStorage.CreateBlobAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.CreateBlobAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync
  isExternal: false
  name: CreateBlobAsync
  nameWithType: LocalBlobStorage.CreateBlobAsync
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.CreateBlobAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.String,System.String,System.String)
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: DeleteBlob(String, String, String)
  nameWithType: BlobStorage.DeleteBlob(String, String, String)
  fullName: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.String, System.String, System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.String,System.String,System.String)
    name: DeleteBlob
    nameWithType: BlobStorage.DeleteBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.DeleteBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.DeleteBlob(System.String,System.String,System.String)
    name: DeleteBlob
    nameWithType: BlobStorage.DeleteBlob
    fullName: TimeCockpit.Data.Database.BlobStorage.DeleteBlob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob
  isExternal: false
  name: DeleteBlob
  nameWithType: LocalBlobStorage.DeleteBlob
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.DeleteBlob
- uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.String,System.String,System.String)
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: GetBlobContent(String, String, String)
  nameWithType: BlobStorage.GetBlobContent(String, String, String)
  fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.String, System.String, System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.String,System.String,System.String)
    name: GetBlobContent
    nameWithType: BlobStorage.GetBlobContent
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContent(System.String,System.String,System.String)
    name: GetBlobContent
    nameWithType: BlobStorage.GetBlobContent
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent
  isExternal: false
  name: GetBlobContent
  nameWithType: LocalBlobStorage.GetBlobContent
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContent
- uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
  parent: TimeCockpit.Data.Database.BlobStorage
  isExternal: true
  name: GetBlobContentAsync(String, String, String)
  nameWithType: BlobStorage.GetBlobContentAsync(String, String, String)
  fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.String, System.String, System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
    name: GetBlobContentAsync
    nameWithType: BlobStorage.GetBlobContentAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync(System.String,System.String,System.String)
    name: GetBlobContentAsync
    nameWithType: BlobStorage.GetBlobContentAsync
    fullName: TimeCockpit.Data.Database.BlobStorage.GetBlobContentAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync*
  commentId: Overload:TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync
  isExternal: false
  name: GetBlobContentAsync
  nameWithType: LocalBlobStorage.GetBlobContentAsync
  fullName: TimeCockpit.Data.Database.LocalBlobStorage.GetBlobContentAsync
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  nameWithType.vb: Task(Of Byte())
  fullName.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
