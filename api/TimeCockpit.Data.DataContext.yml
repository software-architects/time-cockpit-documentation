### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.DataContext
  commentId: T:TimeCockpit.Data.DataContext
  id: DataContext
  parent: TimeCockpit.Data
  children:
  - TimeCockpit.Data.DataContext.Create(System.String,System.String)
  - TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String)
  - TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String,System.String)
  - TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String,TimeCockpit.Data.DataContextSettings,System.String)
  - TimeCockpit.Data.DataContext.Create(TimeCockpit.Data.DataContextSettings)
  - TimeCockpit.Data.DataContext.DataContextType
  - TimeCockpit.Data.DataContext.DbClient
  - TimeCockpit.Data.DataContext.DeleteObject(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.DisableAuditTrail
  - TimeCockpit.Data.DataContext.DisableSystemMode
  - TimeCockpit.Data.DataContext.Dispose
  - TimeCockpit.Data.DataContext.EnableAuditTrail
  - TimeCockpit.Data.DataContext.EnableSystemMode
  - TimeCockpit.Data.DataContext.EnforceRefreshModel
  - TimeCockpit.Data.DataContext.Environment
  - TimeCockpit.Data.DataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  - TimeCockpit.Data.DataContext.GetMember(System.String)
  - TimeCockpit.Data.DataContext.GetMetaObject(System.Linq.Expressions.Expression)
  - TimeCockpit.Data.DataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  - TimeCockpit.Data.DataContext.GetScriptResultByListName(System.String,System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},System.String)
  - TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName(System.String,System.String)
  - TimeCockpit.Data.DataContext.GetSettings(WebManagementService.ConnectionInformation,TimeCockpit.Data.DataContextSettings)
  - TimeCockpit.Data.DataContext.GetVersionInformation(System.String,System.String,System.String,System.String)
  - TimeCockpit.Data.DataContext.GetWritableModel
  - TimeCockpit.Data.DataContext.InitializeLocalizedTextValues(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.IsDirty(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.Localizer
  - TimeCockpit.Data.DataContext.Model
  - TimeCockpit.Data.DataContext.ReadLocalizedTextValues(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.RefreshEnvironment
  - TimeCockpit.Data.DataContext.RefreshModel
  - TimeCockpit.Data.DataContext.SaveChanges(TimeCockpit.Data.ChangeTracker)
  - TimeCockpit.Data.DataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  - TimeCockpit.Data.DataContext.SaveModel(TimeCockpit.Data.DataModel.Model)
  - TimeCockpit.Data.DataContext.SaveModelIfValid(TimeCockpit.Data.DataModel.Model)
  - TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.SaveSettings)
  - TimeCockpit.Data.DataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.Select(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.Select(System.String,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  - TimeCockpit.Data.DataContext.SelectSingle(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingle(System.String,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingleAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingleAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject)
  - TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  - TimeCockpit.Data.DataContext.SelectSingleWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  - TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  - TimeCockpit.Data.DataContext.SelectTop(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectTop(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectTopAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectTopAsync(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  - TimeCockpit.Data.DataContext.SelectWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  - TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Localizer
  - TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Model
  - TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  - TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveObjectAsync(TimeCockpit.Data.EntityObject)
  - TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: DataContext
  nameWithType: DataContext
  fullName: TimeCockpit.Data.DataContext
  type: Class
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nRepresents the class that manages access to meta data.\n"
  remarks: "\nThe <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> provides functionality to query or manipulate an underlying datastore. \nThis applies to both, the data and meta model. That is, users can insert, update or delete data or can change\nthe structure of the data via the belonging <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: 'public sealed class DataContext : DynamicObject, IDynamicMetaObjectProvider, IDataContext, IDisposable'
    content.vb: >-
      Public NotInheritable Class DataContext
          Inherits DynamicObject
          Implements IDynamicMetaObjectProvider, IDataContext, IDisposable
  inheritance:
  - System.Object
  - TimeCockpit.Data.DynamicObject
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider
  - TimeCockpit.Data.IDataContext
  - System.IDisposable
  inheritedMembers:
  - TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo)
  - TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  - TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.Scripting.ExecutionInfo)
  - TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(System.Reflection.Assembly,System.String,System.IO.Stream)
  - TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  - TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveObjectAsync(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveObjectAsync(TimeCockpit.Data.EntityObject)
  id: TimeCockpit#Data#IDataContext#SaveObjectAsync(TimeCockpit.Data.EntityObject)
  isEii: true
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: IDataContext.SaveObjectAsync(EntityObject)
  nameWithType: DataContext.IDataContext.SaveObjectAsync(EntityObject)
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves an object to the data context.\n"
  syntax:
    content: Task IDataContext.SaveObjectAsync(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The entity object to save.
    return:
      type: System.Threading.Tasks.Task
      description: Returns the task representing the operation.
    content.vb: Function TimeCockpit.Data.IDataContext.SaveObjectAsync(entityObject As EntityObject) As Task Implements IDataContext.SaveObjectAsync
  overload: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveObjectAsync*
  implements:
  - TimeCockpit.Data.IDataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.SaveObjectAsync(EntityObject)
  name.vb: TimeCockpit.Data.IDataContext.SaveObjectAsync(EntityObject)
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  id: TimeCockpit#Data#IDataContext#DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  isEii: true
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: IDataContext.DeleteObjectAsync(EntityObject)
  nameWithType: DataContext.IDataContext.DeleteObjectAsync(EntityObject)
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nAsynchronously deletes an object.\n"
  syntax:
    content: Task IDataContext.DeleteObjectAsync(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The id and type of the entity to delete.
    return:
      type: System.Threading.Tasks.Task
      description: Returns the task representing the operation.
    content.vb: Function TimeCockpit.Data.IDataContext.DeleteObjectAsync(entityObject As EntityObject) As Task Implements IDataContext.DeleteObjectAsync
  overload: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#DeleteObjectAsync*
  implements:
  - TimeCockpit.Data.IDataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.DeleteObjectAsync(EntityObject)
  name.vb: TimeCockpit.Data.IDataContext.DeleteObjectAsync(EntityObject)
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  commentId: M:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  id: TimeCockpit#Data#IDataContext#SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  isEii: true
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: IDataContext.SaveChangesAsync(ChangeTracker)
  nameWithType: DataContext.IDataContext.SaveChangesAsync(ChangeTracker)
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves the changes from the change tracker to the data context.\n"
  syntax:
    content: Task IDataContext.SaveChangesAsync(ChangeTracker changes)
    parameters:
    - id: changes
      type: TimeCockpit.Data.ChangeTracker
      description: The <xref href="TimeCockpit.Data.ChangeTracker" data-throw-if-not-resolved="false"></xref> holding the changed objects.
    return:
      type: System.Threading.Tasks.Task
      description: Returns the task representing the operation.
    content.vb: Function TimeCockpit.Data.IDataContext.SaveChangesAsync(changes As ChangeTracker) As Task Implements IDataContext.SaveChangesAsync
  overload: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveChangesAsync*
  implements:
  - TimeCockpit.Data.IDataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.SaveChangesAsync(ChangeTracker)
  name.vb: TimeCockpit.Data.IDataContext.SaveChangesAsync(ChangeTracker)
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  commentId: M:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  id: TimeCockpit#Data#IDataContext#SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  isEii: true
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: IDataContext.SelectMultipleAsync(QueryRequest[], CancellationToken)
  nameWithType: DataContext.IDataContext.SelectMultipleAsync(QueryRequest[], CancellationToken)
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[], System.Threading.CancellationToken)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCanonical method for querying a database with multiple queries at the same time.\n"
  remarks: "\nThis interface is the lowest level interface and should support all scenarios required. Use\nthe helper methods in <see cref=\"!:DataContextExtensions\"></see> to find an easier interface.\n"
  syntax:
    content: Task IDataContext.SelectMultipleAsync(QueryRequest[] queries, CancellationToken cancellationToken)
    parameters:
    - id: queries
      type: TimeCockpit.Data.QueryRequest[]
      description: The query request objects.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token used for all operations.
    return:
      type: System.Threading.Tasks.Task
      description: Returns a list of tasks representing the query operations.
    content.vb: Function TimeCockpit.Data.IDataContext.SelectMultipleAsync(queries As QueryRequest(), cancellationToken As CancellationToken) As Task Implements IDataContext.SelectMultipleAsync
  overload: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SelectMultipleAsync*
  implements:
  - TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.SelectMultipleAsync(QueryRequest(), CancellationToken)
  fullName.vb: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest(), System.Threading.CancellationToken)
  name.vb: TimeCockpit.Data.IDataContext.SelectMultipleAsync(QueryRequest(), CancellationToken)
- uid: TimeCockpit.Data.DataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  commentId: M:TimeCockpit.Data.DataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  id: ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: ExecuteAction(ModelAction, ExecutionContext)
  nameWithType: DataContext.ExecuteAction(ModelAction, ExecutionContext)
  fullName: TimeCockpit.Data.DataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction, TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecute the given action.\n"
  syntax:
    content: public ActionResult ExecuteAction(ModelAction action, ExecutionContext executionContext)
    parameters:
    - id: action
      type: TimeCockpit.Data.DataModel.Actions.ModelAction
      description: Action to execute.
    - id: executionContext
      type: TimeCockpit.Data.DataModel.Actions.ExecutionContext
      description: Execution context/parameters to use.
    return:
      type: TimeCockpit.Data.ActionResult
      description: Action result.
    content.vb: Public Function ExecuteAction(action As ModelAction, executionContext As ExecutionContext) As ActionResult
  overload: TimeCockpit.Data.DataContext.ExecuteAction*
  implements:
  - TimeCockpit.Data.IDataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  commentId: M:TimeCockpit.Data.DataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  id: GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetScriptListResultAsync(ScriptListRequest)
  nameWithType: DataContext.GetScriptListResultAsync(ScriptListRequest)
  fullName: TimeCockpit.Data.DataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the result of a script source list.\n"
  syntax:
    content: public Task<EntityObject[]> GetScriptListResultAsync(ScriptListRequest request)
    parameters:
    - id: request
      type: TimeCockpit.Data.ScriptListRequest
      description: 'Request: List name, parameters ...'
    return:
      type: System.Threading.Tasks.Task{TimeCockpit.Data.EntityObject[]}
      description: Returns the task representing the operation and containing the result entity objects.
    content.vb: Public Function GetScriptListResultAsync(request As ScriptListRequest) As Task(Of EntityObject())
  overload: TimeCockpit.Data.DataContext.GetScriptListResultAsync*
  implements:
  - TimeCockpit.Data.IDataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.Create(TimeCockpit.Data.DataContextSettings)
  commentId: M:TimeCockpit.Data.DataContext.Create(TimeCockpit.Data.DataContextSettings)
  id: Create(TimeCockpit.Data.DataContextSettings)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Create(DataContextSettings)
  nameWithType: DataContext.Create(DataContextSettings)
  fullName: TimeCockpit.Data.DataContext.Create(TimeCockpit.Data.DataContextSettings)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCreates a new instance of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified <xref href=\"TimeCockpit.Data.DataContextSettings\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis method to create a new instance of <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> can be used to create either <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>s of type\nServer or Client (local connection to Sql CE).\n</p>\n<p>\nThis factory methods creates the <xref href=\"TimeCockpit.Data.DataContext.DbClient\" data-throw-if-not-resolved=\"false\"></xref> to access the database and, if <xref href=\"TimeCockpit.Data.Database.DbClientSettings.InstallMissingSystemObjects\" data-throw-if-not-resolved=\"false\"></xref> it true, \ninstall missing system object (or adds missing ones).\n</p>\n<p>\nFurther, if <xref href=\"TimeCockpit.Data.DataContextSettings.InstallMissingSystemEntities\" data-throw-if-not-resolved=\"false\"></xref> is true, missing system entities are installed.\n</p>\n"
  syntax:
    content: public static DataContext Create(DataContextSettings settings)
    parameters:
    - id: settings
      type: TimeCockpit.Data.DataContextSettings
      description: Settings that define the behavior of the created <xref href="TimeCockpit.Data.DataContext" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: TimeCockpit.Data.DataContext
      description: New instance of the <xref href="TimeCockpit.Data.DataContext" data-throw-if-not-resolved="false"></xref> class.
    content.vb: Public Shared Function Create(settings As DataContextSettings) As DataContext
  overload: TimeCockpit.Data.DataContext.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<ul><li></li><li></li></ul>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String,TimeCockpit.Data.DataContextSettings,System.String)
  commentId: M:TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String,TimeCockpit.Data.DataContextSettings,System.String)
  id: Create(System.String,System.String,System.String,TimeCockpit.Data.DataContextSettings,System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Create(String, String, String, DataContextSettings, String)
  nameWithType: DataContext.Create(String, String, String, DataContextSettings, String)
  fullName: TimeCockpit.Data.DataContext.Create(System.String, System.String, System.String, TimeCockpit.Data.DataContextSettings, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCreates a new instance of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified <xref href=\"TimeCockpit.Data.DataContextSettings\" data-throw-if-not-resolved=\"false\"></xref> and on the \nconnection information fetched from the management service.\n"
  remarks: "\n<p>\nThis method fetches an instance of <xref href=\"WebManagementService.ConnectionInformation\" data-throw-if-not-resolved=\"false\"></xref> from the management service to determine where to connect to.\nThus it can only create a data context to a remote sql azure database, that is, an instance of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> with type Server.\n</p>\n<p>\nATTENTION: If either a provider name, connection string, a blob storage account name, a shared access key or a tenant schema was set in the \nsettings.DbClientSettings parameter, the latter settings will overwritten with the data fetched from the management service. Further it creates\na <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> of type Server that is, changes are allowed.\n</p>\n"
  syntax:
    content: public static DataContext Create(string userName, string password, string endpointName, DataContextSettings settings, string endpointAddress = null)
    parameters:
    - id: userName
      type: System.String
      description: The username to access the management webservice.
    - id: password
      type: System.String
      description: The password to access the management webservice.
    - id: endpointName
      type: System.String
      description: The name of the service endpoint where to access the management service.
    - id: settings
      type: TimeCockpit.Data.DataContextSettings
      description: Settings that define the behavior of the created <xref href="TimeCockpit.Data.DataContext" data-throw-if-not-resolved="false"></xref> instance.
    - id: endpointAddress
      type: System.String
      description: The address of the endpoint.
    return:
      type: TimeCockpit.Data.DataContext
      description: New instance of the <xref href="TimeCockpit.Data.DataContext" data-throw-if-not-resolved="false"></xref> class.
    content.vb: Public Shared Function Create(userName As String, password As String, endpointName As String, settings As DataContextSettings, endpointAddress As String = Nothing) As DataContext
  overload: TimeCockpit.Data.DataContext.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<ul><li></li><li></li></ul>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.DataContext.GetSettings(WebManagementService.ConnectionInformation,TimeCockpit.Data.DataContextSettings)
  commentId: M:TimeCockpit.Data.DataContext.GetSettings(WebManagementService.ConnectionInformation,TimeCockpit.Data.DataContextSettings)
  id: GetSettings(WebManagementService.ConnectionInformation,TimeCockpit.Data.DataContextSettings)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetSettings(ConnectionInformation, DataContextSettings)
  nameWithType: DataContext.GetSettings(ConnectionInformation, DataContextSettings)
  fullName: TimeCockpit.Data.DataContext.GetSettings(WebManagementService.ConnectionInformation, TimeCockpit.Data.DataContextSettings)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nTODO review/preview\n"
  syntax:
    content: public static DataContextSettings GetSettings(ConnectionInformation connectionInformation, DataContextSettings settings)
    parameters:
    - id: connectionInformation
      type: WebManagementService.ConnectionInformation
    - id: settings
      type: TimeCockpit.Data.DataContextSettings
    return:
      type: TimeCockpit.Data.DataContextSettings
    content.vb: Public Shared Function GetSettings(connectionInformation As ConnectionInformation, settings As DataContextSettings) As DataContextSettings
  overload: TimeCockpit.Data.DataContext.GetSettings*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String,System.String)
  id: Create(System.String,System.String,System.String,System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Create(String, String, String, String)
  nameWithType: DataContext.Create(String, String, String, String)
  fullName: TimeCockpit.Data.DataContext.Create(System.String, System.String, System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCreates a new instance of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified <xref href=\"TimeCockpit.Data.DataContextSettings\" data-throw-if-not-resolved=\"false\"></xref> and on the \nconnection information fetched from the management service.\n"
  remarks: "\n<p>\nThis method fetches an instance of <xref href=\"WebManagementService.ConnectionInformation\" data-throw-if-not-resolved=\"false\"></xref> from the management service to determine where to connect to.\nThus it can only create a data context to a remote sql azure database, that is, an instance of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> with type Server.\n</p>\n"
  syntax:
    content: public static DataContext Create(string userName, string password, string endpointName, string endpointAddress)
    parameters:
    - id: userName
      type: System.String
      description: The username to access the management webservice.
    - id: password
      type: System.String
      description: The password to access the management webservice.
    - id: endpointName
      type: System.String
      description: The name of the service endpoint where to access the management service.
    - id: endpointAddress
      type: System.String
      description: The address of the endpoint.
    return:
      type: TimeCockpit.Data.DataContext
      description: New instance of the <xref href="TimeCockpit.Data.DataContext" data-throw-if-not-resolved="false"></xref> class.
    content.vb: Public Shared Function Create(userName As String, password As String, endpointName As String, endpointAddress As String) As DataContext
  overload: TimeCockpit.Data.DataContext.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<ul><li></li><li></li></ul>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.DataContext.Create(System.String,System.String,System.String)
  id: Create(System.String,System.String,System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Create(String, String, String)
  nameWithType: DataContext.Create(String, String, String)
  fullName: TimeCockpit.Data.DataContext.Create(System.String, System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCreates a new instance of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified <xref href=\"TimeCockpit.Data.DataContextSettings\" data-throw-if-not-resolved=\"false\"></xref> and on the \nconnection information fetched from the management service.\n"
  remarks: "\n<p>\nThis method fetches an instance of <xref href=\"WebManagementService.ConnectionInformation\" data-throw-if-not-resolved=\"false\"></xref> from the management service to determine where to connect to.\nThus it can only create a data context to a remote sql azure database, that is, an instance of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> with type Server.\n</p>\n"
  syntax:
    content: public static DataContext Create(string userName, string password, string endpointName)
    parameters:
    - id: userName
      type: System.String
      description: The username to access the management webservice.
    - id: password
      type: System.String
      description: The password to access the management webservice.
    - id: endpointName
      type: System.String
      description: The name of the service endpoint where to access the management service.
    return:
      type: TimeCockpit.Data.DataContext
      description: New instance of the <xref href="TimeCockpit.Data.DataContext" data-throw-if-not-resolved="false"></xref> class.
    content.vb: Public Shared Function Create(userName As String, password As String, endpointName As String) As DataContext
  overload: TimeCockpit.Data.DataContext.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<ul><li></li><li></li></ul>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.DataContext.Create(System.String,System.String)
  commentId: M:TimeCockpit.Data.DataContext.Create(System.String,System.String)
  id: Create(System.String,System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Create(String, String)
  nameWithType: DataContext.Create(String, String)
  fullName: TimeCockpit.Data.DataContext.Create(System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nCreates a new instance of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> class based on the specified <xref href=\"TimeCockpit.Data.DataContextSettings\" data-throw-if-not-resolved=\"false\"></xref> and on the \nconnection information fetched from the management service.\n"
  remarks: "\n<p>\nThis method fetches an instance of <xref href=\"WebManagementService.ConnectionInformation\" data-throw-if-not-resolved=\"false\"></xref> from the management service to determine where to connect to.\nThus it can only create a data context to a remote sql azure database, that is, an instance of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> with type Server.\n</p>\n"
  syntax:
    content: public static DataContext Create(string userName, string password)
    parameters:
    - id: userName
      type: System.String
      description: The username to access the management webservice.
    - id: password
      type: System.String
      description: The password to access the management webservice.
    return:
      type: TimeCockpit.Data.DataContext
      description: New instance of the <xref href="TimeCockpit.Data.DataContext" data-throw-if-not-resolved="false"></xref> class.
    content.vb: Public Shared Function Create(userName As String, password As String) As DataContext
  overload: TimeCockpit.Data.DataContext.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<ul><li></li><li></li></ul>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.DataContext.GetVersionInformation(System.String,System.String,System.String,System.String)
  commentId: M:TimeCockpit.Data.DataContext.GetVersionInformation(System.String,System.String,System.String,System.String)
  id: GetVersionInformation(System.String,System.String,System.String,System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetVersionInformation(String, String, String, String)
  nameWithType: DataContext.GetVersionInformation(String, String, String, String)
  fullName: TimeCockpit.Data.DataContext.GetVersionInformation(System.String, System.String, System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the version information for the current user/tenant.\n"
  syntax:
    content: public static VersionInformationOverview GetVersionInformation(string userName, string password, string endpointName, string endpointAddress = null)
    parameters:
    - id: userName
      type: System.String
      description: The username to access the management webservice.
    - id: password
      type: System.String
      description: The password to access the management webservice.
    - id: endpointName
      type: System.String
      description: The name of the service endpoint where to access the management service.
    - id: endpointAddress
      type: System.String
      description: The address of the endpoint to use.
    return:
      type: WebManagementService.VersionInformationOverview
      description: The version information for the current user/tenant or null if the user uses a deprecated (pre-ownership) tenant.
    content.vb: Public Shared Function GetVersionInformation(userName As String, password As String, endpointName As String, endpointAddress As String = Nothing) As VersionInformationOverview
  overload: TimeCockpit.Data.DataContext.GetVersionInformation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.DataContext.SelectAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: SelectAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectAsync(String, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.SelectAsync(String, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectAsync(System.String, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvokes the <xref href=\"TimeCockpit.Data.DataContext.Select(System.String%2cSystem.Collections.Generic.IEnumerable%7bTimeCockpit.Data.QueryLanguage.QueryParameter%7d%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref> asynchronously\n"
  syntax:
    content: public IObservable<EntityObject> SelectAsync(string query, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: a TCQL query
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: a list of <xref href="TimeCockpit.Data.QueryLanguage.QueryParameter" data-throw-if-not-resolved="false"></xref>s
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: An connectable observable of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectAsync(query As String, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectAsync*
  nameWithType.vb: DataContext.SelectAsync(String, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectAsync(System.String, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: SelectAsync(String, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: SelectAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectAsync(Query, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.SelectAsync(Query, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvokes the <see cref=\"!:DataContext.Select(QueryRequest, IEnumerable&lt;QueryParameter>, SelectCache)\"></see> asynchronously.\n"
  syntax:
    content: public IObservable<EntityObject> SelectAsync(Query query, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: The AST representation of a Query.
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: a list of <xref href="TimeCockpit.Data.QueryLanguage.QueryParameter" data-throw-if-not-resolved="false"></xref>s
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: An connectable observable of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectAsync(query As Query, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectAsync*
  nameWithType.vb: DataContext.SelectAsync(Query, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: SelectAsync(Query, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectSingleAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingleAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  id: SelectSingleAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingleAsync(String, SelectCache)
  nameWithType: DataContext.SelectSingleAsync(String, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingleAsync(System.String, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvokes the <xref href=\"TimeCockpit.Data.DataContext.SelectSingle(System.String%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref> method asynchronously\n"
  syntax:
    content: public IObservable<EntityObject> SelectSingleAsync(string query, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: a TCQL query
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: Returns a connectable observable of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectSingleAsync(query As String, cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectSingleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  commentId: M:TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  id: SelectSingleAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter})
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingleAsync(Query, IEnumerable<QueryParameter>)
  nameWithType: DataContext.SelectSingleAsync(Query, IEnumerable<QueryParameter>)
  fullName: TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvokes the <see cref=\"!:DataContext.SelectSingle(QueryRequest, IEnumerable&lt;QueryParameter>, SelectCache)\"></see> asynchronously.\n"
  syntax:
    content: public IObservable<EntityObject> SelectSingleAsync(Query query, IEnumerable<QueryParameter> queryParameters)
    parameters:
    - id: query
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: The AST representation of a Query.
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: a list of <xref href="TimeCockpit.Data.QueryLanguage.QueryParameter" data-throw-if-not-resolved="false"></xref>s
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: An connectable observable producing an <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingleAsync(query As Query, queryParameters As IEnumerable(Of QueryParameter)) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectSingleAsync*
  nameWithType.vb: DataContext.SelectSingleAsync(Query, IEnumerable(Of QueryParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter))
  name.vb: SelectSingleAsync(Query, IEnumerable(Of QueryParameter))
- uid: TimeCockpit.Data.DataContext.SelectSingleAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingleAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: SelectSingleAsync(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingleAsync(String, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.SelectSingleAsync(String, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingleAsync(System.String, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvokes the <xref href=\"TimeCockpit.Data.DataContext.SelectSingle(System.String%2cSystem.Collections.Generic.IEnumerable%7bTimeCockpit.Data.QueryLanguage.QueryParameter%7d%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref> asynchronously\n"
  syntax:
    content: public IObservable<EntityObject> SelectSingleAsync(string query, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: a TCQL query
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: a list of <xref href="TimeCockpit.Data.QueryLanguage.QueryParameter" data-throw-if-not-resolved="false"></xref>s
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: Returns a connectable observable of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectSingleAsync(query As String, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectSingleAsync*
  nameWithType.vb: DataContext.SelectSingleAsync(String, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectSingleAsync(System.String, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: SelectSingleAsync(String, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectTopAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectTopAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: SelectTopAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectTopAsync(String, Int32, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.SelectTopAsync(String, Int32, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectTopAsync(System.String, System.Int32, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query with a list of <xref href=\"TimeCockpit.Data.QueryLanguage.QueryParameter\" data-throw-if-not-resolved=\"false\"></xref>s and returns a specified number of rows.\n"
  syntax:
    content: public IObservable<EntityObject> SelectTopAsync(string query, int rowCount, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute.
    - id: rowCount
      type: System.Int32
      description: The number rows to return.
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: A list of <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: Returns a connectable observable of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectTopAsync(query As String, rowCount As Integer, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectTopAsync*
  nameWithType.vb: DataContext.SelectTopAsync(String, Int32, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectTopAsync(System.String, System.Int32, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: SelectTopAsync(String, Int32, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject)
  id: SelectSingleAsync(TimeCockpit.Data.IEntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingleAsync(IEntityObject)
  nameWithType: DataContext.SelectSingleAsync(IEntityObject)
  fullName: TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query by example and returns the first row of the result set\n"
  remarks: "\nThis does not fetch include relations in the query. That is, if an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nhas a relation to another <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>, the value of the referenced\n<xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> will be null.\n"
  syntax:
    content: public IObservable<EntityObject> SelectSingleAsync(IEntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.IEntityObject
      description: The example <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to query for.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: An instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingleAsync(entityObject As IEntityObject) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectSingleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  id: SelectSingleAsync(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingleAsync(IEntityObject, Boolean, SelectCache)
  nameWithType: DataContext.SelectSingleAsync(IEntityObject, Boolean, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingleAsync(TimeCockpit.Data.IEntityObject, System.Boolean, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query by example and returns the first row of the result set\n"
  remarks: "\nThis method returns the all relations of the returned <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>. That is, if an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nhas a relation to another <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> and the referenced <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> has a value, the value will be returned.\n"
  syntax:
    content: public IObservable<EntityObject> SelectSingleAsync(IEntityObject entityObject, bool autoIncludeRelations, SelectCache cache = null)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.IEntityObject
      description: The example <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to query for.
    - id: autoIncludeRelations
      type: System.Boolean
      description: If true, fetches the all relations of the <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: A single instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingleAsync(entityObject As IEntityObject, autoIncludeRelations As Boolean, cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectSingleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectTopAsync(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectTopAsync(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  id: SelectTopAsync(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectTopAsync(String, Int32, SelectCache)
  nameWithType: DataContext.SelectTopAsync(String, Int32, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectTopAsync(System.String, System.Int32, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query asynchronously but returns only the specified number of rows.\n"
  syntax:
    content: public IObservable<EntityObject> SelectTopAsync(string query, int rowCount, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute asynchronously.
    - id: rowCount
      type: System.Int32
      description: The number of rows to return.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectTopAsync(query As String, rowCount As Integer, cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectTopAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.ReadLocalizedTextValues(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.ReadLocalizedTextValues(TimeCockpit.Data.EntityObject)
  id: ReadLocalizedTextValues(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: ReadLocalizedTextValues(EntityObject)
  nameWithType: DataContext.ReadLocalizedTextValues(EntityObject)
  fullName: TimeCockpit.Data.DataContext.ReadLocalizedTextValues(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nReads the localized text values for all localized properties of the underlying <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref>\nof the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public void ReadLocalizedTextValues(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The entity object.
    content.vb: Public Sub ReadLocalizedTextValues(entityObject As EntityObject)
  overload: TimeCockpit.Data.DataContext.ReadLocalizedTextValues*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.InitializeLocalizedTextValues(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.InitializeLocalizedTextValues(TimeCockpit.Data.EntityObject)
  id: InitializeLocalizedTextValues(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: InitializeLocalizedTextValues(EntityObject)
  nameWithType: DataContext.InitializeLocalizedTextValues(EntityObject)
  fullName: TimeCockpit.Data.DataContext.InitializeLocalizedTextValues(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInitializes the localized text values.\n"
  remarks: "\nIf called, the method creates the structure to store localized text values of a new entity object.\nIf the method is called on an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> that has been loaded from the database the method\nthrows an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public void InitializeLocalizedTextValues(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The entity object to initialize the localized text value collection for.
    content.vb: Public Sub InitializeLocalizedTextValues(entityObject As EntityObject)
  overload: TimeCockpit.Data.DataContext.InitializeLocalizedTextValues*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.Select(System.String,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.Select(System.String,TimeCockpit.Data.Database.SelectCache)
  id: Select(System.String,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Select(String, SelectCache)
  nameWithType: DataContext.Select(String, SelectCache)
  fullName: TimeCockpit.Data.DataContext.Select(System.String, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query\n"
  syntax:
    content: public ICollection<EntityObject> Select(string query, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function Select(query As String, cache As SelectCache = Nothing) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.Select*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  id: Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Select(Query, SelectCache)
  nameWithType: DataContext.Select(Query, SelectCache)
  fullName: TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query passed as an AST.\n"
  syntax:
    content: public ICollection<EntityObject> Select(Query query, SelectCache cache = null)
    parameters:
    - id: query
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: The query to select.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: Returns a list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function Select(query As Query, cache As SelectCache = Nothing) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.Select*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectTop(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectTop(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  id: SelectTop(System.String,System.Int32,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectTop(String, Int32, SelectCache)
  nameWithType: DataContext.SelectTop(String, Int32, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectTop(System.String, System.Int32, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query but returns only the specified number of rows.\n"
  syntax:
    content: public ICollection<EntityObject> SelectTop(string query, int rowCount, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute.
    - id: rowCount
      type: System.Int32
      description: The number of rows to return.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectTop(query As String, rowCount As Integer, cache As SelectCache = Nothing) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectTop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  commentId: M:TimeCockpit.Data.DataContext.SelectWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  id: SelectWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectWithParameters(IEnumerable<KeyValuePair<Object, Object>>)
  nameWithType: DataContext.SelectWithParameters(IEnumerable<KeyValuePair<Object, Object>>)
  fullName: TimeCockpit.Data.DataContext.SelectWithParameters(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query with query parameters.\n"
  syntax:
    content: public ICollection<EntityObject> SelectWithParameters(IEnumerable<KeyValuePair<object, object>> parameters)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
      description: A list of <xref href="System.Collections.Generic.KeyValuePair%602" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s
    content.vb: Public Function SelectWithParameters(parameters As IEnumerable(Of KeyValuePair(Of Object, Object))) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectWithParameters*
  nameWithType.vb: DataContext.SelectWithParameters(IEnumerable(Of KeyValuePair(Of Object, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectWithParameters(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)))
  name.vb: SelectWithParameters(IEnumerable(Of KeyValuePair(Of Object, Object)))
- uid: TimeCockpit.Data.DataContext.Select(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.Select(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: Select(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Select(String, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.Select(String, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.Select(System.String, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query with query parameters.\n"
  syntax:
    content: public ICollection<EntityObject> Select(string query, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: A list of <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s
    content.vb: Public Function Select(query As String, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.Select*
  nameWithType.vb: DataContext.Select(String, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.Select(System.String, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: Select(String, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: Select(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Select(Query, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.Select(Query, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query with query parameters by passing in an AST tree.\n"
  syntax:
    content: public ICollection<EntityObject> Select(Query query, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Query to execute as an AST representation.
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: A list of <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s
    content.vb: Public Function Select(query As Query, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.Select*
  nameWithType.vb: DataContext.Select(Query, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.Select(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: Select(Query, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectTop(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectTop(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: SelectTop(System.String,System.Int32,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectTop(String, Int32, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.SelectTop(String, Int32, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectTop(System.String, System.Int32, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query with a list of <xref href=\"TimeCockpit.Data.QueryLanguage.QueryParameter\" data-throw-if-not-resolved=\"false\"></xref>s and returns a specified number of rows.\n"
  syntax:
    content: public ICollection<EntityObject> SelectTop(string query, int rowCount, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute.
    - id: rowCount
      type: System.Int32
      description: The number rows to return.
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: A list of <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s
    content.vb: Public Function SelectTop(query As String, rowCount As Integer, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectTop*
  nameWithType.vb: DataContext.SelectTop(String, Int32, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectTop(System.String, System.Int32, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: SelectTop(String, Int32, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectSingle(System.String,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingle(System.String,TimeCockpit.Data.Database.SelectCache)
  id: SelectSingle(System.String,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingle(String, SelectCache)
  nameWithType: DataContext.SelectSingle(String, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingle(System.String, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query and returns the first row of the result set.\n"
  syntax:
    content: public EntityObject SelectSingle(string query, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: TimeCockpit.Data.EntityObject
      description: A single instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingle(query As String, cache As SelectCache = Nothing) As EntityObject
  overload: TimeCockpit.Data.DataContext.SelectSingle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  id: SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingle(Query, SelectCache)
  nameWithType: DataContext.SelectSingle(Query, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query and returns the first row of the result set.\n"
  syntax:
    content: public EntityObject SelectSingle(Query query, SelectCache cache = null)
    parameters:
    - id: query
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Query to execute.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: TimeCockpit.Data.EntityObject
      description: A single instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingle(query As Query, cache As SelectCache = Nothing) As EntityObject
  overload: TimeCockpit.Data.DataContext.SelectSingle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectSingleWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  commentId: M:TimeCockpit.Data.DataContext.SelectSingleWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  id: SelectSingleWithParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingleWithParameters(IEnumerable<KeyValuePair<Object, Object>>)
  nameWithType: DataContext.SelectSingleWithParameters(IEnumerable<KeyValuePair<Object, Object>>)
  fullName: TimeCockpit.Data.DataContext.SelectSingleWithParameters(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query with query parameters and returns the first row of the result set\n"
  syntax:
    content: public EntityObject SelectSingleWithParameters(IEnumerable<KeyValuePair<object, object>> parameters)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
      description: A list of <xref href="System.Collections.Generic.KeyValuePair%602" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TimeCockpit.Data.EntityObject
      description: A single instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingleWithParameters(parameters As IEnumerable(Of KeyValuePair(Of Object, Object))) As EntityObject
  overload: TimeCockpit.Data.DataContext.SelectSingleWithParameters*
  nameWithType.vb: DataContext.SelectSingleWithParameters(IEnumerable(Of KeyValuePair(Of Object, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectSingleWithParameters(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)))
  name.vb: SelectSingleWithParameters(IEnumerable(Of KeyValuePair(Of Object, Object)))
- uid: TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  commentId: M:TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  id: SelectSingleWithParametersAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingleWithParametersAsync(IEnumerable<KeyValuePair<Object, Object>>)
  nameWithType: DataContext.SelectSingleWithParametersAsync(IEnumerable<KeyValuePair<Object, Object>>)
  fullName: TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecute a query with query parameters asynchronously and returns an observable to the first row of the result set.\n"
  syntax:
    content: public IObservable<EntityObject> SelectSingleWithParametersAsync(IEnumerable<KeyValuePair<object, object>> parameters)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
      description: A list of <xref href="System.Collections.Generic.KeyValuePair%602" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: An observable to a single instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s
    content.vb: Public Function SelectSingleWithParametersAsync(parameters As IEnumerable(Of KeyValuePair(Of Object, Object))) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync*
  nameWithType.vb: DataContext.SelectSingleWithParametersAsync(IEnumerable(Of KeyValuePair(Of Object, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)))
  name.vb: SelectSingleWithParametersAsync(IEnumerable(Of KeyValuePair(Of Object, Object)))
- uid: TimeCockpit.Data.DataContext.SelectSingle(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingle(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: SelectSingle(System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingle(String, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.SelectSingle(String, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingle(System.String, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query with a list of <xref href=\"TimeCockpit.Data.QueryLanguage.QueryParameter\" data-throw-if-not-resolved=\"false\"></xref>s and returns the first row of the result set\n"
  syntax:
    content: public EntityObject SelectSingle(string query, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: Query to execute
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: A list of <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: TimeCockpit.Data.EntityObject
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function SelectSingle(query As String, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As EntityObject
  overload: TimeCockpit.Data.DataContext.SelectSingle*
  nameWithType.vb: DataContext.SelectSingle(String, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectSingle(System.String, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: SelectSingle(String, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  id: SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingle(Query, IEnumerable<QueryParameter>, SelectCache)
  nameWithType: DataContext.SelectSingle(Query, IEnumerable<QueryParameter>, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query returning a single element.\n"
  syntax:
    content: public EntityObject SelectSingle(Query query, IEnumerable<QueryParameter> queryParameters, SelectCache cache = null)
    parameters:
    - id: query
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: The query to execute.
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: The query parameters to execute.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: TimeCockpit.Data.EntityObject
      description: Returns the entity object returned by the query.
    content.vb: Public Function SelectSingle(query As Query, queryParameters As IEnumerable(Of QueryParameter), cache As SelectCache = Nothing) As EntityObject
  overload: TimeCockpit.Data.DataContext.SelectSingle*
  nameWithType.vb: DataContext.SelectSingle(Query, IEnumerable(Of QueryParameter), SelectCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.QueryLanguage.Syntax.Query, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), TimeCockpit.Data.Database.SelectCache)
  name.vb: SelectSingle(Query, IEnumerable(Of QueryParameter), SelectCache)
- uid: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject,TimeCockpit.Data.Database.SelectCache)
  id: SelectSingle(TimeCockpit.Data.IEntityObject,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingle(IEntityObject, SelectCache)
  nameWithType: DataContext.SelectSingle(IEntityObject, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query by example and returns the first row of the result set\n"
  remarks: "\nThis does not fetch include relations in the query. That is, if an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nhas a relation to another <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>, the value of the referenced\n<xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> will be null.\n"
  syntax:
    content: public EntityObject SelectSingle(IEntityObject entityObject, SelectCache cache = null)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.IEntityObject
      description: The example <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to query for.
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: TimeCockpit.Data.EntityObject
      description: An instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingle(entityObject As IEntityObject, cache As SelectCache = Nothing) As EntityObject
  overload: TimeCockpit.Data.DataContext.SelectSingle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  id: SelectSingle(TimeCockpit.Data.IEntityObject,System.Boolean,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectSingle(IEntityObject, Boolean, SelectCache)
  nameWithType: DataContext.SelectSingle(IEntityObject, Boolean, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectSingle(TimeCockpit.Data.IEntityObject, System.Boolean, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nExecutes a query by example and returns the first row of the result set\n"
  remarks: "\nThis method returns the all relations of the returned <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>. That is, if an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>\nhas a relation to another <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> and the referenced <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> has a value, the value will be returned.\n"
  syntax:
    content: public EntityObject SelectSingle(IEntityObject entityObject, bool autoIncludeRelations, SelectCache cache = null)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.IEntityObject
      description: The example <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to query for.
    - id: autoIncludeRelations
      type: System.Boolean
      description: If true, fetches the all relations of the <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: TimeCockpit.Data.EntityObject
      description: A single instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function SelectSingle(entityObject As IEntityObject, autoIncludeRelations As Boolean, cache As SelectCache = Nothing) As EntityObject
  overload: TimeCockpit.Data.DataContext.SelectSingle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SaveModel(TimeCockpit.Data.DataModel.Model)
  commentId: M:TimeCockpit.Data.DataContext.SaveModel(TimeCockpit.Data.DataModel.Model)
  id: SaveModel(TimeCockpit.Data.DataModel.Model)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SaveModel(Model)
  nameWithType: DataContext.SaveModel(Model)
  fullName: TimeCockpit.Data.DataContext.SaveModel(TimeCockpit.Data.DataModel.Model)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves all <xref href=\"Model.PendingOperations\" data-throw-if-not-resolved=\"false\"></xref> in the underlying model.\n"
  syntax:
    content: public void SaveModel(Model model)
    parameters:
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: The <xref href="TimeCockpit.Data.DataContext.Model" data-throw-if-not-resolved="false"></xref> to save.
    content.vb: Public Sub SaveModel(model As Model)
  overload: TimeCockpit.Data.DataContext.SaveModel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SaveModelIfValid(TimeCockpit.Data.DataModel.Model)
  commentId: M:TimeCockpit.Data.DataContext.SaveModelIfValid(TimeCockpit.Data.DataModel.Model)
  id: SaveModelIfValid(TimeCockpit.Data.DataModel.Model)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SaveModelIfValid(Model)
  nameWithType: DataContext.SaveModelIfValid(Model)
  fullName: TimeCockpit.Data.DataContext.SaveModelIfValid(TimeCockpit.Data.DataModel.Model)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves all <xref href=\"Model.PendingOperations\" data-throw-if-not-resolved=\"false\"></xref> in the underlying model after validating that the model is valid.\n"
  remarks: >
    Please be aware that a model might already be invalid before the currently pending operations were enqueued.

    If there is no guarantee/check that the initial model was valid, this method might throw a ValidationException even

    though the currently pending operations did not cause new issues.
  syntax:
    content: public void SaveModelIfValid(Model model)
    parameters:
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: The <xref href="TimeCockpit.Data.DataContext.Model" data-throw-if-not-resolved="false"></xref> to save.
    content.vb: Public Sub SaveModelIfValid(model As Model)
  overload: TimeCockpit.Data.DataContext.SaveModelIfValid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.RefreshModel
  commentId: M:TimeCockpit.Data.DataContext.RefreshModel
  id: RefreshModel
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: RefreshModel()
  nameWithType: DataContext.RefreshModel()
  fullName: TimeCockpit.Data.DataContext.RefreshModel()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nRefreshes the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> by reading it from the underlying metadata database\n"
  remarks: "\n<p>\n  Before reading the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> from the database the system verifies that the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> in the database\n  has changed. This is done by comparing the local model version from the database with\n  the property <xref href=\"TimeCockpit.Data.DataModel.Model.LocalModelVersion\" data-throw-if-not-resolved=\"false\"></xref> from\n<xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: public void RefreshModel()
    content.vb: Public Sub RefreshModel
  overload: TimeCockpit.Data.DataContext.RefreshModel*
  implements:
  - TimeCockpit.Data.IDataContext.RefreshModel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.EnforceRefreshModel
  commentId: M:TimeCockpit.Data.DataContext.EnforceRefreshModel
  id: EnforceRefreshModel
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: EnforceRefreshModel()
  nameWithType: DataContext.EnforceRefreshModel()
  fullName: TimeCockpit.Data.DataContext.EnforceRefreshModel()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nRefreshes <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> by reading it from the underlying metadata database\n"
  remarks: "\n<p>\n  In contrast to <xref href=\"TimeCockpit.Data.DataContext.RefreshModel\" data-throw-if-not-resolved=\"false\"></xref> this method always reads the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> from the underlying\n  metadata database regardless of the local model version. Therefore it can be used to throw away\n  pending model changes in memory.\n</p>\n"
  syntax:
    content: public void EnforceRefreshModel()
    content.vb: Public Sub EnforceRefreshModel
  overload: TimeCockpit.Data.DataContext.EnforceRefreshModel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.GetWritableModel
  commentId: M:TimeCockpit.Data.DataContext.GetWritableModel
  id: GetWritableModel
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetWritableModel()
  nameWithType: DataContext.GetWritableModel()
  fullName: TimeCockpit.Data.DataContext.GetWritableModel()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> from the metadata repository database that is not frozen (i.e. that can be changed)\n"
  syntax:
    content: public Model GetWritableModel()
    return:
      type: TimeCockpit.Data.DataModel.Model
      description: An instance of <xref href="TimeCockpit.Data.DataContext.Model" data-throw-if-not-resolved="false"></xref> where metadata can be changed.
    content.vb: Public Function GetWritableModel As Model
  overload: TimeCockpit.Data.DataContext.GetWritableModel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<table><tbody><tr></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject)
  id: SaveObject(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SaveObject(EntityObject)
  nameWithType: DataContext.SaveObject(EntityObject)
  fullName: TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves a given <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public void SaveObject(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to save.
    content.vb: Public Sub SaveObject(entityObject As EntityObject)
  overload: TimeCockpit.Data.DataContext.SaveObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.SaveSettings)
  commentId: M:TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.SaveSettings)
  id: SaveObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.SaveSettings)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SaveObject(EntityObject, SaveSettings)
  nameWithType: DataContext.SaveObject(EntityObject, SaveSettings)
  fullName: TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject, TimeCockpit.Data.SaveSettings)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves a given <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public void SaveObject(EntityObject entityObject, SaveSettings settings)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to save.
    - id: settings
      type: TimeCockpit.Data.SaveSettings
      description: Settings to use for the save operation.
    content.vb: Public Sub SaveObject(entityObject As EntityObject, settings As SaveSettings)
  overload: TimeCockpit.Data.DataContext.SaveObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SaveChanges(TimeCockpit.Data.ChangeTracker)
  commentId: M:TimeCockpit.Data.DataContext.SaveChanges(TimeCockpit.Data.ChangeTracker)
  id: SaveChanges(TimeCockpit.Data.ChangeTracker)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SaveChanges(ChangeTracker)
  nameWithType: DataContext.SaveChanges(ChangeTracker)
  fullName: TimeCockpit.Data.DataContext.SaveChanges(TimeCockpit.Data.ChangeTracker)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nThe method takes an instance of a <xref href=\"TimeCockpit.Data.ChangeTracker\" data-throw-if-not-resolved=\"false\"></xref>\nand persists the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>s that have been\ntracked by the instance. The method persists both, add/update\nor delete operations.\n"
  syntax:
    content: public int SaveChanges(ChangeTracker tracker)
    parameters:
    - id: tracker
      type: TimeCockpit.Data.ChangeTracker
      description: The tracker.
    return:
      type: System.Int32
      description: "\nAn int that indicates how many changes have been saved\n"
    content.vb: Public Function SaveChanges(tracker As ChangeTracker) As Integer
  overload: TimeCockpit.Data.DataContext.SaveChanges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.DeleteObject(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.DeleteObject(TimeCockpit.Data.EntityObject)
  id: DeleteObject(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: DeleteObject(EntityObject)
  nameWithType: DataContext.DeleteObject(EntityObject)
  fullName: TimeCockpit.Data.DataContext.DeleteObject(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nDeletes a given <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >-
    This method marks the instance <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> as deleted and subsequently calls

    <xref href="TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject)" data-throw-if-not-resolved="false"></xref> for the object.
  syntax:
    content: public void DeleteObject(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to delete.
    content.vb: Public Sub DeleteObject(entityObject As EntityObject)
  overload: TimeCockpit.Data.DataContext.DeleteObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.GetMember(System.String)
  commentId: M:TimeCockpit.Data.DataContext.GetMember(System.String)
  id: GetMember(System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetMember(String)
  nameWithType: DataContext.GetMember(String)
  fullName: TimeCockpit.Data.DataContext.GetMember(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets a dynamic member.\n"
  remarks: "\n<p>\nIn most cases this method is used in dynamic language code.\nIn a dynamic language, <xref href=\"TimeCockpit.Data.DataContext.GetMember(System.String)\" data-throw-if-not-resolved=\"false\"></xref> must not be called on a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.\nIt suffices to call e.g. Context.Select(query). A lookup for the member with name &quot;Select&quot; is performed.\nThs method provides access to the following members: <xref href=\"TimeCockpit.Data.DataContext.Select(System.String%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TimeCockpit.Data.DataContext.Select(System.String%2cSystem.Collections.Generic.IEnumerable%7bTimeCockpit.Data.QueryLanguage.QueryParameter%7d%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"TimeCockpit.Data.DataContext.SelectSingle(System.String%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TimeCockpit.Data.DataContext.SelectSingle(System.String%2cSystem.Collections.Generic.IEnumerable%7bTimeCockpit.Data.QueryLanguage.QueryParameter%7d%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TimeCockpit.Data.DataContext.SaveModel(TimeCockpit.Data.DataModel.Model)\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"TimeCockpit.Data.DataContext.SaveObject(TimeCockpit.Data.EntityObject)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TimeCockpit.Data.DataContext.GetWritableModel\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TimeCockpit.Data.DataContext.RefreshModel\" data-throw-if-not-resolved=\"false\"></xref>,\n<see cref=\"!:DataContextScriptExtensions.ExecuteScript(DataContext, string)\"></see>, <xref href=\"TimeCockpit.Data.DataContext.DbClient\" data-throw-if-not-resolved=\"false\"></xref>.BeginTransaction() and <xref href=\"TimeCockpit.Data.DataContext.DbClient\" data-throw-if-not-resolved=\"false\"></xref>.TryCommitTransaction.\n</p>\n<p>\nSelect methods that should be called with a list of parameters must end with the &quot;WithParams&quot; prfix in a dynamic language. \nSo to call <xref href=\"TimeCockpit.Data.DataContext.SelectSingle(System.String%2cSystem.Collections.Generic.IEnumerable%7bTimeCockpit.Data.QueryLanguage.QueryParameter%7d%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref> from a script the correct statement is SelectSingleWithParams(query, params).\n</p>\n<p>\nIn order to create new instance of <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>s, this method provides a custom syntax. It suffices to call CreateModelEntityName in a dynamic language, whereas\nthe prefix &quot;Create&quot; indicates that a new instance of the <xref href=\"TimeCockpit.Data.DataModel.ModelEntityBase\" data-throw-if-not-resolved=\"false\"></xref> with the name &quot;ModelEntityName&quot; should be created.\n<example>\n# create ModelEntity\nprojectType = ModelEntity({ &quot;Name&quot;: &quot;Project&quot;, &quot;InvariantFriendlyName&quot;: &quot;Timecockpit Project&quot; })\nprojectType.Properties.Add(TextProperty({ &quot;Name&quot;: &quot;ProjectName&quot;, &quot;MaxStorageSize&quot;: 50, &quot;InvariantFriendlyName&quot;:&quot;Project Name&quot; }))\n# create instance of ModelEntity\ninstance = Context.CreateProject()\n</example>\n</p>\n"
  syntax:
    content: public override object GetMember(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the member or method to get.
    return:
      type: System.Object
      description: Reference to the dynamic member.
    content.vb: Public Overrides Function GetMember(name As String) As Object
  overridden: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  overload: TimeCockpit.Data.DataContext.GetMember*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.DataContext.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.DataContext.GetMetaObject(System.Linq.Expressions.Expression)
  id: GetMetaObject(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetMetaObject(Expression)
  nameWithType: DataContext.GetMetaObject(Expression)
  fullName: TimeCockpit.Data.DataContext.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the data context meta object.\n"
  syntax:
    content: public override DynamicMetaObject GetMetaObject(Expression parameter)
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
      description: Expression parameter.
    return:
      type: System.Dynamic.DynamicMetaObject
      description: Meta object.
    content.vb: Public Overrides Function GetMetaObject(parameter As Expression) As DynamicMetaObject
  overridden: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  overload: TimeCockpit.Data.DataContext.GetMetaObject*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeCockpit.Data.DataContext.IsDirty(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.IsDirty(TimeCockpit.Data.EntityObject)
  id: IsDirty(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: IsDirty(EntityObject)
  nameWithType: DataContext.IsDirty(EntityObject)
  fullName: TimeCockpit.Data.DataContext.IsDirty(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nChecks if an <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> has changed since it has been loaded from the database.\n"
  syntax:
    content: public bool IsDirty(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
      description: True if the <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> has been changed since it has been loaded from the database else false.
    content.vb: Public Function IsDirty(entityObject As EntityObject) As Boolean
  overload: TimeCockpit.Data.DataContext.IsDirty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.Dispose
  commentId: M:TimeCockpit.Data.DataContext.Dispose
  id: Dispose
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DataContext.Dispose()
  fullName: TimeCockpit.Data.DataContext.Dispose()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nReleases database connection.\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: TimeCockpit.Data.DataContext.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.EnableSystemMode
  commentId: M:TimeCockpit.Data.DataContext.EnableSystemMode
  id: EnableSystemMode
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: EnableSystemMode()
  nameWithType: DataContext.EnableSystemMode()
  fullName: TimeCockpit.Data.DataContext.EnableSystemMode()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSets the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> to a state where entities/properties that have either <xref href=\"TimeCockpit.Data.DataModel.Ownership.System\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"TimeCockpit.Data.DataModel.Ownership.ApplicationSpecific\" data-throw-if-not-resolved=\"false\"></xref> can be changed.\n"
  remarks: "\n<p>\nATTENTION: Use the system model at your own risk and only if you know what you are doing! Changes to <xref href=\"TimeCockpit.Data.DataModel.Ownership.System\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TimeCockpit.Data.DataModel.Ownership.ApplicationSpecific\" data-throw-if-not-resolved=\"false\"></xref>\nmay break the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\nA newly created <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> is never in system mode! So nobody can temper with <xref href=\"TimeCockpit.Data.DataModel.Ownership.System\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TimeCockpit.Data.DataModel.Ownership.ApplicationSpecific\" data-throw-if-not-resolved=\"false\"></xref>\nentities accidentially.\n"
  syntax:
    content: public void EnableSystemMode()
    content.vb: Public Sub EnableSystemMode
  overload: TimeCockpit.Data.DataContext.EnableSystemMode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.DisableSystemMode
  commentId: M:TimeCockpit.Data.DataContext.DisableSystemMode
  id: DisableSystemMode
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: DisableSystemMode()
  nameWithType: DataContext.DisableSystemMode()
  fullName: TimeCockpit.Data.DataContext.DisableSystemMode()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSets the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> to a state where entities/properties that have either <xref href=\"TimeCockpit.Data.DataModel.Ownership.System\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"TimeCockpit.Data.DataModel.Ownership.ApplicationSpecific\" data-throw-if-not-resolved=\"false\"></xref> cannot be changed anymore. This is the default behavior.\n"
  syntax:
    content: public void DisableSystemMode()
    content.vb: Public Sub DisableSystemMode
  overload: TimeCockpit.Data.DataContext.DisableSystemMode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.DisableAuditTrail
  commentId: M:TimeCockpit.Data.DataContext.DisableAuditTrail
  id: DisableAuditTrail
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: DisableAuditTrail()
  nameWithType: DataContext.DisableAuditTrail()
  fullName: TimeCockpit.Data.DataContext.DisableAuditTrail()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nDisables the audit trail functionality for the current data context.\n"
  syntax:
    content: public void DisableAuditTrail()
    content.vb: Public Sub DisableAuditTrail
  overload: TimeCockpit.Data.DataContext.DisableAuditTrail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.EnableAuditTrail
  commentId: M:TimeCockpit.Data.DataContext.EnableAuditTrail
  id: EnableAuditTrail
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: EnableAuditTrail()
  nameWithType: DataContext.EnableAuditTrail()
  fullName: TimeCockpit.Data.DataContext.EnableAuditTrail()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nEnables the audit trail functionality for the current data context.\n"
  syntax:
    content: public void EnableAuditTrail()
    content.vb: Public Sub EnableAuditTrail
  overload: TimeCockpit.Data.DataContext.EnableAuditTrail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  commentId: M:TimeCockpit.Data.DataContext.SelectAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  id: SelectAsync(System.String,TimeCockpit.Data.Database.SelectCache)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectAsync(String, SelectCache)
  nameWithType: DataContext.SelectAsync(String, SelectCache)
  fullName: TimeCockpit.Data.DataContext.SelectAsync(System.String, TimeCockpit.Data.Database.SelectCache)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nInvokes the <xref href=\"TimeCockpit.Data.DataContext.Select(System.String%2cTimeCockpit.Data.Database.SelectCache)\" data-throw-if-not-resolved=\"false\"></xref> method asynchronously\n"
  syntax:
    content: >-
      [Obsolete("Avoid until task based implementation becomes available.")]

      public IObservable<EntityObject> SelectAsync(string query, SelectCache cache = null)
    parameters:
    - id: query
      type: System.String
      description: a TCQL query
    - id: cache
      type: TimeCockpit.Data.Database.SelectCache
      description: The entity object cache for reusing entities.
    return:
      type: System.IObservable{TimeCockpit.Data.EntityObject}
      description: returns a connectable observable producing the entity objects returned by the query.
    content.vb: >-
      <Obsolete("Avoid until task based implementation becomes available.")>

      Public Function SelectAsync(query As String, cache As SelectCache = Nothing) As IObservable(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.SelectAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Avoid until task based implementation becomes available.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  id: SaveObjectAsync(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SaveObjectAsync(EntityObject)
  nameWithType: DataContext.SaveObjectAsync(EntityObject)
  fullName: TimeCockpit.Data.DataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves a given <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: >-
      [Obsolete("Avoid until task based implementation becomes available.")]

      public IObservable<Unit> SaveObjectAsync(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to save.
    return:
      type: System.IObservable{System.Reactive.Unit}
      description: A instance of IConnectableObservable
    content.vb: >-
      <Obsolete("Avoid until task based implementation becomes available.")>

      Public Function SaveObjectAsync(entityObject As EntityObject) As IObservable(Of Unit)
  overload: TimeCockpit.Data.DataContext.SaveObjectAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Avoid until task based implementation becomes available.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  commentId: M:TimeCockpit.Data.DataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  id: SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(ChangeTracker)
  nameWithType: DataContext.SaveChangesAsync(ChangeTracker)
  fullName: TimeCockpit.Data.DataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSaves a given <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: >-
      [Obsolete("Avoid until task based implementation becomes available.")]

      public IObservable<int> SaveChangesAsync(ChangeTracker tracker)
    parameters:
    - id: tracker
      type: TimeCockpit.Data.ChangeTracker
      description: The tracker for which to save the content.
    return:
      type: System.IObservable{System.Int32}
      description: "\nA instance of IConnectableObservable\n"
    content.vb: >-
      <Obsolete("Avoid until task based implementation becomes available.")>

      Public Function SaveChangesAsync(tracker As ChangeTracker) As IObservable(Of Integer)
  overload: TimeCockpit.Data.DataContext.SaveChangesAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Avoid until task based implementation becomes available.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.DataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  id: DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: DeleteObjectAsync(EntityObject)
  nameWithType: DataContext.DeleteObjectAsync(EntityObject)
  fullName: TimeCockpit.Data.DataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nDeletes a given <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: >-
      [Obsolete("Avoid until task based implementation becomes available.")]

      public IObservable<Unit> DeleteObjectAsync(EntityObject entityObject)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> to save.
    return:
      type: System.IObservable{System.Reactive.Unit}
      description: A instance of IConnectableObservable
    content.vb: >-
      <Obsolete("Avoid until task based implementation becomes available.")>

      Public Function DeleteObjectAsync(entityObject As EntityObject) As IObservable(Of Unit)
  overload: TimeCockpit.Data.DataContext.DeleteObjectAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Avoid until task based implementation becomes available.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  commentId: M:TimeCockpit.Data.DataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  id: SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: SelectMultipleAsync(QueryRequest[], CancellationToken)
  nameWithType: DataContext.SelectMultipleAsync(QueryRequest[], CancellationToken)
  fullName: TimeCockpit.Data.DataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[], System.Threading.CancellationToken)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nIssues multiple queries.\n"
  syntax:
    content: public Task SelectMultipleAsync(QueryRequest[] queries, CancellationToken cancellationToken)
    parameters:
    - id: queries
      type: TimeCockpit.Data.QueryRequest[]
      description: The queries to execute.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel requests.
    return:
      type: System.Threading.Tasks.Task
      description: Returns the tasks producing the results of the queries, in corresponding order.
    content.vb: Public Function SelectMultipleAsync(queries As QueryRequest(), cancellationToken As CancellationToken) As Task
  overload: TimeCockpit.Data.DataContext.SelectMultipleAsync*
  nameWithType.vb: DataContext.SelectMultipleAsync(QueryRequest(), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest(), System.Threading.CancellationToken)
  name.vb: SelectMultipleAsync(QueryRequest(), CancellationToken)
- uid: TimeCockpit.Data.DataContext.GetScriptResultByListName(System.String,System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},System.String)
  commentId: M:TimeCockpit.Data.DataContext.GetScriptResultByListName(System.String,System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},System.String)
  id: GetScriptResultByListName(System.String,System.String,System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter},System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetScriptResultByListName(String, String, IEnumerable<QueryParameter>, String)
  nameWithType: DataContext.GetScriptResultByListName(String, String, IEnumerable<QueryParameter>, String)
  fullName: TimeCockpit.Data.DataContext.GetScriptResultByListName(System.String, System.String, System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nSelects the name of the by list.\n"
  syntax:
    content: public ICollection<EntityObject> GetScriptResultByListName(string listName, string methodName, IEnumerable<QueryParameter> queryParameters, string condition = null)
    parameters:
    - id: listName
      type: System.String
      description: Name of the list.
    - id: methodName
      type: System.String
      description: Name of the method.
    - id: queryParameters
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
      description: The query parameters.
    - id: condition
      type: System.String
      description: Additional query condition.
    return:
      type: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function GetScriptResultByListName(listName As String, methodName As String, queryParameters As IEnumerable(Of QueryParameter), condition As String = Nothing) As ICollection(Of EntityObject)
  overload: TimeCockpit.Data.DataContext.GetScriptResultByListName*
  nameWithType.vb: DataContext.GetScriptResultByListName(String, String, IEnumerable(Of QueryParameter), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.DataContext.GetScriptResultByListName(System.String, System.String, System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter), System.String)
  name.vb: GetScriptResultByListName(String, String, IEnumerable(Of QueryParameter), String)
- uid: TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName(System.String,System.String)
  commentId: M:TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName(System.String,System.String)
  id: GetScriptResultModelEntityByListName(System.String,System.String)
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: GetScriptResultModelEntityByListName(String, String)
  nameWithType: DataContext.GetScriptResultModelEntityByListName(String, String)
  fullName: TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName(System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the result model entity for the specified list.\n"
  syntax:
    content: public ModelEntityBase GetScriptResultModelEntityByListName(string listName, string methodName)
    parameters:
    - id: listName
      type: System.String
      description: Name of the list.
    - id: methodName
      type: System.String
      description: Name of the method.
    return:
      type: TimeCockpit.Data.DataModel.ModelEntityBase
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Function GetScriptResultModelEntityByListName(listName As String, methodName As String) As ModelEntityBase
  overload: TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.RefreshEnvironment
  commentId: M:TimeCockpit.Data.DataContext.RefreshEnvironment
  id: RefreshEnvironment
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: RefreshEnvironment()
  nameWithType: DataContext.RefreshEnvironment()
  fullName: TimeCockpit.Data.DataContext.RefreshEnvironment()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nRefreshes the environment.\n"
  syntax:
    content: public void RefreshEnvironment()
    content.vb: Public Sub RefreshEnvironment
  overload: TimeCockpit.Data.DataContext.RefreshEnvironment*
  implements:
  - TimeCockpit.Data.IDataContext.RefreshEnvironment
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.DataContext.Model
  commentId: P:TimeCockpit.Data.DataContext.Model
  id: Model
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: DataContext.Model
  fullName: TimeCockpit.Data.DataContext.Model
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> associated with this context.\n"
  remarks: "\nThe <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> of an instance of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> represents\nthe meta data storage of the current <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>. It describes how the \ndata that can be accessed with the current instance looks like.\n"
  syntax:
    content: public Model Model { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.DataModel.Model
    content.vb: Public ReadOnly Property Model As Model
  overload: TimeCockpit.Data.DataContext.Model*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataContext.Environment
  commentId: P:TimeCockpit.Data.DataContext.Environment
  id: Environment
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Environment
  nameWithType: DataContext.Environment
  fullName: TimeCockpit.Data.DataContext.Environment
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the environment for the current instance of <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public Environment Environment { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.Environment
    content.vb: Public ReadOnly Property Environment As Environment
  overload: TimeCockpit.Data.DataContext.Environment*
  implements:
  - TimeCockpit.Data.IDataContext.Environment
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataContext.DataContextType
  commentId: P:TimeCockpit.Data.DataContext.DataContextType
  id: DataContextType
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: DataContextType
  nameWithType: DataContext.DataContextType
  fullName: TimeCockpit.Data.DataContext.DataContextType
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the <xref href=\"TimeCockpit.Data.DataContext.DataContextType\" data-throw-if-not-resolved=\"false\"></xref> of the current instance of <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThe type of the data context may either be <xref href=\"TimeCockpit.Data.DataContext.DataContextType\" data-throw-if-not-resolved=\"false\"></xref>.Client or <xref href=\"TimeCockpit.Data.DataContext.DataContextType\" data-throw-if-not-resolved=\"false\"></xref>.Server.\nWhen a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> is instantiated with <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.Client no writable <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref> can \nbe requested from the <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref>. That is, no changes to the meta data of a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> can be made.\nIn contrast to that, a <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref> that has been instantiated with <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>.Server can request\na writable <xref href=\"TimeCockpit.Data.DataContext.Model\" data-throw-if-not-resolved=\"false\"></xref>. See also <xref href=\"TimeCockpit.Data.DataContext.GetWritableModel(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public DataContextType DataContextType { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.DataContextType
    content.vb: Public ReadOnly Property DataContextType As DataContextType
  overload: TimeCockpit.Data.DataContext.DataContextType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataContext.Localizer
  commentId: P:TimeCockpit.Data.DataContext.Localizer
  id: Localizer
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: Localizer
  nameWithType: DataContext.Localizer
  fullName: TimeCockpit.Data.DataContext.Localizer
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the localization implementation that is used.\n"
  syntax:
    content: public NameLocalizer Localizer { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.Localization.NameLocalizer
    content.vb: Public ReadOnly Property Localizer As NameLocalizer
  overload: TimeCockpit.Data.DataContext.Localizer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Model
  commentId: P:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Model
  id: TimeCockpit#Data#IDataContext#Model
  isEii: true
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: IDataContext.Model
  nameWithType: DataContext.IDataContext.Model
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.Model
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the model of the context.\n"
  syntax:
    content: Model IDataContext.Model { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.DataModel.Model
    content.vb: ReadOnly WriteOnly Property TimeCockpit.Data.IDataContext.Model As Model Implements IDataContext.Model
  overload: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Model*
  implements:
  - TimeCockpit.Data.IDataContext.Model
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.Model
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: TimeCockpit.Data.IDataContext.Model
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Localizer
  commentId: P:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Localizer
  id: TimeCockpit#Data#IDataContext#Localizer
  isEii: true
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: IDataContext.Localizer
  nameWithType: DataContext.IDataContext.Localizer
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.Localizer
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the localizer.\n"
  syntax:
    content: NameLocalizer IDataContext.Localizer { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.Localization.NameLocalizer
    content.vb: ReadOnly WriteOnly Property TimeCockpit.Data.IDataContext.Localizer As NameLocalizer Implements IDataContext.Localizer
  overload: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Localizer*
  implements:
  - TimeCockpit.Data.IDataContext.Localizer
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.Localizer
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: TimeCockpit.Data.IDataContext.Localizer
- uid: TimeCockpit.Data.DataContext.DbClient
  commentId: P:TimeCockpit.Data.DataContext.DbClient
  id: DbClient
  parent: TimeCockpit.Data.DataContext
  langs:
  - csharp
  - vb
  name: DbClient
  nameWithType: DataContext.DbClient
  fullName: TimeCockpit.Data.DataContext.DbClient
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data
  summary: "\nGets the reference to the underlying <xref href=\"TimeCockpit.Data.DataContext.DbClient\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  remarks: "\nThe <xref href=\"TimeCockpit.Data.DataContext.DbClient\" data-throw-if-not-resolved=\"false\"></xref> it the executing unit that performs all data access via the current \ninstance of the <xref href=\"TimeCockpit.Data.DataContext\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public DbClient DbClient { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.Database.DbClient
    content.vb: Public ReadOnly Property DbClient As DbClient
  overload: TimeCockpit.Data.DataContext.DbClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThrown if it is tried to set the property to null.\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: TimeCockpit.Data
  commentId: N:TimeCockpit.Data
  isExternal: true
  name: TimeCockpit.Data
  nameWithType: TimeCockpit.Data
  fullName: TimeCockpit.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TimeCockpit.Data.DynamicObject
  commentId: T:TimeCockpit.Data.DynamicObject
  parent: TimeCockpit.Data
  isExternal: true
  name: DynamicObject
  nameWithType: DynamicObject
  fullName: TimeCockpit.Data.DynamicObject
- uid: System.Dynamic.IDynamicMetaObjectProvider
  isExternal: true
  name: IDynamicMetaObjectProvider
  nameWithType: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: TimeCockpit.Data.IDataContext
  commentId: T:TimeCockpit.Data.IDataContext
  parent: TimeCockpit.Data
  isExternal: true
  name: IDataContext
  nameWithType: IDataContext
  fullName: TimeCockpit.Data.IDataContext
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  commentId: M:TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: SetMember(String, Object)
  nameWithType: DynamicObject.SetMember(String, Object)
  fullName: TimeCockpit.Data.DynamicObject.SetMember(System.String, System.Object)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
    name: SetMember
    nameWithType: DynamicObject.SetMember
    fullName: TimeCockpit.Data.DynamicObject.SetMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.SetMember(System.String,System.Object)
    name: SetMember
    nameWithType: DynamicObject.SetMember
    fullName: TimeCockpit.Data.DynamicObject.SetMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  parent: TimeCockpit.Data.DataContextScriptExtensions
  definition: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  name: ExecuteScript(ExecutionInfo)
  nameWithType: DataContextScriptExtensions.ExecuteScript(ExecutionInfo)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  parent: TimeCockpit.Data.DataContextScriptExtensions
  definition: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  name: ExecuteScript(ExecutionInfo, Stream)
  nameWithType: DataContextScriptExtensions.ExecuteScript(ExecutionInfo, Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo, System.IO.Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.Scripting.ExecutionInfo)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  parent: TimeCockpit.Data.DataContextScriptExtensions
  definition: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  name: ExecuteScriptReturnOutput(ExecutionInfo)
  nameWithType: DataContextScriptExtensions.ExecuteScriptReturnOutput(ExecutionInfo)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.Scripting.ExecutionInfo)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScriptReturnOutput
    nameWithType: DataContextScriptExtensions.ExecuteScriptReturnOutput
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScriptReturnOutput
    nameWithType: DataContextScriptExtensions.ExecuteScriptReturnOutput
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(System.Reflection.Assembly,System.String,System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(TimeCockpit.Data.DataContext,System.Reflection.Assembly,System.String,System.IO.Stream)
  parent: TimeCockpit.Data.DataContextScriptExtensions
  definition: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(TimeCockpit.Data.DataContext,System.Reflection.Assembly,System.String,System.IO.Stream)
  name: ExecuteScriptFromResource(Assembly, String, Stream)
  nameWithType: DataContextScriptExtensions.ExecuteScriptFromResource(Assembly, String, Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(System.Reflection.Assembly, System.String, System.IO.Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(System.Reflection.Assembly,System.String,System.IO.Stream)
    name: ExecuteScriptFromResource
    nameWithType: DataContextScriptExtensions.ExecuteScriptFromResource
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(System.Reflection.Assembly,System.String,System.IO.Stream)
    name: ExecuteScriptFromResource
    nameWithType: DataContextScriptExtensions.ExecuteScriptFromResource
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  parent: TimeCockpit.Data.DataContextScriptExtensions
  definition: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  name: GetScriptResult(ExecutionInfo, Stream)
  nameWithType: DataContextScriptExtensions.GetScriptResult(ExecutionInfo, Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.Scripting.ExecutionInfo, System.IO.Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: GetScriptResult
    nameWithType: DataContextScriptExtensions.GetScriptResult
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: GetScriptResult
    nameWithType: DataContextScriptExtensions.GetScriptResult
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
  parent: TimeCockpit.Data.DataContextScriptExtensions
  definition: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
  name: GetFunctionScriptResult<T>(ExecutionInfo, String, Object[], Stream)
  nameWithType: DataContextScriptExtensions.GetFunctionScriptResult<T>(ExecutionInfo, String, Object[], Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult<T>(TimeCockpit.Data.Scripting.ExecutionInfo, System.String, System.Object[], System.IO.Stream)
  nameWithType.vb: DataContextScriptExtensions.GetFunctionScriptResult(Of T)(ExecutionInfo, String, Object(), Stream)
  fullName.vb: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult(Of T)(TimeCockpit.Data.Scripting.ExecutionInfo, System.String, System.Object(), System.IO.Stream)
  name.vb: GetFunctionScriptResult(Of T)(ExecutionInfo, String, Object(), Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
    name: GetFunctionScriptResult<T>
    nameWithType: DataContextScriptExtensions.GetFunctionScriptResult<T>
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
    name: GetFunctionScriptResult(Of T)
    nameWithType: DataContextScriptExtensions.GetFunctionScriptResult(Of T)
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  isExternal: true
  name: ExecuteScript(DataContext, ExecutionInfo)
  nameWithType: DataContextScriptExtensions.ExecuteScript(DataContext, ExecutionInfo)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext, TimeCockpit.Data.Scripting.ExecutionInfo)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContextScriptExtensions
  commentId: T:TimeCockpit.Data.DataContextScriptExtensions
  parent: TimeCockpit.Data
  isExternal: true
  name: DataContextScriptExtensions
  nameWithType: DataContextScriptExtensions
  fullName: TimeCockpit.Data.DataContextScriptExtensions
- uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  isExternal: true
  name: ExecuteScript(DataContext, ExecutionInfo, Stream)
  nameWithType: DataContextScriptExtensions.ExecuteScript(DataContext, ExecutionInfo, Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext, TimeCockpit.Data.Scripting.ExecutionInfo, System.IO.Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: ExecuteScript
    nameWithType: DataContextScriptExtensions.ExecuteScript
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
  isExternal: true
  name: ExecuteScriptReturnOutput(DataContext, ExecutionInfo)
  nameWithType: DataContextScriptExtensions.ExecuteScriptReturnOutput(DataContext, ExecutionInfo)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.DataContext, TimeCockpit.Data.Scripting.ExecutionInfo)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScriptReturnOutput
    nameWithType: DataContextScriptExtensions.ExecuteScriptReturnOutput
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo)
    name: ExecuteScriptReturnOutput
    nameWithType: DataContextScriptExtensions.ExecuteScriptReturnOutput
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptReturnOutput
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(TimeCockpit.Data.DataContext,System.Reflection.Assembly,System.String,System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(TimeCockpit.Data.DataContext,System.Reflection.Assembly,System.String,System.IO.Stream)
  isExternal: true
  name: ExecuteScriptFromResource(DataContext, Assembly, String, Stream)
  nameWithType: DataContextScriptExtensions.ExecuteScriptFromResource(DataContext, Assembly, String, Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(TimeCockpit.Data.DataContext, System.Reflection.Assembly, System.String, System.IO.Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(TimeCockpit.Data.DataContext,System.Reflection.Assembly,System.String,System.IO.Stream)
    name: ExecuteScriptFromResource
    nameWithType: DataContextScriptExtensions.ExecuteScriptFromResource
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource(TimeCockpit.Data.DataContext,System.Reflection.Assembly,System.String,System.IO.Stream)
    name: ExecuteScriptFromResource
    nameWithType: DataContextScriptExtensions.ExecuteScriptFromResource
    fullName: TimeCockpit.Data.DataContextScriptExtensions.ExecuteScriptFromResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
  isExternal: true
  name: GetScriptResult(DataContext, ExecutionInfo, Stream)
  nameWithType: DataContextScriptExtensions.GetScriptResult(DataContext, ExecutionInfo, Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.DataContext, TimeCockpit.Data.Scripting.ExecutionInfo, System.IO.Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: GetScriptResult
    nameWithType: DataContextScriptExtensions.GetScriptResult
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.IO.Stream)
    name: GetScriptResult
    nameWithType: DataContextScriptExtensions.GetScriptResult
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetScriptResult
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
  commentId: M:TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
  isExternal: true
  name: GetFunctionScriptResult<T>(DataContext, ExecutionInfo, String, Object[], Stream)
  nameWithType: DataContextScriptExtensions.GetFunctionScriptResult<T>(DataContext, ExecutionInfo, String, Object[], Stream)
  fullName: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult<T>(TimeCockpit.Data.DataContext, TimeCockpit.Data.Scripting.ExecutionInfo, System.String, System.Object[], System.IO.Stream)
  nameWithType.vb: DataContextScriptExtensions.GetFunctionScriptResult(Of T)(DataContext, ExecutionInfo, String, Object(), Stream)
  fullName.vb: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult(Of T)(TimeCockpit.Data.DataContext, TimeCockpit.Data.Scripting.ExecutionInfo, System.String, System.Object(), System.IO.Stream)
  name.vb: GetFunctionScriptResult(Of T)(DataContext, ExecutionInfo, String, Object(), Stream)
  spec.csharp:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
    name: GetFunctionScriptResult<T>
    nameWithType: DataContextScriptExtensions.GetFunctionScriptResult<T>
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult``1(TimeCockpit.Data.DataContext,TimeCockpit.Data.Scripting.ExecutionInfo,System.String,System.Object[],System.IO.Stream)
    name: GetFunctionScriptResult(Of T)
    nameWithType: DataContextScriptExtensions.GetFunctionScriptResult(Of T)
    fullName: TimeCockpit.Data.DataContextScriptExtensions.GetFunctionScriptResult(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataContext
    name: DataContext
    nameWithType: DataContext
    fullName: TimeCockpit.Data.DataContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Scripting.ExecutionInfo
    name: ExecutionInfo
    nameWithType: ExecutionInfo
    fullName: TimeCockpit.Data.Scripting.ExecutionInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveObjectAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveObjectAsync
  isExternal: true
  name: IDataContext.SaveObjectAsync
  nameWithType: DataContext.IDataContext.SaveObjectAsync
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.SaveObjectAsync
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.SaveObjectAsync
  name.vb: TimeCockpit.Data.IDataContext.SaveObjectAsync
- uid: TimeCockpit.Data.IDataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.IDataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: SaveObjectAsync(EntityObject)
  nameWithType: IDataContext.SaveObjectAsync(EntityObject)
  fullName: TimeCockpit.Data.IDataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
    name: SaveObjectAsync
    nameWithType: IDataContext.SaveObjectAsync
    fullName: TimeCockpit.Data.IDataContext.SaveObjectAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.SaveObjectAsync(TimeCockpit.Data.EntityObject)
    name: SaveObjectAsync
    nameWithType: IDataContext.SaveObjectAsync
    fullName: TimeCockpit.Data.IDataContext.SaveObjectAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  parent: TimeCockpit.Data
  isExternal: true
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#DeleteObjectAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#DeleteObjectAsync
  isExternal: true
  name: IDataContext.DeleteObjectAsync
  nameWithType: DataContext.IDataContext.DeleteObjectAsync
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.DeleteObjectAsync
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.DeleteObjectAsync
  name.vb: TimeCockpit.Data.IDataContext.DeleteObjectAsync
- uid: TimeCockpit.Data.IDataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  commentId: M:TimeCockpit.Data.IDataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: DeleteObjectAsync(EntityObject)
  nameWithType: IDataContext.DeleteObjectAsync(EntityObject)
  fullName: TimeCockpit.Data.IDataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
    name: DeleteObjectAsync
    nameWithType: IDataContext.DeleteObjectAsync
    fullName: TimeCockpit.Data.IDataContext.DeleteObjectAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.DeleteObjectAsync(TimeCockpit.Data.EntityObject)
    name: DeleteObjectAsync
    nameWithType: IDataContext.DeleteObjectAsync
    fullName: TimeCockpit.Data.IDataContext.DeleteObjectAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveChangesAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SaveChangesAsync
  isExternal: true
  name: IDataContext.SaveChangesAsync
  nameWithType: DataContext.IDataContext.SaveChangesAsync
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.SaveChangesAsync
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.SaveChangesAsync
  name.vb: TimeCockpit.Data.IDataContext.SaveChangesAsync
- uid: TimeCockpit.Data.IDataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  commentId: M:TimeCockpit.Data.IDataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: SaveChangesAsync(ChangeTracker)
  nameWithType: IDataContext.SaveChangesAsync(ChangeTracker)
  fullName: TimeCockpit.Data.IDataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
    name: SaveChangesAsync
    nameWithType: IDataContext.SaveChangesAsync
    fullName: TimeCockpit.Data.IDataContext.SaveChangesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.ChangeTracker
    name: ChangeTracker
    nameWithType: ChangeTracker
    fullName: TimeCockpit.Data.ChangeTracker
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.SaveChangesAsync(TimeCockpit.Data.ChangeTracker)
    name: SaveChangesAsync
    nameWithType: IDataContext.SaveChangesAsync
    fullName: TimeCockpit.Data.IDataContext.SaveChangesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.ChangeTracker
    name: ChangeTracker
    nameWithType: ChangeTracker
    fullName: TimeCockpit.Data.ChangeTracker
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.ChangeTracker
  commentId: T:TimeCockpit.Data.ChangeTracker
  parent: TimeCockpit.Data
  isExternal: true
  name: ChangeTracker
  nameWithType: ChangeTracker
  fullName: TimeCockpit.Data.ChangeTracker
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SelectMultipleAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#SelectMultipleAsync
  isExternal: true
  name: IDataContext.SelectMultipleAsync
  nameWithType: DataContext.IDataContext.SelectMultipleAsync
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.SelectMultipleAsync
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.SelectMultipleAsync
  name.vb: TimeCockpit.Data.IDataContext.SelectMultipleAsync
- uid: TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  commentId: M:TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: SelectMultipleAsync(QueryRequest[], CancellationToken)
  nameWithType: IDataContext.SelectMultipleAsync(QueryRequest[], CancellationToken)
  fullName: TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[], System.Threading.CancellationToken)
  nameWithType.vb: IDataContext.SelectMultipleAsync(QueryRequest(), CancellationToken)
  fullName.vb: TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest(), System.Threading.CancellationToken)
  name.vb: SelectMultipleAsync(QueryRequest(), CancellationToken)
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
    name: SelectMultipleAsync
    nameWithType: IDataContext.SelectMultipleAsync
    fullName: TimeCockpit.Data.IDataContext.SelectMultipleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.QueryRequest
    name: QueryRequest
    nameWithType: QueryRequest
    fullName: TimeCockpit.Data.QueryRequest
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.SelectMultipleAsync(TimeCockpit.Data.QueryRequest[],System.Threading.CancellationToken)
    name: SelectMultipleAsync
    nameWithType: IDataContext.SelectMultipleAsync
    fullName: TimeCockpit.Data.IDataContext.SelectMultipleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.QueryRequest
    name: QueryRequest
    nameWithType: QueryRequest
    fullName: TimeCockpit.Data.QueryRequest
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.QueryRequest[]
  isExternal: true
  name: QueryRequest[]
  nameWithType: QueryRequest[]
  fullName: TimeCockpit.Data.QueryRequest[]
  nameWithType.vb: QueryRequest()
  fullName.vb: TimeCockpit.Data.QueryRequest()
  name.vb: QueryRequest()
  spec.csharp:
  - uid: TimeCockpit.Data.QueryRequest
    name: QueryRequest
    nameWithType: QueryRequest
    fullName: TimeCockpit.Data.QueryRequest
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TimeCockpit.Data.QueryRequest
    name: QueryRequest
    nameWithType: QueryRequest
    fullName: TimeCockpit.Data.QueryRequest
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: TimeCockpit.Data.DataContext.ExecuteAction*
  commentId: Overload:TimeCockpit.Data.DataContext.ExecuteAction
  isExternal: true
  name: ExecuteAction
  nameWithType: DataContext.ExecuteAction
  fullName: TimeCockpit.Data.DataContext.ExecuteAction
- uid: TimeCockpit.Data.IDataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  commentId: M:TimeCockpit.Data.IDataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: ExecuteAction(ModelAction, ExecutionContext)
  nameWithType: IDataContext.ExecuteAction(ModelAction, ExecutionContext)
  fullName: TimeCockpit.Data.IDataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction, TimeCockpit.Data.DataModel.Actions.ExecutionContext)
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
    name: ExecuteAction
    nameWithType: IDataContext.ExecuteAction
    fullName: TimeCockpit.Data.IDataContext.ExecuteAction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.Actions.ModelAction
    name: ModelAction
    nameWithType: ModelAction
    fullName: TimeCockpit.Data.DataModel.Actions.ModelAction
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.Actions.ExecutionContext
    name: ExecutionContext
    nameWithType: ExecutionContext
    fullName: TimeCockpit.Data.DataModel.Actions.ExecutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.ExecuteAction(TimeCockpit.Data.DataModel.Actions.ModelAction,TimeCockpit.Data.DataModel.Actions.ExecutionContext)
    name: ExecuteAction
    nameWithType: IDataContext.ExecuteAction
    fullName: TimeCockpit.Data.IDataContext.ExecuteAction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.DataModel.Actions.ModelAction
    name: ModelAction
    nameWithType: ModelAction
    fullName: TimeCockpit.Data.DataModel.Actions.ModelAction
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.Actions.ExecutionContext
    name: ExecutionContext
    nameWithType: ExecutionContext
    fullName: TimeCockpit.Data.DataModel.Actions.ExecutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Actions.ModelAction
  commentId: T:TimeCockpit.Data.DataModel.Actions.ModelAction
  parent: TimeCockpit.Data.DataModel.Actions
  isExternal: true
  name: ModelAction
  nameWithType: ModelAction
  fullName: TimeCockpit.Data.DataModel.Actions.ModelAction
- uid: TimeCockpit.Data.DataModel.Actions.ExecutionContext
  commentId: T:TimeCockpit.Data.DataModel.Actions.ExecutionContext
  parent: TimeCockpit.Data.DataModel.Actions
  isExternal: true
  name: ExecutionContext
  nameWithType: ExecutionContext
  fullName: TimeCockpit.Data.DataModel.Actions.ExecutionContext
- uid: TimeCockpit.Data.ActionResult
  commentId: T:TimeCockpit.Data.ActionResult
  parent: TimeCockpit.Data
  isExternal: true
  name: ActionResult
  nameWithType: ActionResult
  fullName: TimeCockpit.Data.ActionResult
- uid: TimeCockpit.Data.DataModel.Actions
  commentId: N:TimeCockpit.Data.DataModel.Actions
  isExternal: true
  name: TimeCockpit.Data.DataModel.Actions
  nameWithType: TimeCockpit.Data.DataModel.Actions
  fullName: TimeCockpit.Data.DataModel.Actions
- uid: TimeCockpit.Data.DataContext.GetScriptListResultAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.GetScriptListResultAsync
  isExternal: true
  name: GetScriptListResultAsync
  nameWithType: DataContext.GetScriptListResultAsync
  fullName: TimeCockpit.Data.DataContext.GetScriptListResultAsync
- uid: TimeCockpit.Data.IDataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  commentId: M:TimeCockpit.Data.IDataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: GetScriptListResultAsync(ScriptListRequest)
  nameWithType: IDataContext.GetScriptListResultAsync(ScriptListRequest)
  fullName: TimeCockpit.Data.IDataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
    name: GetScriptListResultAsync
    nameWithType: IDataContext.GetScriptListResultAsync
    fullName: TimeCockpit.Data.IDataContext.GetScriptListResultAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.ScriptListRequest
    name: ScriptListRequest
    nameWithType: ScriptListRequest
    fullName: TimeCockpit.Data.ScriptListRequest
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.GetScriptListResultAsync(TimeCockpit.Data.ScriptListRequest)
    name: GetScriptListResultAsync
    nameWithType: IDataContext.GetScriptListResultAsync
    fullName: TimeCockpit.Data.IDataContext.GetScriptListResultAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeCockpit.Data.ScriptListRequest
    name: ScriptListRequest
    nameWithType: ScriptListRequest
    fullName: TimeCockpit.Data.ScriptListRequest
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.ScriptListRequest
  commentId: T:TimeCockpit.Data.ScriptListRequest
  parent: TimeCockpit.Data
  isExternal: true
  name: ScriptListRequest
  nameWithType: ScriptListRequest
  fullName: TimeCockpit.Data.ScriptListRequest
- uid: System.Threading.Tasks.Task{TimeCockpit.Data.EntityObject[]}
  commentId: T:System.Threading.Tasks.Task{TimeCockpit.Data.EntityObject[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EntityObject[]>
  nameWithType: Task<EntityObject[]>
  fullName: System.Threading.Tasks.Task<TimeCockpit.Data.EntityObject[]>
  nameWithType.vb: Task(Of EntityObject())
  fullName.vb: System.Threading.Tasks.Task(Of TimeCockpit.Data.EntityObject())
  name.vb: Task(Of EntityObject())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.Create*
  commentId: Overload:TimeCockpit.Data.DataContext.Create
  isExternal: true
  name: Create
  nameWithType: DataContext.Create
  fullName: TimeCockpit.Data.DataContext.Create
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: TimeCockpit.Data.DataContextSettings
  commentId: T:TimeCockpit.Data.DataContextSettings
  parent: TimeCockpit.Data
  isExternal: true
  name: DataContextSettings
  nameWithType: DataContextSettings
  fullName: TimeCockpit.Data.DataContextSettings
- uid: TimeCockpit.Data.DataContext
  commentId: T:TimeCockpit.Data.DataContext
  parent: TimeCockpit.Data
  isExternal: true
  name: DataContext
  nameWithType: DataContext
  fullName: TimeCockpit.Data.DataContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeCockpit.Data.DataContext.GetSettings*
  commentId: Overload:TimeCockpit.Data.DataContext.GetSettings
  isExternal: true
  name: GetSettings
  nameWithType: DataContext.GetSettings
  fullName: TimeCockpit.Data.DataContext.GetSettings
- uid: WebManagementService.ConnectionInformation
  isExternal: true
  name: ConnectionInformation
  nameWithType: ConnectionInformation
  fullName: WebManagementService.ConnectionInformation
- uid: TimeCockpit.Data.DataContext.GetVersionInformation*
  commentId: Overload:TimeCockpit.Data.DataContext.GetVersionInformation
  isExternal: true
  name: GetVersionInformation
  nameWithType: DataContext.GetVersionInformation
  fullName: TimeCockpit.Data.DataContext.GetVersionInformation
- uid: WebManagementService.VersionInformationOverview
  isExternal: true
  name: VersionInformationOverview
  nameWithType: VersionInformationOverview
  fullName: WebManagementService.VersionInformationOverview
- uid: TimeCockpit.Data.DataContext.SelectAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectAsync
  isExternal: true
  name: SelectAsync
  nameWithType: DataContext.SelectAsync
  fullName: TimeCockpit.Data.DataContext.SelectAsync
- uid: System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
  commentId: T:System.Collections.Generic.IEnumerable{TimeCockpit.Data.QueryLanguage.QueryParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<QueryParameter>
  nameWithType: IEnumerable<QueryParameter>
  fullName: System.Collections.Generic.IEnumerable<TimeCockpit.Data.QueryLanguage.QueryParameter>
  nameWithType.vb: IEnumerable(Of QueryParameter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.QueryLanguage.QueryParameter)
  name.vb: IEnumerable(Of QueryParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.QueryLanguage.QueryParameter
    name: QueryParameter
    nameWithType: QueryParameter
    fullName: TimeCockpit.Data.QueryLanguage.QueryParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Database.SelectCache
  commentId: T:TimeCockpit.Data.Database.SelectCache
  parent: TimeCockpit.Data.Database
  isExternal: true
  name: SelectCache
  nameWithType: SelectCache
  fullName: TimeCockpit.Data.Database.SelectCache
- uid: System.IObservable{TimeCockpit.Data.EntityObject}
  commentId: T:System.IObservable{TimeCockpit.Data.EntityObject}
  parent: System
  definition: System.IObservable`1
  name: IObservable<EntityObject>
  nameWithType: IObservable<EntityObject>
  fullName: System.IObservable<TimeCockpit.Data.EntityObject>
  nameWithType.vb: IObservable(Of EntityObject)
  fullName.vb: System.IObservable(Of TimeCockpit.Data.EntityObject)
  name.vb: IObservable(Of EntityObject)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.Database
  commentId: N:TimeCockpit.Data.Database
  isExternal: true
  name: TimeCockpit.Data.Database
  nameWithType: TimeCockpit.Data.Database
  fullName: TimeCockpit.Data.Database
- uid: System.IObservable`1
  commentId: T:System.IObservable`1
  isExternal: true
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.QueryLanguage.Syntax.Query
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.Query
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: Query
  nameWithType: Query
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.Query
- uid: TimeCockpit.Data.QueryLanguage.Syntax
  commentId: N:TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: TimeCockpit.Data.QueryLanguage.Syntax
  nameWithType: TimeCockpit.Data.QueryLanguage.Syntax
  fullName: TimeCockpit.Data.QueryLanguage.Syntax
- uid: TimeCockpit.Data.DataContext.SelectSingleAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectSingleAsync
  isExternal: true
  name: SelectSingleAsync
  nameWithType: DataContext.SelectSingleAsync
  fullName: TimeCockpit.Data.DataContext.SelectSingleAsync
- uid: TimeCockpit.Data.DataContext.SelectTopAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectTopAsync
  isExternal: true
  name: SelectTopAsync
  nameWithType: DataContext.SelectTopAsync
  fullName: TimeCockpit.Data.DataContext.SelectTopAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeCockpit.Data.IEntityObject
  commentId: T:TimeCockpit.Data.IEntityObject
  parent: TimeCockpit.Data
  isExternal: true
  name: IEntityObject
  nameWithType: IEntityObject
  fullName: TimeCockpit.Data.IEntityObject
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data.DataContext.ReadLocalizedTextValues*
  commentId: Overload:TimeCockpit.Data.DataContext.ReadLocalizedTextValues
  isExternal: true
  name: ReadLocalizedTextValues
  nameWithType: DataContext.ReadLocalizedTextValues
  fullName: TimeCockpit.Data.DataContext.ReadLocalizedTextValues
- uid: TimeCockpit.Data.DataContext.InitializeLocalizedTextValues*
  commentId: Overload:TimeCockpit.Data.DataContext.InitializeLocalizedTextValues
  isExternal: true
  name: InitializeLocalizedTextValues
  nameWithType: DataContext.InitializeLocalizedTextValues
  fullName: TimeCockpit.Data.DataContext.InitializeLocalizedTextValues
- uid: TimeCockpit.Data.DataContext.Select*
  commentId: Overload:TimeCockpit.Data.DataContext.Select
  isExternal: true
  name: Select
  nameWithType: DataContext.Select
  fullName: TimeCockpit.Data.DataContext.Select
- uid: System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
  commentId: T:System.Collections.Generic.ICollection{TimeCockpit.Data.EntityObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<EntityObject>
  nameWithType: ICollection<EntityObject>
  fullName: System.Collections.Generic.ICollection<TimeCockpit.Data.EntityObject>
  nameWithType.vb: ICollection(Of EntityObject)
  fullName.vb: System.Collections.Generic.ICollection(Of TimeCockpit.Data.EntityObject)
  name.vb: ICollection(Of EntityObject)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.SelectTop*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectTop
  isExternal: true
  name: SelectTop
  nameWithType: DataContext.SelectTop
  fullName: TimeCockpit.Data.DataContext.SelectTop
- uid: TimeCockpit.Data.DataContext.SelectWithParameters*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectWithParameters
  isExternal: true
  name: SelectWithParameters
  nameWithType: DataContext.SelectWithParameters
  fullName: TimeCockpit.Data.DataContext.SelectWithParameters
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Object, Object>>
  nameWithType: IEnumerable<KeyValuePair<Object, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Object, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.SelectSingle*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectSingle
  isExternal: true
  name: SelectSingle
  nameWithType: DataContext.SelectSingle
  fullName: TimeCockpit.Data.DataContext.SelectSingle
- uid: TimeCockpit.Data.DataContext.SelectSingleWithParameters*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectSingleWithParameters
  isExternal: true
  name: SelectSingleWithParameters
  nameWithType: DataContext.SelectSingleWithParameters
  fullName: TimeCockpit.Data.DataContext.SelectSingleWithParameters
- uid: TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync
  isExternal: true
  name: SelectSingleWithParametersAsync
  nameWithType: DataContext.SelectSingleWithParametersAsync
  fullName: TimeCockpit.Data.DataContext.SelectSingleWithParametersAsync
- uid: TimeCockpit.Data.DataContext.SaveModel*
  commentId: Overload:TimeCockpit.Data.DataContext.SaveModel
  isExternal: true
  name: SaveModel
  nameWithType: DataContext.SaveModel
  fullName: TimeCockpit.Data.DataContext.SaveModel
- uid: TimeCockpit.Data.DataModel.Model
  commentId: T:TimeCockpit.Data.DataModel.Model
  parent: TimeCockpit.Data.DataModel
  isExternal: true
  name: Model
  nameWithType: Model
  fullName: TimeCockpit.Data.DataModel.Model
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: true
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: TimeCockpit.Data.DataContext.SaveModelIfValid*
  commentId: Overload:TimeCockpit.Data.DataContext.SaveModelIfValid
  isExternal: true
  name: SaveModelIfValid
  nameWithType: DataContext.SaveModelIfValid
  fullName: TimeCockpit.Data.DataContext.SaveModelIfValid
- uid: TimeCockpit.Data.DataContext.RefreshModel*
  commentId: Overload:TimeCockpit.Data.DataContext.RefreshModel
  isExternal: true
  name: RefreshModel
  nameWithType: DataContext.RefreshModel
  fullName: TimeCockpit.Data.DataContext.RefreshModel
- uid: TimeCockpit.Data.IDataContext.RefreshModel
  commentId: M:TimeCockpit.Data.IDataContext.RefreshModel
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: RefreshModel()
  nameWithType: IDataContext.RefreshModel()
  fullName: TimeCockpit.Data.IDataContext.RefreshModel()
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.RefreshModel
    name: RefreshModel
    nameWithType: IDataContext.RefreshModel
    fullName: TimeCockpit.Data.IDataContext.RefreshModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.RefreshModel
    name: RefreshModel
    nameWithType: IDataContext.RefreshModel
    fullName: TimeCockpit.Data.IDataContext.RefreshModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.EnforceRefreshModel*
  commentId: Overload:TimeCockpit.Data.DataContext.EnforceRefreshModel
  isExternal: true
  name: EnforceRefreshModel
  nameWithType: DataContext.EnforceRefreshModel
  fullName: TimeCockpit.Data.DataContext.EnforceRefreshModel
- uid: TimeCockpit.Data.DataContext.GetWritableModel*
  commentId: Overload:TimeCockpit.Data.DataContext.GetWritableModel
  isExternal: true
  name: GetWritableModel
  nameWithType: DataContext.GetWritableModel
  fullName: TimeCockpit.Data.DataContext.GetWritableModel
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: TimeCockpit.Data.DataContext.SaveObject*
  commentId: Overload:TimeCockpit.Data.DataContext.SaveObject
  isExternal: true
  name: SaveObject
  nameWithType: DataContext.SaveObject
  fullName: TimeCockpit.Data.DataContext.SaveObject
- uid: TimeCockpit.Data.SaveSettings
  commentId: T:TimeCockpit.Data.SaveSettings
  parent: TimeCockpit.Data
  isExternal: true
  name: SaveSettings
  nameWithType: SaveSettings
  fullName: TimeCockpit.Data.SaveSettings
- uid: TimeCockpit.Data.DataContext.SaveChanges*
  commentId: Overload:TimeCockpit.Data.DataContext.SaveChanges
  isExternal: true
  name: SaveChanges
  nameWithType: DataContext.SaveChanges
  fullName: TimeCockpit.Data.DataContext.SaveChanges
- uid: TimeCockpit.Data.DataContext.DeleteObject*
  commentId: Overload:TimeCockpit.Data.DataContext.DeleteObject
  isExternal: true
  name: DeleteObject
  nameWithType: DataContext.DeleteObject
  fullName: TimeCockpit.Data.DataContext.DeleteObject
- uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  commentId: M:TimeCockpit.Data.DynamicObject.GetMember(System.String)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: GetMember(String)
  nameWithType: DynamicObject.GetMember(String)
  fullName: TimeCockpit.Data.DynamicObject.GetMember(System.String)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
    name: GetMember
    nameWithType: DynamicObject.GetMember
    fullName: TimeCockpit.Data.DynamicObject.GetMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.GetMember(System.String)
    name: GetMember
    nameWithType: DynamicObject.GetMember
    fullName: TimeCockpit.Data.DynamicObject.GetMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.GetMember*
  commentId: Overload:TimeCockpit.Data.DataContext.GetMember
  isExternal: true
  name: GetMember
  nameWithType: DataContext.GetMember
  fullName: TimeCockpit.Data.DataContext.GetMember
- uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.DynamicObject
  isExternal: true
  name: GetMetaObject(Expression)
  nameWithType: DynamicObject.GetMetaObject(Expression)
  fullName: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: DynamicObject.GetMetaObject
    fullName: TimeCockpit.Data.DynamicObject.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: DynamicObject.GetMetaObject
    fullName: TimeCockpit.Data.DynamicObject.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.GetMetaObject*
  commentId: Overload:TimeCockpit.Data.DataContext.GetMetaObject
  isExternal: true
  name: GetMetaObject
  nameWithType: DataContext.GetMetaObject
  fullName: TimeCockpit.Data.DataContext.GetMetaObject
- uid: System.Linq.Expressions.Expression
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Dynamic.DynamicMetaObject
  isExternal: true
  name: DynamicMetaObject
  nameWithType: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: TimeCockpit.Data.DataContext.IsDirty*
  commentId: Overload:TimeCockpit.Data.DataContext.IsDirty
  isExternal: true
  name: IsDirty
  nameWithType: DataContext.IsDirty
  fullName: TimeCockpit.Data.DataContext.IsDirty
- uid: TimeCockpit.Data.DataContext.Dispose*
  commentId: Overload:TimeCockpit.Data.DataContext.Dispose
  isExternal: true
  name: Dispose
  nameWithType: DataContext.Dispose
  fullName: TimeCockpit.Data.DataContext.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.EnableSystemMode*
  commentId: Overload:TimeCockpit.Data.DataContext.EnableSystemMode
  isExternal: true
  name: EnableSystemMode
  nameWithType: DataContext.EnableSystemMode
  fullName: TimeCockpit.Data.DataContext.EnableSystemMode
- uid: TimeCockpit.Data.DataContext.DisableSystemMode*
  commentId: Overload:TimeCockpit.Data.DataContext.DisableSystemMode
  isExternal: true
  name: DisableSystemMode
  nameWithType: DataContext.DisableSystemMode
  fullName: TimeCockpit.Data.DataContext.DisableSystemMode
- uid: TimeCockpit.Data.DataContext.DisableAuditTrail*
  commentId: Overload:TimeCockpit.Data.DataContext.DisableAuditTrail
  isExternal: true
  name: DisableAuditTrail
  nameWithType: DataContext.DisableAuditTrail
  fullName: TimeCockpit.Data.DataContext.DisableAuditTrail
- uid: TimeCockpit.Data.DataContext.EnableAuditTrail*
  commentId: Overload:TimeCockpit.Data.DataContext.EnableAuditTrail
  isExternal: true
  name: EnableAuditTrail
  nameWithType: DataContext.EnableAuditTrail
  fullName: TimeCockpit.Data.DataContext.EnableAuditTrail
- uid: TimeCockpit.Data.DataContext.SaveObjectAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.SaveObjectAsync
  isExternal: true
  name: SaveObjectAsync
  nameWithType: DataContext.SaveObjectAsync
  fullName: TimeCockpit.Data.DataContext.SaveObjectAsync
- uid: System.IObservable{System.Reactive.Unit}
  commentId: T:System.IObservable{System.Reactive.Unit}
  parent: System
  definition: System.IObservable`1
  name: IObservable<Unit>
  nameWithType: IObservable<Unit>
  fullName: System.IObservable<System.Reactive.Unit>
  nameWithType.vb: IObservable(Of Unit)
  fullName.vb: System.IObservable(Of System.Reactive.Unit)
  name.vb: IObservable(Of Unit)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reactive.Unit
    name: Unit
    nameWithType: Unit
    fullName: System.Reactive.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reactive.Unit
    name: Unit
    nameWithType: Unit
    fullName: System.Reactive.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.SaveChangesAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.SaveChangesAsync
  isExternal: true
  name: SaveChangesAsync
  nameWithType: DataContext.SaveChangesAsync
  fullName: TimeCockpit.Data.DataContext.SaveChangesAsync
- uid: System.IObservable{System.Int32}
  commentId: T:System.IObservable{System.Int32}
  parent: System
  definition: System.IObservable`1
  name: IObservable<Int32>
  nameWithType: IObservable<Int32>
  fullName: System.IObservable<System.Int32>
  nameWithType.vb: IObservable(Of Int32)
  fullName.vb: System.IObservable(Of System.Int32)
  name.vb: IObservable(Of Int32)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.DeleteObjectAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.DeleteObjectAsync
  isExternal: true
  name: DeleteObjectAsync
  nameWithType: DataContext.DeleteObjectAsync
  fullName: TimeCockpit.Data.DataContext.DeleteObjectAsync
- uid: TimeCockpit.Data.DataContext.SelectMultipleAsync*
  commentId: Overload:TimeCockpit.Data.DataContext.SelectMultipleAsync
  isExternal: true
  name: SelectMultipleAsync
  nameWithType: DataContext.SelectMultipleAsync
  fullName: TimeCockpit.Data.DataContext.SelectMultipleAsync
- uid: TimeCockpit.Data.DataContext.GetScriptResultByListName*
  commentId: Overload:TimeCockpit.Data.DataContext.GetScriptResultByListName
  isExternal: true
  name: GetScriptResultByListName
  nameWithType: DataContext.GetScriptResultByListName
  fullName: TimeCockpit.Data.DataContext.GetScriptResultByListName
- uid: TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName*
  commentId: Overload:TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName
  isExternal: true
  name: GetScriptResultModelEntityByListName
  nameWithType: DataContext.GetScriptResultModelEntityByListName
  fullName: TimeCockpit.Data.DataContext.GetScriptResultModelEntityByListName
- uid: TimeCockpit.Data.DataModel.ModelEntityBase
  commentId: T:TimeCockpit.Data.DataModel.ModelEntityBase
  parent: TimeCockpit.Data.DataModel
  isExternal: true
  name: ModelEntityBase
  nameWithType: ModelEntityBase
  fullName: TimeCockpit.Data.DataModel.ModelEntityBase
- uid: TimeCockpit.Data.DataContext.RefreshEnvironment*
  commentId: Overload:TimeCockpit.Data.DataContext.RefreshEnvironment
  isExternal: true
  name: RefreshEnvironment
  nameWithType: DataContext.RefreshEnvironment
  fullName: TimeCockpit.Data.DataContext.RefreshEnvironment
- uid: TimeCockpit.Data.IDataContext.RefreshEnvironment
  commentId: M:TimeCockpit.Data.IDataContext.RefreshEnvironment
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: RefreshEnvironment()
  nameWithType: IDataContext.RefreshEnvironment()
  fullName: TimeCockpit.Data.IDataContext.RefreshEnvironment()
  spec.csharp:
  - uid: TimeCockpit.Data.IDataContext.RefreshEnvironment
    name: RefreshEnvironment
    nameWithType: IDataContext.RefreshEnvironment
    fullName: TimeCockpit.Data.IDataContext.RefreshEnvironment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TimeCockpit.Data.IDataContext.RefreshEnvironment
    name: RefreshEnvironment
    nameWithType: IDataContext.RefreshEnvironment
    fullName: TimeCockpit.Data.IDataContext.RefreshEnvironment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataContext.Model*
  commentId: Overload:TimeCockpit.Data.DataContext.Model
  isExternal: true
  name: Model
  nameWithType: DataContext.Model
  fullName: TimeCockpit.Data.DataContext.Model
- uid: TimeCockpit.Data.DataContext.Environment*
  commentId: Overload:TimeCockpit.Data.DataContext.Environment
  isExternal: true
  name: Environment
  nameWithType: DataContext.Environment
  fullName: TimeCockpit.Data.DataContext.Environment
- uid: TimeCockpit.Data.IDataContext.Environment
  commentId: P:TimeCockpit.Data.IDataContext.Environment
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: Environment
  nameWithType: IDataContext.Environment
  fullName: TimeCockpit.Data.IDataContext.Environment
- uid: TimeCockpit.Data.Environment
  commentId: T:TimeCockpit.Data.Environment
  parent: TimeCockpit.Data
  isExternal: true
  name: Environment
  nameWithType: Environment
  fullName: TimeCockpit.Data.Environment
- uid: TimeCockpit.Data.DataContext.DataContextType*
  commentId: Overload:TimeCockpit.Data.DataContext.DataContextType
  isExternal: true
  name: DataContextType
  nameWithType: DataContext.DataContextType
  fullName: TimeCockpit.Data.DataContext.DataContextType
- uid: TimeCockpit.Data.DataContextType
  commentId: T:TimeCockpit.Data.DataContextType
  parent: TimeCockpit.Data
  isExternal: true
  name: DataContextType
  nameWithType: DataContextType
  fullName: TimeCockpit.Data.DataContextType
- uid: TimeCockpit.Data.DataContext.Localizer*
  commentId: Overload:TimeCockpit.Data.DataContext.Localizer
  isExternal: true
  name: Localizer
  nameWithType: DataContext.Localizer
  fullName: TimeCockpit.Data.DataContext.Localizer
- uid: TimeCockpit.Data.Localization.NameLocalizer
  commentId: T:TimeCockpit.Data.Localization.NameLocalizer
  parent: TimeCockpit.Data.Localization
  isExternal: true
  name: NameLocalizer
  nameWithType: NameLocalizer
  fullName: TimeCockpit.Data.Localization.NameLocalizer
- uid: TimeCockpit.Data.Localization
  commentId: N:TimeCockpit.Data.Localization
  isExternal: true
  name: TimeCockpit.Data.Localization
  nameWithType: TimeCockpit.Data.Localization
  fullName: TimeCockpit.Data.Localization
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Model*
  commentId: Overload:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Model
  isExternal: true
  name: IDataContext.Model
  nameWithType: DataContext.IDataContext.Model
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.Model
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.Model
  name.vb: TimeCockpit.Data.IDataContext.Model
- uid: TimeCockpit.Data.IDataContext.Model
  commentId: P:TimeCockpit.Data.IDataContext.Model
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: Model
  nameWithType: IDataContext.Model
  fullName: TimeCockpit.Data.IDataContext.Model
- uid: TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Localizer*
  commentId: Overload:TimeCockpit.Data.DataContext.TimeCockpit#Data#IDataContext#Localizer
  isExternal: true
  name: IDataContext.Localizer
  nameWithType: DataContext.IDataContext.Localizer
  fullName: TimeCockpit.Data.DataContext.TimeCockpit.Data.IDataContext.Localizer
  nameWithType.vb: DataContext.TimeCockpit.Data.IDataContext.Localizer
  name.vb: TimeCockpit.Data.IDataContext.Localizer
- uid: TimeCockpit.Data.IDataContext.Localizer
  commentId: P:TimeCockpit.Data.IDataContext.Localizer
  parent: TimeCockpit.Data.IDataContext
  isExternal: true
  name: Localizer
  nameWithType: IDataContext.Localizer
  fullName: TimeCockpit.Data.IDataContext.Localizer
- uid: TimeCockpit.Data.DataContext.DbClient*
  commentId: Overload:TimeCockpit.Data.DataContext.DbClient
  isExternal: true
  name: DbClient
  nameWithType: DataContext.DbClient
  fullName: TimeCockpit.Data.DataContext.DbClient
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: TimeCockpit.Data.Database.DbClient
  commentId: T:TimeCockpit.Data.Database.DbClient
  parent: TimeCockpit.Data.Database
  isExternal: true
  name: DbClient
  nameWithType: DbClient
  fullName: TimeCockpit.Data.Database.DbClient
