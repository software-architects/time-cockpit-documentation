### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Import.ImportResult
  commentId: T:TimeCockpit.Data.Import.ImportResult
  id: ImportResult
  parent: TimeCockpit.Data.Import
  children:
  - TimeCockpit.Data.Import.ImportResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage},System.Boolean)
  - TimeCockpit.Data.Import.ImportResult.Committed
  - TimeCockpit.Data.Import.ImportResult.CreatedCounts
  - TimeCockpit.Data.Import.ImportResult.FromJSON(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model)
  - TimeCockpit.Data.Import.ImportResult.Messages
  - TimeCockpit.Data.Import.ImportResult.ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.ImportResult)
  - TimeCockpit.Data.Import.ImportResult.UpdatedCounts
  langs:
  - csharp
  - vb
  name: ImportResult
  nameWithType: ImportResult
  fullName: TimeCockpit.Data.Import.ImportResult
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: ImportResult
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 16
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nclass holding references to the result of the import.\n"
  example: []
  syntax:
    content: public class ImportResult
    content.vb: Public Class ImportResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.Import.ImportResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage},System.Boolean)
  commentId: M:TimeCockpit.Data.Import.ImportResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage},System.Boolean)
  id: '#ctor(System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.Dictionary{System.String,System.Int64},System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage},System.Boolean)'
  parent: TimeCockpit.Data.Import.ImportResult
  langs:
  - csharp
  - vb
  name: ImportResult(Dictionary<String, Int64>, Dictionary<String, Int64>, IEnumerable<ImportMessage>, Boolean)
  nameWithType: ImportResult.ImportResult(Dictionary<String, Int64>, Dictionary<String, Int64>, IEnumerable<ImportMessage>, Boolean)
  fullName: TimeCockpit.Data.Import.ImportResult.ImportResult(System.Collections.Generic.Dictionary<System.String, System.Int64>, System.Collections.Generic.Dictionary<System.String, System.Int64>, System.Collections.Generic.IEnumerable<TimeCockpit.Data.Import.ImportMessage>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: .ctor
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 25
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nInitializes a new instance of the <xref href=\"TimeCockpit.Data.Import.ImportResult\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ImportResult(Dictionary<string, long> createdCounts, Dictionary<string, long> updatedCounts, IEnumerable<ImportMessage> messages, bool commited)
    parameters:
    - id: createdCounts
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
      description: the counts of the number of newly created <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s per worksheet.
    - id: updatedCounts
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
      description: the counts of the number of updated <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s per worksheet.
    - id: messages
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage}
      description: Messages occurred during the import.
    - id: commited
      type: System.Boolean
      description: true if the import was actually committed or not.
    content.vb: Public Sub New(createdCounts As Dictionary(Of String, Long), updatedCounts As Dictionary(Of String, Long), messages As IEnumerable(Of ImportMessage), commited As Boolean)
  overload: TimeCockpit.Data.Import.ImportResult.#ctor*
  nameWithType.vb: ImportResult.ImportResult(Dictionary(Of String, Int64), Dictionary(Of String, Int64), IEnumerable(Of ImportMessage), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.Import.ImportResult.ImportResult(System.Collections.Generic.Dictionary(Of System.String, System.Int64), System.Collections.Generic.Dictionary(Of System.String, System.Int64), System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.Import.ImportMessage), System.Boolean)
  name.vb: ImportResult(Dictionary(Of String, Int64), Dictionary(Of String, Int64), IEnumerable(Of ImportMessage), Boolean)
- uid: TimeCockpit.Data.Import.ImportResult.CreatedCounts
  commentId: P:TimeCockpit.Data.Import.ImportResult.CreatedCounts
  id: CreatedCounts
  parent: TimeCockpit.Data.Import.ImportResult
  langs:
  - csharp
  - vb
  name: CreatedCounts
  nameWithType: ImportResult.CreatedCounts
  fullName: TimeCockpit.Data.Import.ImportResult.CreatedCounts
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: CreatedCounts
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 36
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nGets the counts per worksheet.\n"
  example: []
  syntax:
    content: public Dictionary<string, long> CreatedCounts { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
    content.vb: Public ReadOnly Property CreatedCounts As Dictionary(Of String, Long)
  overload: TimeCockpit.Data.Import.ImportResult.CreatedCounts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.ImportResult.UpdatedCounts
  commentId: P:TimeCockpit.Data.Import.ImportResult.UpdatedCounts
  id: UpdatedCounts
  parent: TimeCockpit.Data.Import.ImportResult
  langs:
  - csharp
  - vb
  name: UpdatedCounts
  nameWithType: ImportResult.UpdatedCounts
  fullName: TimeCockpit.Data.Import.ImportResult.UpdatedCounts
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: UpdatedCounts
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 41
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nGets the number of updated entities, per worksheet.\n"
  example: []
  syntax:
    content: public Dictionary<string, long> UpdatedCounts { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
    content.vb: Public ReadOnly Property UpdatedCounts As Dictionary(Of String, Long)
  overload: TimeCockpit.Data.Import.ImportResult.UpdatedCounts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.ImportResult.Messages
  commentId: P:TimeCockpit.Data.Import.ImportResult.Messages
  id: Messages
  parent: TimeCockpit.Data.Import.ImportResult
  langs:
  - csharp
  - vb
  name: Messages
  nameWithType: ImportResult.Messages
  fullName: TimeCockpit.Data.Import.ImportResult.Messages
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: Messages
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 46
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nGets an enumeration of messages that were logged during the import process.\n"
  example: []
  syntax:
    content: public IEnumerable<ImportMessage> Messages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage}
    content.vb: Public ReadOnly Property Messages As IEnumerable(Of ImportMessage)
  overload: TimeCockpit.Data.Import.ImportResult.Messages*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.ImportResult.Committed
  commentId: P:TimeCockpit.Data.Import.ImportResult.Committed
  id: Committed
  parent: TimeCockpit.Data.Import.ImportResult
  langs:
  - csharp
  - vb
  name: Committed
  nameWithType: ImportResult.Committed
  fullName: TimeCockpit.Data.Import.ImportResult.Committed
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: Committed
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 54
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nGets a value indicating whether the import was actually committed or not.\n"
  example: []
  syntax:
    content: public bool Committed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Committed As Boolean
  overload: TimeCockpit.Data.Import.ImportResult.Committed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeCockpit.Data.Import.ImportResult.ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.ImportResult)
  commentId: M:TimeCockpit.Data.Import.ImportResult.ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.ImportResult)
  id: ToJSON(Newtonsoft.Json.JsonWriter,TimeCockpit.Data.Import.ImportResult)
  parent: TimeCockpit.Data.Import.ImportResult
  langs:
  - csharp
  - vb
  name: ToJSON(JsonWriter, ImportResult)
  nameWithType: ImportResult.ToJSON(JsonWriter, ImportResult)
  fullName: TimeCockpit.Data.Import.ImportResult.ToJSON(Newtonsoft.Json.JsonWriter, TimeCockpit.Data.Import.ImportResult)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: ToJSON
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 65
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nWrites the json.\n"
  example: []
  syntax:
    content: public static void ToJSON(JsonWriter writer, ImportResult importResult)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer.
    - id: importResult
      type: TimeCockpit.Data.Import.ImportResult
      description: the request parameters.
    content.vb: Public Shared Sub ToJSON(writer As JsonWriter, importResult As ImportResult)
  overload: TimeCockpit.Data.Import.ImportResult.ToJSON*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Import.ImportResult.FromJSON(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model)
  commentId: M:TimeCockpit.Data.Import.ImportResult.FromJSON(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model)
  id: FromJSON(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model)
  parent: TimeCockpit.Data.Import.ImportResult
  langs:
  - csharp
  - vb
  name: FromJSON(JsonReader, Model)
  nameWithType: ImportResult.FromJSON(JsonReader, Model)
  fullName: TimeCockpit.Data.Import.ImportResult.FromJSON(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    id: FromJSON
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data.Import/JsonConverters/ImportResult.cs
    startLine: 123
  assemblies:
  - TimeCockpit.Data.Import
  namespace: TimeCockpit.Data.Import
  summary: "\nReads a <see cref=\"!:ImportRequest\"></see> from a JSON reader.\n"
  example: []
  syntax:
    content: public static ImportResult FromJSON(JsonReader reader, Model model)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: the reader to read from.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: the model used for deserialization.
    return:
      type: TimeCockpit.Data.Import.ImportResult
      description: returns the read ImportRequest.
    content.vb: Public Shared Function FromJSON(reader As JsonReader, model As Model) As ImportResult
  overload: TimeCockpit.Data.Import.ImportResult.FromJSON*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TimeCockpit.Data.Import
  commentId: N:TimeCockpit.Data.Import
  isExternal: false
  name: TimeCockpit.Data.Import
  nameWithType: TimeCockpit.Data.Import
  fullName: TimeCockpit.Data.Import
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Import.ImportResult
  commentId: T:TimeCockpit.Data.Import.ImportResult
  parent: TimeCockpit.Data.Import
  isExternal: false
  name: ImportResult
  nameWithType: ImportResult
  fullName: TimeCockpit.Data.Import.ImportResult
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  parent: TimeCockpit.Data
  isExternal: false
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
- uid: TimeCockpit.Data.Import.ImportResult.#ctor*
  commentId: Overload:TimeCockpit.Data.Import.ImportResult.#ctor
  isExternal: false
  name: ImportResult
  nameWithType: ImportResult.ImportResult
  fullName: TimeCockpit.Data.Import.ImportResult.ImportResult
- uid: System.Collections.Generic.Dictionary{System.String,System.Int64}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Int64>
  nameWithType: Dictionary<String, Int64>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Int64>
  nameWithType.vb: Dictionary(Of String, Int64)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Int64)
  name.vb: Dictionary(Of String, Int64)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage}
  commentId: T:System.Collections.Generic.IEnumerable{TimeCockpit.Data.Import.ImportMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ImportMessage>
  nameWithType: IEnumerable<ImportMessage>
  fullName: System.Collections.Generic.IEnumerable<TimeCockpit.Data.Import.ImportMessage>
  nameWithType.vb: IEnumerable(Of ImportMessage)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.Import.ImportMessage)
  name.vb: IEnumerable(Of ImportMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.Import.ImportMessage
    name: ImportMessage
    nameWithType: ImportMessage
    fullName: TimeCockpit.Data.Import.ImportMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.Import.ImportMessage
    name: ImportMessage
    nameWithType: ImportMessage
    fullName: TimeCockpit.Data.Import.ImportMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data
  commentId: N:TimeCockpit.Data
  isExternal: false
  name: TimeCockpit.Data
  nameWithType: TimeCockpit.Data
  fullName: TimeCockpit.Data
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Import.ImportResult.CreatedCounts*
  commentId: Overload:TimeCockpit.Data.Import.ImportResult.CreatedCounts
  isExternal: false
  name: CreatedCounts
  nameWithType: ImportResult.CreatedCounts
  fullName: TimeCockpit.Data.Import.ImportResult.CreatedCounts
- uid: TimeCockpit.Data.Import.ImportResult.UpdatedCounts*
  commentId: Overload:TimeCockpit.Data.Import.ImportResult.UpdatedCounts
  isExternal: false
  name: UpdatedCounts
  nameWithType: ImportResult.UpdatedCounts
  fullName: TimeCockpit.Data.Import.ImportResult.UpdatedCounts
- uid: TimeCockpit.Data.Import.ImportResult.Messages*
  commentId: Overload:TimeCockpit.Data.Import.ImportResult.Messages
  isExternal: false
  name: Messages
  nameWithType: ImportResult.Messages
  fullName: TimeCockpit.Data.Import.ImportResult.Messages
- uid: TimeCockpit.Data.Import.ImportResult.Committed*
  commentId: Overload:TimeCockpit.Data.Import.ImportResult.Committed
  isExternal: false
  name: Committed
  nameWithType: ImportResult.Committed
  fullName: TimeCockpit.Data.Import.ImportResult.Committed
- uid: TimeCockpit.Data.Import.ImportResult.ToJSON*
  commentId: Overload:TimeCockpit.Data.Import.ImportResult.ToJSON
  isExternal: false
  name: ToJSON
  nameWithType: ImportResult.ToJSON
  fullName: TimeCockpit.Data.Import.ImportResult.ToJSON
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: TimeCockpit.Data.Import.ImportResult.FromJSON*
  commentId: Overload:TimeCockpit.Data.Import.ImportResult.FromJSON
  isExternal: false
  name: FromJSON
  nameWithType: ImportResult.FromJSON
  fullName: TimeCockpit.Data.Import.ImportResult.FromJSON
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: TimeCockpit.Data.DataModel.Model
  commentId: T:TimeCockpit.Data.DataModel.Model
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: Model
  nameWithType: Model
  fullName: TimeCockpit.Data.DataModel.Model
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: false
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
