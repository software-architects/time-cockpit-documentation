### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  commentId: T:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  id: EntityObjectJsonConverter
  parent: TimeCockpit.Data.JsonConverters
  children:
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.#ctor
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Boolean)
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Boolean@)
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.Environment)
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.ModelEntityBase,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject(TimeCockpit.Data.EntityObject,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  - TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema(TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  langs:
  - csharp
  - vb
  name: EntityObjectJsonConverter
  nameWithType: EntityObjectJsonConverter
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  type: Class
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nCustom serializer for <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>s into Json.\n"
  syntax:
    content: public class EntityObjectJsonConverter
    content.vb: Public Class EntityObjectJsonConverter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  id: ReadEntityObjectArray(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment)
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadEntityObjectArray(JsonReader, Dictionary<String, ModelEntityBase>, Model, Environment)
  nameWithType: EntityObjectJsonConverter.ReadEntityObjectArray(JsonReader, Dictionary<String, ModelEntityBase>, Model, Environment)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray(Newtonsoft.Json.JsonReader, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>s out of an array of <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  syntax:
    content: public static List<EntityObject> ReadEntityObjectArray(JsonReader reader, Dictionary<string, ModelEntityBase> anonymousTypes, Model model, Environment environment)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The json reader.
    - id: anonymousTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: Anonymous types in a case of a Select New With query.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: An instance of <xref href="TimeCockpit.Data.DataModel.Model" data-throw-if-not-resolved="false"></xref> that holds metadata.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: The current environment.
    return:
      type: System.Collections.Generic.List{TimeCockpit.Data.EntityObject}
      description: A list of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>s.
    content.vb: Public Shared Function ReadEntityObjectArray(reader As JsonReader, anonymousTypes As Dictionary(Of String, ModelEntityBase), model As Model, environment As Environment) As List(Of EntityObject)
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray*
  nameWithType.vb: EntityObjectJsonConverter.ReadEntityObjectArray(JsonReader, Dictionary(Of String, ModelEntityBase), Model, Environment)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray(Newtonsoft.Json.JsonReader, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment)
  name.vb: ReadEntityObjectArray(JsonReader, Dictionary(Of String, ModelEntityBase), Model, Environment)
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  id: ReadEntityObject(Newtonsoft.Json.JsonReader,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadEntityObject(JsonReader, Dictionary<String, ModelEntityBase>, Model, Environment, Dictionary<Guid, EntityObject>)
  nameWithType: EntityObjectJsonConverter.ReadEntityObject(JsonReader, Dictionary<String, ModelEntityBase>, Model, Environment, Dictionary<Guid, EntityObject>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.JsonReader, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment, System.Collections.Generic.Dictionary<System.Guid, TimeCockpit.Data.EntityObject>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the entity object.\n"
  syntax:
    content: public static EntityObject ReadEntityObject(JsonReader reader, Dictionary<string, ModelEntityBase> anonymousTypes, Model model, Environment environment, Dictionary<Guid, EntityObject> alreadyLoaded)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The reader.
    - id: anonymousTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: The anonymous types.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: The model.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: The environment.
    - id: alreadyLoaded
      type: System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject}
      description: Previously loaded entity objects (for relations)
    return:
      type: TimeCockpit.Data.EntityObject
      description: Returns the read <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function ReadEntityObject(reader As JsonReader, anonymousTypes As Dictionary(Of String, ModelEntityBase), model As Model, environment As Environment, alreadyLoaded As Dictionary(Of Guid, EntityObject)) As EntityObject
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject*
  nameWithType.vb: EntityObjectJsonConverter.ReadEntityObject(JsonReader, Dictionary(Of String, ModelEntityBase), Model, Environment, Dictionary(Of Guid, EntityObject))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.JsonReader, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment, System.Collections.Generic.Dictionary(Of System.Guid, TimeCockpit.Data.EntityObject))
  name.vb: ReadEntityObject(JsonReader, Dictionary(Of String, ModelEntityBase), Model, Environment, Dictionary(Of Guid, EntityObject))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  id: ReadEntityObject(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadEntityObject(JObject, Dictionary<String, ModelEntityBase>, Model, Environment, Dictionary<Guid, EntityObject>)
  nameWithType: EntityObjectJsonConverter.ReadEntityObject(JObject, Dictionary<String, ModelEntityBase>, Model, Environment, Dictionary<Guid, EntityObject>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.Linq.JObject, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment, System.Collections.Generic.Dictionary<System.Guid, TimeCockpit.Data.EntityObject>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads an instance of <xref href=\"TimeCockpit.Data.EntityObject\" data-throw-if-not-resolved=\"false\"></xref> that is serialized in Json\n"
  syntax:
    content: public static EntityObject ReadEntityObject(JObject obj, Dictionary<string, ModelEntityBase> anonymousTypes, Model model, Environment environment, Dictionary<Guid, EntityObject> alreadyLoaded)
    parameters:
    - id: obj
      type: Newtonsoft.Json.Linq.JObject
      description: obj to read from.
    - id: anonymousTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: anonymous types for deserialization additionally to model.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: The current data context model
    - id: environment
      type: TimeCockpit.Data.Environment
      description: Current DataContext environment.
    - id: alreadyLoaded
      type: System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject}
      description: already loaded entity objects.
    return:
      type: TimeCockpit.Data.EntityObject
      description: an instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function ReadEntityObject(obj As JObject, anonymousTypes As Dictionary(Of String, ModelEntityBase), model As Model, environment As Environment, alreadyLoaded As Dictionary(Of Guid, EntityObject)) As EntityObject
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject*
  nameWithType.vb: EntityObjectJsonConverter.ReadEntityObject(JObject, Dictionary(Of String, ModelEntityBase), Model, Environment, Dictionary(Of Guid, EntityObject))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject(Newtonsoft.Json.Linq.JObject, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment, System.Collections.Generic.Dictionary(Of System.Guid, TimeCockpit.Data.EntityObject))
  name.vb: ReadEntityObject(JObject, Dictionary(Of String, ModelEntityBase), Model, Environment, Dictionary(Of Guid, EntityObject))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  id: WriteEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: WriteEntityObjectArray(IEnumerable<EntityObject>, JsonWriter, HashSet<Guid>)
  nameWithType: EntityObjectJsonConverter.WriteEntityObjectArray(IEnumerable<EntityObject>, JsonWriter, HashSet<Guid>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray(System.Collections.Generic.IEnumerable<TimeCockpit.Data.EntityObject>, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet<System.Guid>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nWrites an Enumerable of EntityObjects to the JsonWriter.\n"
  syntax:
    content: public static void WriteEntityObjectArray(IEnumerable<EntityObject> entityObjects, JsonWriter writer, HashSet<Guid> writtenObjects)
    parameters:
    - id: entityObjects
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject}
      description: EntityObjects to write.
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: JsonWriter to write to.
    - id: writtenObjects
      type: System.Collections.Generic.HashSet{System.Guid}
      description: GUIDs of already written object. If null, related objects are serialized multiple times.
    content.vb: Public Shared Sub WriteEntityObjectArray(entityObjects As IEnumerable(Of EntityObject), writer As JsonWriter, writtenObjects As HashSet(Of Guid))
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray*
  nameWithType.vb: EntityObjectJsonConverter.WriteEntityObjectArray(IEnumerable(Of EntityObject), JsonWriter, HashSet(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray(System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.EntityObject), Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet(Of System.Guid))
  name.vb: WriteEntityObjectArray(IEnumerable(Of EntityObject), JsonWriter, HashSet(Of Guid))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  id: WriteHomogenousEntityObjectArray(System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject},Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: WriteHomogenousEntityObjectArray(IEnumerable<EntityObject>, JsonWriter, HashSet<Guid>)
  nameWithType: EntityObjectJsonConverter.WriteHomogenousEntityObjectArray(IEnumerable<EntityObject>, JsonWriter, HashSet<Guid>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray(System.Collections.Generic.IEnumerable<TimeCockpit.Data.EntityObject>, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet<System.Guid>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nWrites an Enumerable of homogenious EntityObjects to the JsonWriter.\n"
  syntax:
    content: public static void WriteHomogenousEntityObjectArray(IEnumerable<EntityObject> entityObjects, JsonWriter writer, HashSet<Guid> writtenObjects)
    parameters:
    - id: entityObjects
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject}
      description: EntityObjects to write.
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: JsonWriter to write to.
    - id: writtenObjects
      type: System.Collections.Generic.HashSet{System.Guid}
      description: GUIDs of already written object. If null, related objects are serialized multiple times.
    content.vb: Public Shared Sub WriteHomogenousEntityObjectArray(entityObjects As IEnumerable(Of EntityObject), writer As JsonWriter, writtenObjects As HashSet(Of Guid))
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray*
  nameWithType.vb: EntityObjectJsonConverter.WriteHomogenousEntityObjectArray(IEnumerable(Of EntityObject), JsonWriter, HashSet(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray(System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.EntityObject), Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet(Of System.Guid))
  name.vb: WriteHomogenousEntityObjectArray(IEnumerable(Of EntityObject), JsonWriter, HashSet(Of Guid))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.Environment)
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.Environment)
  id: ReadHomogenousEntityObjectArray(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.Environment)
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadHomogenousEntityObjectArray(JsonReader, Model, Dictionary<String, ModelEntityBase>, Environment)
  nameWithType: EntityObjectJsonConverter.ReadHomogenousEntityObjectArray(JsonReader, Model, Dictionary<String, ModelEntityBase>, Environment)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, TimeCockpit.Data.Environment)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the homogenous entity object array.\n"
  syntax:
    content: public static IEnumerable<EntityObject> ReadHomogenousEntityObjectArray(JsonReader reader, Model modelBase, Dictionary<string, ModelEntityBase> additionalTypes, Environment environment)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The json reader to read an entity object collection from.
    - id: modelBase
      type: TimeCockpit.Data.DataModel.Model
      description: model holding possible types.
    - id: additionalTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: additional types used for deserialization.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: the environment for refreshing permissions.
    return:
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject}
      description: Returns an enumerable iterating over the entity objects read from the reader.
    content.vb: Public Shared Function ReadHomogenousEntityObjectArray(reader As JsonReader, modelBase As Model, additionalTypes As Dictionary(Of String, ModelEntityBase), environment As Environment) As IEnumerable(Of EntityObject)
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray*
  nameWithType.vb: EntityObjectJsonConverter.ReadHomogenousEntityObjectArray(JsonReader, Model, Dictionary(Of String, ModelEntityBase), Environment)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), TimeCockpit.Data.Environment)
  name.vb: ReadHomogenousEntityObjectArray(JsonReader, Model, Dictionary(Of String, ModelEntityBase), Environment)
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase})
  id: ReadHomogenousEntityObjectArrayValues(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadHomogenousEntityObjectArrayValues(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary<Guid, EntityObject>, Environment, Model, Dictionary<String, ModelEntityBase>)
  nameWithType: EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary<Guid, EntityObject>, Environment, Model, Dictionary<String, ModelEntityBase>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues(Newtonsoft.Json.JsonReader, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, System.Collections.Generic.Dictionary<System.Guid, TimeCockpit.Data.EntityObject>, TimeCockpit.Data.Environment, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the homogenous entity object array values.\n"
  syntax:
    content: public static IEnumerable<EntityObject> ReadHomogenousEntityObjectArrayValues(JsonReader reader, EntityObjectJsonConverter.JsonSchemaModelEntity schema, Dictionary<Guid, EntityObject> objectCache, Environment environment, Model model, Dictionary<string, ModelEntityBase> additionalTypes)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The reader.
    - id: schema
      type: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
      description: the schema used for deserialization.
    - id: objectCache
      type: System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject}
      description: a cache holding references to already deserialized objects. used for relations.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: environment for refreshing permissions.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: the model used for deserialization.
    - id: additionalTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: additional types used for deserialization.
    return:
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject}
      description: the deserialized entity objects.
    content.vb: Public Shared Function ReadHomogenousEntityObjectArrayValues(reader As JsonReader, schema As EntityObjectJsonConverter.JsonSchemaModelEntity, objectCache As Dictionary(Of Guid, EntityObject), environment As Environment, model As Model, additionalTypes As Dictionary(Of String, ModelEntityBase)) As IEnumerable(Of EntityObject)
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues*
  nameWithType.vb: EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary(Of Guid, EntityObject), Environment, Model, Dictionary(Of String, ModelEntityBase))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues(Newtonsoft.Json.JsonReader, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, System.Collections.Generic.Dictionary(Of System.Guid, TimeCockpit.Data.EntityObject), TimeCockpit.Data.Environment, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase))
  name.vb: ReadHomogenousEntityObjectArrayValues(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary(Of Guid, EntityObject), Environment, Model, Dictionary(Of String, ModelEntityBase))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  id: WriteHomogenousEntityObject(TimeCockpit.Data.EntityObject,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: WriteHomogenousEntityObject(EntityObject, EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet<Guid>)
  nameWithType: EntityObjectJsonConverter.WriteHomogenousEntityObject(EntityObject, EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet<Guid>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject(TimeCockpit.Data.EntityObject, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet<System.Guid>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nWrites the homogenous entity object.\n"
  syntax:
    content: public static void WriteHomogenousEntityObject(EntityObject eo, EntityObjectJsonConverter.JsonSchemaModelEntity schema, JsonWriter writer, HashSet<Guid> writtenObjects)
    parameters:
    - id: eo
      type: TimeCockpit.Data.EntityObject
      description: The entity object to write.
    - id: schema
      type: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
      description: The schema to use for writing.
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer to write to.
    - id: writtenObjects
      type: System.Collections.Generic.HashSet{System.Guid}
      description: set containing the object uuids of the already written objects.
    content.vb: Public Shared Sub WriteHomogenousEntityObject(eo As EntityObject, schema As EntityObjectJsonConverter.JsonSchemaModelEntity, writer As JsonWriter, writtenObjects As HashSet(Of Guid))
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject*
  nameWithType.vb: EntityObjectJsonConverter.WriteHomogenousEntityObject(EntityObject, EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject(TimeCockpit.Data.EntityObject, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet(Of System.Guid))
  name.vb: WriteHomogenousEntityObject(EntityObject, EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet(Of Guid))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Boolean@)
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Boolean@)
  id: ReadHomogenousEntityObject(Newtonsoft.Json.JsonReader,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject},TimeCockpit.Data.Environment,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Boolean@)
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadHomogenousEntityObject(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary<Guid, EntityObject>, Environment, Model, Dictionary<String, ModelEntityBase>, out Boolean)
  nameWithType: EntityObjectJsonConverter.ReadHomogenousEntityObject(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary<Guid, EntityObject>, Environment, Model, Dictionary<String, ModelEntityBase>, out Boolean)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject(Newtonsoft.Json.JsonReader, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, System.Collections.Generic.Dictionary<System.Guid, TimeCockpit.Data.EntityObject>, TimeCockpit.Data.Environment, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, out System.Boolean)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads an homogenous entity object from a reader.\n"
  syntax:
    content: public static EntityObject ReadHomogenousEntityObject(JsonReader reader, EntityObjectJsonConverter.JsonSchemaModelEntity schema, Dictionary<Guid, EntityObject> entityObjectCache, Environment environment, Model model, Dictionary<string, ModelEntityBase> additionalTypes, out bool done)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: json reader to read an entity object from.
    - id: schema
      type: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
      description: schema of the model entity.
    - id: entityObjectCache
      type: System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject}
      description: a dictionary containing the already parsed entity objects.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: environment for refreshing permissions.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: the model used for deserialization.
    - id: additionalTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: additional Types used for deserialization.
    - id: done
      type: System.Boolean
      description: out param indicating whether we&apos;re done reading
    return:
      type: TimeCockpit.Data.EntityObject
      description: returns an entityobject serialized from the reader.
    content.vb: Public Shared Function ReadHomogenousEntityObject(reader As JsonReader, schema As EntityObjectJsonConverter.JsonSchemaModelEntity, entityObjectCache As Dictionary(Of Guid, EntityObject), environment As Environment, model As Model, additionalTypes As Dictionary(Of String, ModelEntityBase), ByRef done As Boolean) As EntityObject
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject*
  nameWithType.vb: EntityObjectJsonConverter.ReadHomogenousEntityObject(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary(Of Guid, EntityObject), Environment, Model, Dictionary(Of String, ModelEntityBase), ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject(Newtonsoft.Json.JsonReader, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, System.Collections.Generic.Dictionary(Of System.Guid, TimeCockpit.Data.EntityObject), TimeCockpit.Data.Environment, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), ByRef System.Boolean)
  name.vb: ReadHomogenousEntityObject(JsonReader, EntityObjectJsonConverter.JsonSchemaModelEntity, Dictionary(Of Guid, EntityObject), Environment, Model, Dictionary(Of String, ModelEntityBase), ByRef Boolean)
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema(TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema(TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  id: WriteSchema(TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: WriteSchema(EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet<EntityObjectJsonConverter.JsonSchemaModelEntity>)
  nameWithType: EntityObjectJsonConverter.WriteSchema(EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet<EntityObjectJsonConverter.JsonSchemaModelEntity>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema(TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nWrites the schema.\n"
  syntax:
    content: public static void WriteSchema(EntityObjectJsonConverter.JsonSchemaModelEntity schema, JsonWriter writer, HashSet<EntityObjectJsonConverter.JsonSchemaModelEntity> visitedModelEntities)
    parameters:
    - id: schema
      type: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
      description: The schema.
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The writer.
    - id: visitedModelEntities
      type: System.Collections.Generic.HashSet{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
      description: Lookup for already visited model entities.
    content.vb: Public Shared Sub WriteSchema(schema As EntityObjectJsonConverter.JsonSchemaModelEntity, writer As JsonWriter, visitedModelEntities As HashSet(Of EntityObjectJsonConverter.JsonSchemaModelEntity))
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema*
  nameWithType.vb: EntityObjectJsonConverter.WriteSchema(EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet(Of EntityObjectJsonConverter.JsonSchemaModelEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema(TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity))
  name.vb: WriteSchema(EntityObjectJsonConverter.JsonSchemaModelEntity, JsonWriter, HashSet(Of EntityObjectJsonConverter.JsonSchemaModelEntity))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  id: ReadSchema(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadSchema(JsonReader, Model, Dictionary<String, ModelEntityBase>, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>)
  nameWithType: EntityObjectJsonConverter.ReadSchema(JsonReader, Model, Dictionary<String, ModelEntityBase>, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the schema from a json reader.\n"
  syntax:
    content: public static EntityObjectJsonConverter.JsonSchemaModelEntity ReadSchema(JsonReader reader, Model baseModel, Dictionary<string, ModelEntityBase> additionalTypes, Dictionary<string, EntityObjectJsonConverter.JsonSchemaModelEntity> deserializedSchemas)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: the reader to read from.
    - id: baseModel
      type: TimeCockpit.Data.DataModel.Model
      description: base model for data types.
    - id: additionalTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: types additional to the model.
    - id: deserializedSchemas
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
      description: already deserialized schemas.
    return:
      type: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
      description: returns a json schema model entity.
    content.vb: Public Shared Function ReadSchema(reader As JsonReader, baseModel As Model, additionalTypes As Dictionary(Of String, ModelEntityBase), deserializedSchemas As Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity)) As EntityObjectJsonConverter.JsonSchemaModelEntity
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema*
  nameWithType.vb: EntityObjectJsonConverter.ReadSchema(JsonReader, Model, Dictionary(Of String, ModelEntityBase), Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity))
  name.vb: ReadSchema(JsonReader, Model, Dictionary(Of String, ModelEntityBase), Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation})
  id: ReadSchemaMembers(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadSchemaMembers(JsonReader, ModelEntityBase, Model, Dictionary<String, ModelEntityBase>, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>, List<EntityObjectJsonConverter.JsonSchemaProperty>, List<EntityObjectJsonConverter.JsonSchemaRelation>)
  nameWithType: EntityObjectJsonConverter.ReadSchemaMembers(JsonReader, ModelEntityBase, Model, Dictionary<String, ModelEntityBase>, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>, List<EntityObjectJsonConverter.JsonSchemaProperty>, List<EntityObjectJsonConverter.JsonSchemaRelation>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.ModelEntityBase, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>, System.Collections.Generic.List<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty>, System.Collections.Generic.List<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the members of theschema\n"
  syntax:
    content: public static void ReadSchemaMembers(JsonReader reader, ModelEntityBase modelEntity, Model baseModel, Dictionary<string, ModelEntityBase> additionalTypes, Dictionary<string, EntityObjectJsonConverter.JsonSchemaModelEntity> deserializedSchemas, List<EntityObjectJsonConverter.JsonSchemaProperty> properties, List<EntityObjectJsonConverter.JsonSchemaRelation> relations)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The reader to read from.
    - id: modelEntity
      type: TimeCockpit.Data.DataModel.ModelEntityBase
      description: The model entity.
    - id: baseModel
      type: TimeCockpit.Data.DataModel.Model
      description: base model containing basic types.
    - id: additionalTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: additional data types for deserialization.
    - id: deserializedSchemas
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
      description: already deserialized schemas.
    - id: properties
      type: System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty}
      description: The properties collection to insert properties into.
    - id: relations
      type: System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation}
      description: The relations collection to insert relations into.
    content.vb: Public Shared Sub ReadSchemaMembers(reader As JsonReader, modelEntity As ModelEntityBase, baseModel As Model, additionalTypes As Dictionary(Of String, ModelEntityBase), deserializedSchemas As Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity), properties As List(Of EntityObjectJsonConverter.JsonSchemaProperty), relations As List(Of EntityObjectJsonConverter.JsonSchemaRelation))
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers*
  nameWithType.vb: EntityObjectJsonConverter.ReadSchemaMembers(JsonReader, ModelEntityBase, Model, Dictionary(Of String, ModelEntityBase), Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity), List(Of EntityObjectJsonConverter.JsonSchemaProperty), List(Of EntityObjectJsonConverter.JsonSchemaRelation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.ModelEntityBase, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity), System.Collections.Generic.List(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty), System.Collections.Generic.List(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation))
  name.vb: ReadSchemaMembers(JsonReader, ModelEntityBase, Model, Dictionary(Of String, ModelEntityBase), Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity), List(Of EntityObjectJsonConverter.JsonSchemaProperty), List(Of EntityObjectJsonConverter.JsonSchemaRelation))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.ModelEntityBase,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.ModelEntityBase,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  id: ReadSchemaRelation(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},TimeCockpit.Data.DataModel.ModelEntityBase,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadSchemaRelation(JsonReader, Model, Dictionary<String, ModelEntityBase>, ModelEntityBase, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>)
  nameWithType: EntityObjectJsonConverter.ReadSchemaRelation(JsonReader, Model, Dictionary<String, ModelEntityBase>, ModelEntityBase, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, TimeCockpit.Data.DataModel.ModelEntityBase, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the schema of a relation.\n"
  syntax:
    content: public static EntityObjectJsonConverter.JsonSchemaRelation ReadSchemaRelation(JsonReader reader, Model baseModel, Dictionary<string, ModelEntityBase> additionalTypes, ModelEntityBase ownerModelEntity, Dictionary<string, EntityObjectJsonConverter.JsonSchemaModelEntity> deserializedSchemas)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: json reader to read from.
    - id: baseModel
      type: TimeCockpit.Data.DataModel.Model
      description: the base model entity to use.
    - id: additionalTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: types additional to the model.
    - id: ownerModelEntity
      type: TimeCockpit.Data.DataModel.ModelEntityBase
      description: the owning model entity of the relation.
    - id: deserializedSchemas
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
      description: already deserialized schemas.
    return:
      type: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
      description: Returns a new JsonSchemaRelation object.
    content.vb: Public Shared Function ReadSchemaRelation(reader As JsonReader, baseModel As Model, additionalTypes As Dictionary(Of String, ModelEntityBase), ownerModelEntity As ModelEntityBase, deserializedSchemas As Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity)) As EntityObjectJsonConverter.JsonSchemaRelation
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation*
  nameWithType.vb: EntityObjectJsonConverter.ReadSchemaRelation(JsonReader, Model, Dictionary(Of String, ModelEntityBase), ModelEntityBase, Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), TimeCockpit.Data.DataModel.ModelEntityBase, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity))
  name.vb: ReadSchemaRelation(JsonReader, Model, Dictionary(Of String, ModelEntityBase), ModelEntityBase, Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  id: ReadSchemaRelationTargets(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase},System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity},System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: ReadSchemaRelationTargets(JsonReader, Model, Dictionary<String, ModelEntityBase>, List<EntityObjectJsonConverter.JsonSchemaModelEntity>, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>)
  nameWithType: EntityObjectJsonConverter.ReadSchemaRelationTargets(JsonReader, Model, Dictionary<String, ModelEntityBase>, List<EntityObjectJsonConverter.JsonSchemaModelEntity>, Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>, System.Collections.Generic.List<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>, System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nReads the targets of a SchemaRelation.\n"
  syntax:
    content: public static void ReadSchemaRelationTargets(JsonReader reader, Model baseModel, Dictionary<string, ModelEntityBase> additionalTypes, List<EntityObjectJsonConverter.JsonSchemaModelEntity> targets, Dictionary<string, EntityObjectJsonConverter.JsonSchemaModelEntity> deserializedSchemas)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: the json reader to read from.
    - id: baseModel
      type: TimeCockpit.Data.DataModel.Model
      description: the base model for types.
    - id: additionalTypes
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
      description: types additional to the model.
    - id: targets
      type: System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
      description: output target collection.
    - id: deserializedSchemas
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
      description: already deserialized schemas.
    content.vb: Public Shared Sub ReadSchemaRelationTargets(reader As JsonReader, baseModel As Model, additionalTypes As Dictionary(Of String, ModelEntityBase), targets As List(Of EntityObjectJsonConverter.JsonSchemaModelEntity), deserializedSchemas As Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity))
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets*
  nameWithType.vb: EntityObjectJsonConverter.ReadSchemaRelationTargets(JsonReader, Model, Dictionary(Of String, ModelEntityBase), List(Of EntityObjectJsonConverter.JsonSchemaModelEntity), Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase), System.Collections.Generic.List(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity), System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity))
  name.vb: ReadSchemaRelationTargets(JsonReader, Model, Dictionary(Of String, ModelEntityBase), List(Of EntityObjectJsonConverter.JsonSchemaModelEntity), Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject(TimeCockpit.Data.EntityObject,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject(TimeCockpit.Data.EntityObject,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  id: WriteEntityObject(TimeCockpit.Data.EntityObject,Newtonsoft.Json.JsonWriter,System.Collections.Generic.HashSet{System.Guid})
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: WriteEntityObject(EntityObject, JsonWriter, HashSet<Guid>)
  nameWithType: EntityObjectJsonConverter.WriteEntityObject(EntityObject, JsonWriter, HashSet<Guid>)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject(TimeCockpit.Data.EntityObject, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet<System.Guid>)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nWrite an EntityObject to the JsonWriter.\n"
  syntax:
    content: public static void WriteEntityObject(EntityObject entityObject, JsonWriter writer, HashSet<Guid> writtenObjects)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: EntityObject to write.
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: JsonWriter to write to.
    - id: writtenObjects
      type: System.Collections.Generic.HashSet{System.Guid}
      description: GUIDs of already written object. If null, related objects are serialized multiple times.
    content.vb: Public Shared Sub WriteEntityObject(entityObject As EntityObject, writer As JsonWriter, writtenObjects As HashSet(Of Guid))
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject*
  nameWithType.vb: EntityObjectJsonConverter.WriteEntityObject(EntityObject, JsonWriter, HashSet(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject(TimeCockpit.Data.EntityObject, Newtonsoft.Json.JsonWriter, System.Collections.Generic.HashSet(Of System.Guid))
  name.vb: WriteEntityObject(EntityObject, JsonWriter, HashSet(Of Guid))
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Boolean)
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Boolean)
  id: CreateEntityObjectFromPrototype(Newtonsoft.Json.JsonReader,TimeCockpit.Data.DataModel.Model,TimeCockpit.Data.Environment,System.Boolean)
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: CreateEntityObjectFromPrototype(JsonReader, Model, Environment, Boolean)
  nameWithType: EntityObjectJsonConverter.CreateEntityObjectFromPrototype(JsonReader, Model, Environment, Boolean)
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype(Newtonsoft.Json.JsonReader, TimeCockpit.Data.DataModel.Model, TimeCockpit.Data.Environment, System.Boolean)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  summary: "\nCreate an entity object from a json prototype (igoring missing members etc.).\n"
  syntax:
    content: public static EntityObject CreateEntityObjectFromPrototype(JsonReader reader, Model model, Environment environment, bool evaluateMissingDefaultValues)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: Json reader.
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: Data model.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: The environment of the current datacontext used to validate permissions.
    - id: evaluateMissingDefaultValues
      type: System.Boolean
    return:
      type: TimeCockpit.Data.EntityObject
      description: New entity object from prototype.
    content.vb: Public Shared Function CreateEntityObjectFromPrototype(reader As JsonReader, model As Model, environment As Environment, evaluateMissingDefaultValues As Boolean) As EntityObject
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.#ctor
  commentId: M:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.#ctor
  id: '#ctor'
  parent: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter
  langs:
  - csharp
  - vb
  name: EntityObjectJsonConverter()
  nameWithType: EntityObjectJsonConverter.EntityObjectJsonConverter()
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.EntityObjectJsonConverter()
  type: Constructor
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.JsonConverters
  syntax:
    content: public EntityObjectJsonConverter()
    content.vb: Public Sub New
  overload: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TimeCockpit.Data.JsonConverters
  commentId: N:TimeCockpit.Data.JsonConverters
  isExternal: true
  name: TimeCockpit.Data.JsonConverters
  nameWithType: TimeCockpit.Data.JsonConverters
  fullName: TimeCockpit.Data.JsonConverters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray
  isExternal: true
  name: ReadEntityObjectArray
  nameWithType: EntityObjectJsonConverter.ReadEntityObjectArray
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObjectArray
- uid: Newtonsoft.Json.JsonReader
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
  commentId: T:System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.DataModel.ModelEntityBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ModelEntityBase>
  nameWithType: Dictionary<String, ModelEntityBase>
  fullName: System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.DataModel.ModelEntityBase>
  nameWithType.vb: Dictionary(Of String, ModelEntityBase)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.DataModel.ModelEntityBase)
  name.vb: Dictionary(Of String, ModelEntityBase)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.ModelEntityBase
    name: ModelEntityBase
    nameWithType: ModelEntityBase
    fullName: TimeCockpit.Data.DataModel.ModelEntityBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.DataModel.ModelEntityBase
    name: ModelEntityBase
    nameWithType: ModelEntityBase
    fullName: TimeCockpit.Data.DataModel.ModelEntityBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel.Model
  commentId: T:TimeCockpit.Data.DataModel.Model
  parent: TimeCockpit.Data.DataModel
  isExternal: true
  name: Model
  nameWithType: Model
  fullName: TimeCockpit.Data.DataModel.Model
- uid: TimeCockpit.Data.Environment
  commentId: T:TimeCockpit.Data.Environment
  parent: TimeCockpit.Data
  isExternal: true
  name: Environment
  nameWithType: Environment
  fullName: TimeCockpit.Data.Environment
- uid: System.Collections.Generic.List{TimeCockpit.Data.EntityObject}
  commentId: T:System.Collections.Generic.List{TimeCockpit.Data.EntityObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EntityObject>
  nameWithType: List<EntityObject>
  fullName: System.Collections.Generic.List<TimeCockpit.Data.EntityObject>
  nameWithType.vb: List(Of EntityObject)
  fullName.vb: System.Collections.Generic.List(Of TimeCockpit.Data.EntityObject)
  name.vb: List(Of EntityObject)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: true
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: TimeCockpit.Data
  commentId: N:TimeCockpit.Data
  isExternal: true
  name: TimeCockpit.Data
  nameWithType: TimeCockpit.Data
  fullName: TimeCockpit.Data
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject
  isExternal: true
  name: ReadEntityObject
  nameWithType: EntityObjectJsonConverter.ReadEntityObject
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadEntityObject
- uid: System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject}
  commentId: T:System.Collections.Generic.Dictionary{System.Guid,TimeCockpit.Data.EntityObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Guid, EntityObject>
  nameWithType: Dictionary<Guid, EntityObject>
  fullName: System.Collections.Generic.Dictionary<System.Guid, TimeCockpit.Data.EntityObject>
  nameWithType.vb: Dictionary(Of Guid, EntityObject)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Guid, TimeCockpit.Data.EntityObject)
  name.vb: Dictionary(Of Guid, EntityObject)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  parent: TimeCockpit.Data
  isExternal: true
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
- uid: Newtonsoft.Json.Linq.JObject
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray
  isExternal: true
  name: WriteEntityObjectArray
  nameWithType: EntityObjectJsonConverter.WriteEntityObjectArray
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObjectArray
- uid: System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject}
  commentId: T:System.Collections.Generic.IEnumerable{TimeCockpit.Data.EntityObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EntityObject>
  nameWithType: IEnumerable<EntityObject>
  fullName: System.Collections.Generic.IEnumerable<TimeCockpit.Data.EntityObject>
  nameWithType.vb: IEnumerable(Of EntityObject)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.EntityObject)
  name.vb: IEnumerable(Of EntityObject)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: TimeCockpit.Data.EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonWriter
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: System.Collections.Generic.HashSet{System.Guid}
  commentId: '!:System.Collections.Generic.HashSet{System.Guid}'
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Guid>
  nameWithType: HashSet<Guid>
  fullName: System.Collections.Generic.HashSet<System.Guid>
  nameWithType.vb: HashSet(Of Guid)
  fullName.vb: System.Collections.Generic.HashSet(Of System.Guid)
  name.vb: HashSet(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: System.Collections.Generic.HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: System.Collections.Generic.HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray
  isExternal: true
  name: WriteHomogenousEntityObjectArray
  nameWithType: EntityObjectJsonConverter.WriteHomogenousEntityObjectArray
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObjectArray
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray
  isExternal: true
  name: ReadHomogenousEntityObjectArray
  nameWithType: EntityObjectJsonConverter.ReadHomogenousEntityObjectArray
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArray
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues
  isExternal: true
  name: ReadHomogenousEntityObjectArrayValues
  nameWithType: EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObjectArrayValues
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
  commentId: T:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
  parent: TimeCockpit.Data.JsonConverters
  isExternal: true
  name: EntityObjectJsonConverter.JsonSchemaModelEntity
  nameWithType: EntityObjectJsonConverter.JsonSchemaModelEntity
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject
  isExternal: true
  name: WriteHomogenousEntityObject
  nameWithType: EntityObjectJsonConverter.WriteHomogenousEntityObject
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteHomogenousEntityObject
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject
  isExternal: true
  name: ReadHomogenousEntityObject
  nameWithType: EntityObjectJsonConverter.ReadHomogenousEntityObject
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadHomogenousEntityObject
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema
  isExternal: true
  name: WriteSchema
  nameWithType: EntityObjectJsonConverter.WriteSchema
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteSchema
- uid: System.Collections.Generic.HashSet{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
  commentId: '!:System.Collections.Generic.HashSet{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}'
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<EntityObjectJsonConverter.JsonSchemaModelEntity>
  nameWithType: HashSet<EntityObjectJsonConverter.JsonSchemaModelEntity>
  fullName: System.Collections.Generic.HashSet<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>
  nameWithType.vb: HashSet(Of EntityObjectJsonConverter.JsonSchemaModelEntity)
  fullName.vb: System.Collections.Generic.HashSet(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity)
  name.vb: HashSet(Of EntityObjectJsonConverter.JsonSchemaModelEntity)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    name: EntityObjectJsonConverter.JsonSchemaModelEntity
    nameWithType: EntityObjectJsonConverter.JsonSchemaModelEntity
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    name: EntityObjectJsonConverter.JsonSchemaModelEntity
    nameWithType: EntityObjectJsonConverter.JsonSchemaModelEntity
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema
  isExternal: true
  name: ReadSchema
  nameWithType: EntityObjectJsonConverter.ReadSchema
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchema
- uid: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
  commentId: T:System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>
  nameWithType: Dictionary<String, EntityObjectJsonConverter.JsonSchemaModelEntity>
  fullName: System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>
  nameWithType.vb: Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity)
  name.vb: Dictionary(Of String, EntityObjectJsonConverter.JsonSchemaModelEntity)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    name: EntityObjectJsonConverter.JsonSchemaModelEntity
    nameWithType: EntityObjectJsonConverter.JsonSchemaModelEntity
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    name: EntityObjectJsonConverter.JsonSchemaModelEntity
    nameWithType: EntityObjectJsonConverter.JsonSchemaModelEntity
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers
  isExternal: true
  name: ReadSchemaMembers
  nameWithType: EntityObjectJsonConverter.ReadSchemaMembers
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaMembers
- uid: TimeCockpit.Data.DataModel.ModelEntityBase
  commentId: T:TimeCockpit.Data.DataModel.ModelEntityBase
  parent: TimeCockpit.Data.DataModel
  isExternal: true
  name: ModelEntityBase
  nameWithType: ModelEntityBase
  fullName: TimeCockpit.Data.DataModel.ModelEntityBase
- uid: System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty}
  commentId: T:System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EntityObjectJsonConverter.JsonSchemaProperty>
  nameWithType: List<EntityObjectJsonConverter.JsonSchemaProperty>
  fullName: System.Collections.Generic.List<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty>
  nameWithType.vb: List(Of EntityObjectJsonConverter.JsonSchemaProperty)
  fullName.vb: System.Collections.Generic.List(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty)
  name.vb: List(Of EntityObjectJsonConverter.JsonSchemaProperty)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty
    name: EntityObjectJsonConverter.JsonSchemaProperty
    nameWithType: EntityObjectJsonConverter.JsonSchemaProperty
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty
    name: EntityObjectJsonConverter.JsonSchemaProperty
    nameWithType: EntityObjectJsonConverter.JsonSchemaProperty
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation}
  commentId: T:System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EntityObjectJsonConverter.JsonSchemaRelation>
  nameWithType: List<EntityObjectJsonConverter.JsonSchemaRelation>
  fullName: System.Collections.Generic.List<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation>
  nameWithType.vb: List(Of EntityObjectJsonConverter.JsonSchemaRelation)
  fullName.vb: System.Collections.Generic.List(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation)
  name.vb: List(Of EntityObjectJsonConverter.JsonSchemaRelation)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
    name: EntityObjectJsonConverter.JsonSchemaRelation
    nameWithType: EntityObjectJsonConverter.JsonSchemaRelation
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
    name: EntityObjectJsonConverter.JsonSchemaRelation
    nameWithType: EntityObjectJsonConverter.JsonSchemaRelation
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation
  isExternal: true
  name: ReadSchemaRelation
  nameWithType: EntityObjectJsonConverter.ReadSchemaRelation
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelation
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
  commentId: T:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
  parent: TimeCockpit.Data.JsonConverters
  isExternal: true
  name: EntityObjectJsonConverter.JsonSchemaRelation
  nameWithType: EntityObjectJsonConverter.JsonSchemaRelation
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaRelation
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets
  isExternal: true
  name: ReadSchemaRelationTargets
  nameWithType: EntityObjectJsonConverter.ReadSchemaRelationTargets
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.ReadSchemaRelationTargets
- uid: System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
  commentId: T:System.Collections.Generic.List{TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EntityObjectJsonConverter.JsonSchemaModelEntity>
  nameWithType: List<EntityObjectJsonConverter.JsonSchemaModelEntity>
  fullName: System.Collections.Generic.List<TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity>
  nameWithType.vb: List(Of EntityObjectJsonConverter.JsonSchemaModelEntity)
  fullName.vb: System.Collections.Generic.List(Of TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity)
  name.vb: List(Of EntityObjectJsonConverter.JsonSchemaModelEntity)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    name: EntityObjectJsonConverter.JsonSchemaModelEntity
    nameWithType: EntityObjectJsonConverter.JsonSchemaModelEntity
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    name: EntityObjectJsonConverter.JsonSchemaModelEntity
    nameWithType: EntityObjectJsonConverter.JsonSchemaModelEntity
    fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.JsonSchemaModelEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject
  isExternal: true
  name: WriteEntityObject
  nameWithType: EntityObjectJsonConverter.WriteEntityObject
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.WriteEntityObject
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype
  isExternal: true
  name: CreateEntityObjectFromPrototype
  nameWithType: EntityObjectJsonConverter.CreateEntityObjectFromPrototype
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.CreateEntityObjectFromPrototype
- uid: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.#ctor*
  commentId: Overload:TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.#ctor
  isExternal: true
  name: EntityObjectJsonConverter
  nameWithType: EntityObjectJsonConverter.EntityObjectJsonConverter
  fullName: TimeCockpit.Data.JsonConverters.EntityObjectJsonConverter.EntityObjectJsonConverter
