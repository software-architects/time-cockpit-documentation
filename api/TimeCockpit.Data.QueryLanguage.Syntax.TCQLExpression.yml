### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  id: TCQLExpression
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  children:
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate(TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Boolean)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Decimal)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Guid)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant(System.DateTime)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant(System.DateTime)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From(System.String,TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String,System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String[],System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression,System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary(TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String,System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.SortDirection)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression,TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias(System.String,System.Int32)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.Int32,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.String,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(System.String,System.String)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake(System.Int32,System.Int32)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  - TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.VersionInfoOnly
  langs:
  - csharp
  - vb
  name: TCQLExpression
  nameWithType: TCQLExpression
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  type: Class
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nStatic class producing TCQL expressions and queries.\n"
  syntax:
    content: public static class TCQLExpression
    content.vb: Public Module TCQLExpression
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.VersionInfoOnly
  commentId: F:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.VersionInfoOnly
  id: VersionInfoOnly
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: VersionInfoOnly
  nameWithType: TCQLExpression.VersionInfoOnly
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.VersionInfoOnly
  type: Field
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\ndefault version info only instance.\n"
  syntax:
    content: public static readonly QueryOptions VersionInfoOnly
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions
    content.vb: Public Shared ReadOnly VersionInfoOnly As QueryOptions
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String)
  id: Query(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(String)
  nameWithType: TCQLExpression.Query(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nBuilds a simple select all from a table name query.\n"
  syntax:
    content: public static Query Query(string entityName)
    parameters:
    - id: entityName
      type: System.String
      description: The name of the entity / backrefernce to query from.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns the Query representing the query.
    content.vb: Public Shared Function Query(entityName As String) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource)
  id: Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(QuerySource)
  nameWithType: TCQLExpression.Query(QuerySource)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a select all from a entity source.\n"
  syntax:
    content: public static Query Query(QuerySource source)
    parameters:
    - id: source
      type: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
      description: The source of the query.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns the query returned by <xref href="TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String%2cTimeCockpit.Data.QueryLanguage.Syntax.QuerySource%2cTimeCockpit.Data.QueryLanguage.Syntax.Expression%2cTimeCockpit.Data.QueryLanguage.Syntax.OrderBy%2cTimeCockpit.Data.QueryLanguage.Syntax.Select%2cTimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Query(source As QuerySource) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(String, Expression)
  nameWithType: TCQLExpression.Query(String, Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String, TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a select query with a where condition and an implicit select alias.\nE.g.\n<pre><code>var query = TcqlExpression.Query(\n	&quot;User&quot;,\n	TcqlExpression.MakeBinary(\n		TcqlExpressionType.Equal,\n		TcqlExpression.Property(&quot;FirstName&quot;),\n		TcqlExpression.Constant(&quot;Max&quot;)));</code></pre>\nproduces\n<pre><code>From U In User Where U.FirstName = ‘Max’ Select U</code></pre>\n"
  syntax:
    content: public static Query Query(string entityName, Expression whereCondition)
    parameters:
    - id: entityName
      type: System.String
      description: The name of the entity / back reference to query.
    - id: whereCondition
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The where condition of the query.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns a new query.
    content.vb: Public Shared Function Query(entityName As String, whereCondition As Expression) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  id: Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(QuerySource, Select)
  nameWithType: TCQLExpression.Query(QuerySource, Select)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource, TimeCockpit.Data.QueryLanguage.Syntax.Select)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new query without a where clause, select options or an alias.\n"
  syntax:
    content: public static Query Query(QuerySource source, Select select)
    parameters:
    - id: source
      type: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
      description: The source to select from.
    - id: select
      type: TimeCockpit.Data.QueryLanguage.Syntax.Select
      description: The select clause.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns a new query.
    content.vb: Public Shared Function Query(source As QuerySource, select As  Select) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  id: Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(String, QuerySource, Select)
  nameWithType: TCQLExpression.Query(String, QuerySource, Select)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String, TimeCockpit.Data.QueryLanguage.Syntax.QuerySource, TimeCockpit.Data.QueryLanguage.Syntax.Select)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new query with an alias, a query source and a select.\n"
  syntax:
    content: public static Query Query(string alias, QuerySource source, Select select)
    parameters:
    - id: alias
      type: System.String
      description: The alias that refers to the source.
    - id: source
      type: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
      description: The source to select from.
    - id: select
      type: TimeCockpit.Data.QueryLanguage.Syntax.Select
      description: The select arguments.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns a new query.
    content.vb: Public Shared Function Query(alias As String, source As QuerySource, select As  Select) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  id: Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(QuerySource, Expression, Select)
  nameWithType: TCQLExpression.Query(QuerySource, Expression, Select)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(TimeCockpit.Data.QueryLanguage.Syntax.QuerySource, TimeCockpit.Data.QueryLanguage.Syntax.Expression, TimeCockpit.Data.QueryLanguage.Syntax.Select)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a query with a query source, a where condition and a select clause.\n"
  syntax:
    content: public static Query Query(QuerySource source, Expression where, Select select)
    parameters:
    - id: source
      type: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
      description: The query source.
    - id: where
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The where condition.
    - id: select
      type: TimeCockpit.Data.QueryLanguage.Syntax.Select
      description: The select clause.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns the new query.
    content.vb: Public Shared Function Query(source As QuerySource, where As Expression, select As  Select) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  id: Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(String, QuerySource, Expression, OrderBy, Select, QueryOptions)
  nameWithType: TCQLExpression.Query(String, QuerySource, Expression, OrderBy, Select, QueryOptions)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String, TimeCockpit.Data.QueryLanguage.Syntax.QuerySource, TimeCockpit.Data.QueryLanguage.Syntax.Expression, TimeCockpit.Data.QueryLanguage.Syntax.OrderBy, TimeCockpit.Data.QueryLanguage.Syntax.Select, TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a query with aliasname, querysource, where condition, orderby, select statement and query options.\n"
  syntax:
    content: public static Query Query(string aliasName, QuerySource source, Expression where, OrderBy orderBy, Select select, QueryOptions options = null)
    parameters:
    - id: aliasName
      type: System.String
      description: The alias name.
    - id: source
      type: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
      description: The query source.
    - id: where
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The query filter.
    - id: orderBy
      type: TimeCockpit.Data.QueryLanguage.Syntax.OrderBy
      description: The orderby clause.
    - id: select
      type: TimeCockpit.Data.QueryLanguage.Syntax.Select
      description: The select clause.
    - id: options
      type: TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions
      description: The options.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns a new query.
    content.vb: Public Shared Function Query(aliasName As String, source As QuerySource, where As Expression, orderBy As OrderBy, select As  Select, options As QueryOptions = Nothing) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  id: Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.QuerySource,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.OrderBy,TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake,TimeCockpit.Data.QueryLanguage.Syntax.Select,TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(String, QuerySource, Expression, OrderBy, SkipAndTake, Select, QueryOptions)
  nameWithType: TCQLExpression.Query(String, QuerySource, Expression, OrderBy, SkipAndTake, Select, QueryOptions)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String, TimeCockpit.Data.QueryLanguage.Syntax.QuerySource, TimeCockpit.Data.QueryLanguage.Syntax.Expression, TimeCockpit.Data.QueryLanguage.Syntax.OrderBy, TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake, TimeCockpit.Data.QueryLanguage.Syntax.Select, TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a query with aliasname, querysource, where condition, orderby, select statement and query options.\n"
  syntax:
    content: public static Query Query(string aliasName, QuerySource source, Expression where, OrderBy orderBy, SkipAndTake skipAndTake, Select select, QueryOptions options = null)
    parameters:
    - id: aliasName
      type: System.String
      description: The alias name.
    - id: source
      type: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
      description: The query source.
    - id: where
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The query filter.
    - id: orderBy
      type: TimeCockpit.Data.QueryLanguage.Syntax.OrderBy
      description: The orderby clause.
    - id: skipAndTake
      type: TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake
      description: The skip and take clause.
    - id: select
      type: TimeCockpit.Data.QueryLanguage.Syntax.Select
      description: The select clause.
    - id: options
      type: TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions
      description: The options.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns a new query.
    content.vb: Public Shared Function Query(aliasName As String, source As QuerySource, where As Expression, orderBy As OrderBy, skipAndTake As SkipAndTake, select As  Select, options As QueryOptions = Nothing) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From(System.String,TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From(System.String,TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[])
  id: From(System.String,TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: From(String, EntitySourceInclude[])
  nameWithType: TCQLExpression.From(String, EntitySourceInclude[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From(System.String, TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a table source with optinal include.\n"
  syntax:
    content: public static EntitySource From(string entityName, params EntitySourceInclude[] includes)
    parameters:
    - id: entityName
      type: System.String
      description: The entity name to select from.
    - id: includes
      type: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[]
      description: The optional include sources.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.EntitySource
      description: Returns a new EntitySource AST node.
    content.vb: Public Shared Function From(entityName As String, ParamArray includes As EntitySourceInclude()) As EntitySource
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From*
  nameWithType.vb: TCQLExpression.From(String, EntitySourceInclude())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From(System.String, TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude())
  name.vb: From(String, EntitySourceInclude())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String,System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String,System.String)
  id: FromBackReference(System.String,System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: FromBackReference(String, String)
  nameWithType: TCQLExpression.FromBackReference(String, String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a QuerySource from a back reference.\n"
  syntax:
    content: public static BackReferenceSource FromBackReference(string backReferenceName, string alias = null)
    parameters:
    - id: backReferenceName
      type: System.String
      description: The name of the back reference to select from.
    - id: alias
      type: System.String
      description: The alias (optional) to refer to.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.BackReferenceSource
      description: Returns a new BackReferenceSource.
    content.vb: Public Shared Function FromBackReference(backReferenceName As String, alias As String = Nothing) As BackReferenceSource
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String[],System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String[],System.String)
  id: FromBackReference(System.String[],System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: FromBackReference(String[], String)
  nameWithType: TCQLExpression.FromBackReference(String[], String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String[], System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a QuerySource from a back reference.\n"
  syntax:
    content: public static BackReferenceSource FromBackReference(string[] backReferencePath, string alias = null)
    parameters:
    - id: backReferencePath
      type: System.String[]
      description: The path of the back reference.
    - id: alias
      type: System.String
      description: The (optional) alias
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.BackReferenceSource
      description: Returns a new BackReferenceSource.
    content.vb: Public Shared Function FromBackReference(backReferencePath As String(), alias As String = Nothing) As BackReferenceSource
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference*
  nameWithType.vb: TCQLExpression.FromBackReference(String(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference(System.String(), System.String)
  name.vb: FromBackReference(String(), String)
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf(System.String)
  id: FromDeadOf(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: FromDeadOf(String)
  nameWithType: TCQLExpression.FromDeadOf(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nReturns a new DeadOf AST Node / query source.\n"
  syntax:
    content: public static DeadOfSource FromDeadOf(string entityName)
    parameters:
    - id: entityName
      type: System.String
      description: The name of the entity whose dead to select.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.DeadOfSource
      description: Returns a new dead of source.
    content.vb: Public Shared Function FromDeadOf(entityName As String) As DeadOfSource
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation(System.String)
  id: IncludeRelation(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: IncludeRelation(String)
  nameWithType: TCQLExpression.IncludeRelation(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a EntitySourceIncludeRelation \n"
  syntax:
    content: public static EntitySourceIncludeRelation IncludeRelation(string relationName)
    parameters:
    - id: relationName
      type: System.String
      description: The name of the relation to include.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeRelation
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeRelation" data-throw-if-not-resolved="false"></xref> AST node.
    content.vb: Public Shared Function IncludeRelation(relationName As String) As EntitySourceIncludeRelation
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression,System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression,System.String)
  id: IncludeConditional(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression,System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: IncludeConditional(String, Expression, String)
  nameWithType: TCQLExpression.IncludeConditional(String, Expression, String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional(System.String, TimeCockpit.Data.QueryLanguage.Syntax.Expression, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a conditional include.\n"
  syntax:
    content: public static EntitySourceIncludeConditional IncludeConditional(string backReferenceName, Expression condition, string backReferenceAliasName = null)
    parameters:
    - id: backReferenceName
      type: System.String
      description: The name of the backreference.
    - id: condition
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The filter condition.
    - id: backReferenceAliasName
      type: System.String
      description: The alias name for the backreference.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeConditional
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeConditional" data-throw-if-not-resolved="false"></xref> AST node.
    content.vb: Public Shared Function IncludeConditional(backReferenceName As String, condition As Expression, backReferenceAliasName As String = Nothing) As EntitySourceIncludeConditional
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  id: Query(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Select)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Query(String, Select)
  nameWithType: TCQLExpression.Query(String, Select)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query(System.String, TimeCockpit.Data.QueryLanguage.Syntax.Select)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new Query without a where condition, but a select list / select alias choice.\n"
  syntax:
    content: public static Query Query(string entityName, Select select)
    parameters:
    - id: entityName
      type: System.String
      description: The name of the entity to select.
    - id: select
      type: TimeCockpit.Data.QueryLanguage.Syntax.Select
      description: The select clause.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns a new query.
    content.vb: Public Shared Function Query(entityName As String, select As  Select) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  id: SelectNewWith(TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: SelectNewWith(MemberDeclaration[])
  nameWithType: TCQLExpression.SelectNewWith(MemberDeclaration[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a <xref href=\"SelectNewWith\" data-throw-if-not-resolved=\"false\"></xref> AST node. Forwards to <xref href=\"TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.Int32%2cTimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public static SelectNewWith SelectNewWith(params MemberDeclaration[] members)
    parameters:
    - id: members
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[]
      description: The members of the <xref href="SelectNewWith" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.SelectNewWith
      description: Returns the result of <xref href="TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.Int32%2cTimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration%5b%5d)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function SelectNewWith(ParamArray members As MemberDeclaration()) As SelectNewWith
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith*
  nameWithType.vb: TCQLExpression.SelectNewWith(MemberDeclaration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration())
  name.vb: SelectNewWith(MemberDeclaration())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.String,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.String,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  id: SelectNewWith(System.String,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: SelectNewWith(String, MemberDeclaration[])
  nameWithType: TCQLExpression.SelectNewWith(String, MemberDeclaration[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.String, TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\ncreates a new <xref href=\"SelectNewWith\" data-throw-if-not-resolved=\"false\"></xref> AST node with a specified type as in\n<pre><code>From T In Timesheet Select New Project With { .Title = &quot;My New Project&quot; }</code></pre>\nIn this sample, the type would be set to &quot;Project&quot; and the member to a collection\nholding a single MemberDeclarationNamedExpression(&quot;Title&quot;, TCQLExpression.Constant(&quot;My New Project&quot;)).\n"
  syntax:
    content: public static SelectNewWith SelectNewWith(string type, params MemberDeclaration[] members)
    parameters:
    - id: type
      type: System.String
      description: 'The type of the entity. '
    - id: members
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[]
      description: The members that will be actually set.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.SelectNewWith
      description: Returns a new instance of the <xref href="SelectNewWith" data-throw-if-not-resolved="false"></xref> AST node.
    content.vb: Public Shared Function SelectNewWith(type As String, ParamArray members As MemberDeclaration()) As SelectNewWith
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith*
  nameWithType.vb: TCQLExpression.SelectNewWith(String, MemberDeclaration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.String, TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration())
  name.vb: SelectNewWith(String, MemberDeclaration())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.Int32,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.Int32,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  id: SelectNewWith(System.Int32,TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: SelectNewWith(Int32, MemberDeclaration[])
  nameWithType: TCQLExpression.SelectNewWith(Int32, MemberDeclaration[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.Int32, TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new <xref href=\"SelectNewWith\" data-throw-if-not-resolved=\"false\"></xref> AST node.\n"
  syntax:
    content: public static SelectNewWith SelectNewWith(int top, params MemberDeclaration[] members)
    parameters:
    - id: top
      type: System.Int32
      description: The top limit, use -1 to set to unlimited.
    - id: members
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[]
      description: The members of the select new with list.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.SelectNewWith
      description: Returns a new instance of the <xref href="SelectNewWith" data-throw-if-not-resolved="false"></xref> AST node.
    content.vb: Public Shared Function SelectNewWith(top As Integer, ParamArray members As MemberDeclaration()) As SelectNewWith
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith*
  nameWithType.vb: TCQLExpression.SelectNewWith(Int32, MemberDeclaration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith(System.Int32, TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration())
  name.vb: SelectNewWith(Int32, MemberDeclaration())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias(System.String,System.Int32)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias(System.String,System.Int32)
  id: SelectAlias(System.String,System.Int32)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: SelectAlias(String, Int32)
  nameWithType: TCQLExpression.SelectAlias(String, Int32)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias(System.String, System.Int32)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a select alias.\n"
  syntax:
    content: public static SelectAlias SelectAlias(string aliasName = null, int top = -1)
    parameters:
    - id: aliasName
      type: System.String
      description: The (optional) name of the alias to select.
    - id: top
      type: System.Int32
      description: the (optional) top count
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.SelectAlias
      description: Returns a new select alias.
    content.vb: Public Shared Function SelectAlias(aliasName As String = Nothing, top As Integer = -1) As SelectAlias
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: Member(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Member(String, Expression)
  nameWithType: TCQLExpression.Member(String, Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String, TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a member declaration for an expression member.\n"
  syntax:
    content: public static MemberDeclarationNamedExpression Member(string name, Expression expression)
    parameters:
    - id: name
      type: System.String
      description: The name of the new member.
    - id: expression
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The expression of the member.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedExpression
      description: Returns a new instance of a <xref href="TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedExpression" data-throw-if-not-resolved="false"></xref> AST node.
    content.vb: Public Shared Function Member(name As String, expression As Expression) As MemberDeclarationNamedExpression
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String,System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String,System.String)
  id: Member(System.String,System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Member(String, String)
  nameWithType: TCQLExpression.Member(String, String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new member declaration for an identifier member.\n"
  syntax:
    content: public static MemberDeclarationNamedIdentifier Member(string name, string identifier)
    parameters:
    - id: name
      type: System.String
      description: The name of the new member.
    - id: identifier
      type: System.String
      description: The identifier the member references.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedIdentifier
      description: Returns a new instance of the <xref href="TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedIdentifier" data-throw-if-not-resolved="false"></xref> AST node.
    content.vb: Public Shared Function Member(name As String, identifier As String) As MemberDeclarationNamedIdentifier
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: Sum(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Sum(Expression)
  nameWithType: TCQLExpression.Sum(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a Sum aggregation function call.\n"
  syntax:
    content: public static AggregationFunctionCall Sum(Expression expression)
    parameters:
    - id: expression
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The expression to sum.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
      description: Returns a new Aggregation Function call that can be used in a select new with.
    content.vb: Public Shared Function Sum(expression As Expression) As AggregationFunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: Average(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Average(Expression)
  nameWithType: TCQLExpression.Average(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a Avg aggregation function call.\n"
  syntax:
    content: public static AggregationFunctionCall Average(Expression expression)
    parameters:
    - id: expression
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The expression to average.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
      description: Returns a new Aggregation Function call that can be used in a select new with.
    content.vb: Public Shared Function Average(expression As Expression) As AggregationFunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: Min(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Min(Expression)
  nameWithType: TCQLExpression.Min(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a Min aggregate function AST node.\n"
  syntax:
    content: public static AggregationFunctionCall Min(Expression property)
    parameters:
    - id: property
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The property to aggrgate.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall" data-throw-if-not-resolved="false"></xref> AST node describing the Min aggregation.
    content.vb: Public Shared Function Min(property As Expression) As AggregationFunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: Max(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Max(Expression)
  nameWithType: TCQLExpression.Max(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a Max aggregate function AST node.\n"
  syntax:
    content: public static AggregationFunctionCall Max(Expression expression)
    parameters:
    - id: expression
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The expression to aggrgate.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall" data-throw-if-not-resolved="false"></xref> AST node describing the Max aggregation.
    content.vb: Public Shared Function Max(expression As Expression) As AggregationFunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: CountDistinct(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: CountDistinct(Expression)
  nameWithType: TCQLExpression.CountDistinct(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct(TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a CountDistinct aggregate function AST node.\n"
  syntax:
    content: public static AggregationFunctionCall CountDistinct(Expression expression)
    parameters:
    - id: expression
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The expression to aggrgate.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall" data-throw-if-not-resolved="false"></xref> AST node describing the Max aggregation.
    content.vb: Public Shared Function CountDistinct(expression As Expression) As AggregationFunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count
  id: Count
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Count()
  nameWithType: TCQLExpression.Count()
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count()
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a count aggregation.\n"
  syntax:
    content: public static AggregationFunctionCall Count()
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
      description: Returns a new AggregatinoFunctionCall AST node representing a count.
    content.vb: Public Shared Function Count As AggregationFunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate(TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate(TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: Aggregate(TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Aggregate(AggregationFunctionCallType, Expression)
  nameWithType: TCQLExpression.Aggregate(AggregationFunctionCallType, Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate(TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType, TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a Aggregate function call.\n"
  syntax:
    content: public static AggregationFunctionCall Aggregate(AggregationFunctionCallType aggregation, Expression expression)
    parameters:
    - id: aggregation
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType
      description: The aggregation type.
    - id: expression
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The expression to aggregate.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
      description: Returns a new Aggregation Function call that can be used in a select new with.
    content.vb: Public Shared Function Aggregate(aggregation As AggregationFunctionCallType, expression As Expression) As AggregationFunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary(TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary(TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  id: MakeBinary(TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator,TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: MakeBinary(BinaryOperator, Expression, Expression)
  nameWithType: TCQLExpression.MakeBinary(BinaryOperator, Expression, Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary(TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator, TimeCockpit.Data.QueryLanguage.Syntax.Expression, TimeCockpit.Data.QueryLanguage.Syntax.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a binary expression combining the left hand and the right hand expression with the operator given.\n"
  syntax:
    content: public static BinaryExpression MakeBinary(BinaryOperator op, Expression leftHand, Expression rightHand)
    parameters:
    - id: op
      type: TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator
      description: The operator to use.
    - id: leftHand
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The left hand argument to the operator.
    - id: rightHand
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: the right hand argument to the operator.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.BinaryExpression
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.BinaryExpression" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function MakeBinary(op As BinaryOperator, leftHand As Expression, rightHand As Expression) As BinaryExpression
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String)
  id: Property(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Property(String)
  nameWithType: TCQLExpression.Property(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new instance of the <xref href=\"TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public static MemberAccess Property(string property)
    parameters:
    - id: property
      type: System.String
      description: the name of the property.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Property(property As String) As MemberAccess
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String[])
  id: Property(System.String[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Property(String[])
  nameWithType: TCQLExpression.Property(String[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nConstructs a member access with the path elements as arguments.\n"
  syntax:
    content: public static MemberAccess Property(params string[] propertyPath)
    parameters:
    - id: propertyPath
      type: System.String[]
      description: the property path.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Property(ParamArray propertyPath As String()) As MemberAccess
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property*
  nameWithType.vb: TCQLExpression.Property(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property(System.String())
  name.vb: Property(String())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter(System.String)
  id: Parameter(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Parameter(String)
  nameWithType: TCQLExpression.Parameter(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new instance of the <xref href=\"TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter(System.String)\" data-throw-if-not-resolved=\"false\"></xref> class.\nNote that the leading @ to parameter names is part of the grammar and therefore may not be part of the parameterName.\n"
  syntax:
    content: public static Parameter Parameter(string parameterName)
    parameters:
    - id: parameterName
      type: System.String
      description: The name of the parameter.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Parameter
      description: Returns a new instance of the <xref href="TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter(System.String)" data-throw-if-not-resolved="false"></xref> class.
    content.vb: Public Shared Function Parameter(parameterName As String) As Parameter
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Boolean)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Boolean)
  id: Constant(System.Boolean)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Constant(Boolean)
  nameWithType: TCQLExpression.Constant(Boolean)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Boolean)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nShortcut method to <xref href=\"TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant.True\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant.False\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public static BooleanConstant Constant(bool value)
    parameters:
    - id: value
      type: System.Boolean
      description: The value of the constant.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant
      description: Returns <xref href="TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant.True" data-throw-if-not-resolved="false"></xref> if value is true, <xref href="TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant.False" data-throw-if-not-resolved="false"></xref> otherwise.
    content.vb: Public Shared Function Constant(value As Boolean) As BooleanConstant
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.String)
  id: Constant(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Constant(String)
  nameWithType: TCQLExpression.Constant(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a string constant.\n"
  syntax:
    content: public static StringConstant Constant(string stringValue)
    parameters:
    - id: stringValue
      type: System.String
      description: The value of the string constant.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.StringConstant
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.StringConstant" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Constant(stringValue As String) As StringConstant
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Decimal)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Decimal)
  id: Constant(System.Decimal)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Constant(Decimal)
  nameWithType: TCQLExpression.Constant(Decimal)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Decimal)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a decimal constant.\n"
  syntax:
    content: public static DecimalConstant Constant(decimal numericValue)
    parameters:
    - id: numericValue
      type: System.Decimal
      description: The numeric value.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.DecimalConstant
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.DecimalConstant" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Constant(numericValue As Decimal) As DecimalConstant
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Guid)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Guid)
  id: Constant(System.Guid)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Constant(Guid)
  nameWithType: TCQLExpression.Constant(Guid)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant(System.Guid)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a guid constant.\n"
  syntax:
    content: public static GuidConstant Constant(Guid guid)
    parameters:
    - id: guid
      type: System.Guid
      description: The value of the constant.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.GuidConstant
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.GuidConstant" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Constant(guid As Guid) As GuidConstant
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant(System.DateTime)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant(System.DateTime)
  id: DateConstant(System.DateTime)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: DateConstant(DateTime)
  nameWithType: TCQLExpression.DateConstant(DateTime)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant(System.DateTime)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a DateConstant.\n"
  syntax:
    content: public static DateConstant DateConstant(DateTime date)
    parameters:
    - id: date
      type: System.DateTime
      description: the date value of the constant.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.DateConstant
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant(System.DateTime)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function DateConstant(date As Date) As DateConstant
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant(System.DateTime)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant(System.DateTime)
  id: DateTimeConstant(System.DateTime)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: DateTimeConstant(DateTime)
  nameWithType: TCQLExpression.DateTimeConstant(DateTime)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant(System.DateTime)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a DateTimeConstant.\n"
  syntax:
    content: public static DateTimeConstant DateTimeConstant(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The value of the constant.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.DateTimeConstant
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant(System.DateTime)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function DateTimeConstant(dateTime As Date) As DateTimeConstant
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  id: FunctionCall(System.String,TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: FunctionCall(String, Expression[])
  nameWithType: TCQLExpression.FunctionCall(String, Expression[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall(System.String, TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a function call object.\n"
  syntax:
    content: public static FunctionCall FunctionCall(string functionName, params Expression[] parameters)
    parameters:
    - id: functionName
      type: System.String
      description: The name of the function to call.
    - id: parameters
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression[]
      description: The parameter expressions to the function.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.FunctionCall
      description: Returns a new instance of <xref href="TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall(System.String%2cTimeCockpit.Data.QueryLanguage.Syntax.Expression%5b%5d)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FunctionCall(functionName As String, ParamArray parameters As Expression()) As FunctionCall
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall*
  nameWithType.vb: TCQLExpression.FunctionCall(String, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall(System.String, TimeCockpit.Data.QueryLanguage.Syntax.Expression())
  name.vb: FunctionCall(String, Expression())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  id: Set(TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Set(Expression[])
  nameWithType: TCQLExpression.Set(Expression[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(TimeCockpit.Data.QueryLanguage.Syntax.Expression[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreats an explicit set expression.\n"
  syntax:
    content: public static ExplicitSet Set(params Expression[] elementExpressions)
    parameters:
    - id: elementExpressions
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression[]
      description: The expressions producing the elements.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.ExplicitSet
      description: 'Returns a new Instance of the <xref href="TimeCockpit.Data.QueryLanguage.Syntax.ExplicitSet" data-throw-if-not-resolved="false"></xref>. '
    content.vb: Public Shared Function Set(ParamArray elementExpressions As Expression()) As ExplicitSet
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set*
  nameWithType.vb: TCQLExpression.Set(Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(TimeCockpit.Data.QueryLanguage.Syntax.Expression())
  name.vb: Set(Expression())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(System.String,System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(System.String,System.String)
  id: Set(System.String,System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Set(String, String)
  nameWithType: TCQLExpression.Set(String, String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set(System.String, System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a named set reference.\n"
  syntax:
    content: public static NamedSetReference Set(string setName, string propertyName = null)
    parameters:
    - id: setName
      type: System.String
      description: The name of the set to reference.
    - id: propertyName
      type: System.String
      description: The name of the property.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.NamedSetReference
      description: Returns the named set reference.
    content.vb: Public Shared Function Set(setName As String, propertyName As String = Nothing) As NamedSetReference
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess)
  id: Member(TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: Member(MemberAccess)
  nameWithType: TCQLExpression.Member(MemberAccess)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member(TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a forwarded member declaration used in a select new with.\nE.g.\nIn\n<pre><code>From X In Timesheet Select New With { X.BeginTime } </code></pre>\n&quot;X.BeginTime&quot; refers to such a member declaration.\n"
  syntax:
    content: public static MemberDeclarationForwarded Member(MemberAccess memberAccess)
    parameters:
    - id: memberAccess
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess
      description: The member access describing the forwarded property.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationForwarded
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationForwarded" data-throw-if-not-resolved="false"></xref> AST Node.
    content.vb: Public Shared Function Member(memberAccess As MemberAccess) As MemberDeclarationForwarded
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression,TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[])
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression,TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[])
  id: OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression,TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[])
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: OrderBy(OrderByExpression, OrderByExpression[])
  nameWithType: TCQLExpression.OrderBy(OrderByExpression, OrderByExpression[])
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression, TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[])
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new order by.\n"
  syntax:
    content: public static OrderBy OrderBy(OrderByExpression firstExpression, params OrderByExpression[] additionalOrderBys)
    parameters:
    - id: firstExpression
      type: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
      description: The first expression to order by.
    - id: additionalOrderBys
      type: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[]
      description: The second expression to order by.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.OrderBy
      description: Returns a new instance of the <xref href="OrderBy" data-throw-if-not-resolved="false"></xref> node.
    content.vb: Public Shared Function OrderBy(firstExpression As OrderByExpression, ParamArray additionalOrderBys As OrderByExpression()) As OrderBy
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy*
  nameWithType.vb: TCQLExpression.OrderBy(OrderByExpression, OrderByExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression, TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression())
  name.vb: OrderBy(OrderByExpression, OrderByExpression())
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.SortDirection)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.SortDirection)
  id: OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.Expression,TimeCockpit.Data.QueryLanguage.Syntax.SortDirection)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: OrderBy(Expression, SortDirection)
  nameWithType: TCQLExpression.OrderBy(Expression, SortDirection)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy(TimeCockpit.Data.QueryLanguage.Syntax.Expression, TimeCockpit.Data.QueryLanguage.Syntax.SortDirection)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a new Orderby expression.\n"
  syntax:
    content: public static OrderByExpression OrderBy(Expression sortExpression, SortDirection sortOrder)
    parameters:
    - id: sortExpression
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: The expression producing the property to sort by.
    - id: sortOrder
      type: TimeCockpit.Data.QueryLanguage.Syntax.SortDirection
      description: 'The sort order, <xref href="TimeCockpit.Data.QueryLanguage.Syntax.SortDirection.Ascending" data-throw-if-not-resolved="false"></xref> or <xref href="TimeCockpit.Data.QueryLanguage.Syntax.SortDirection.Descending" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
      description: Returns a new <xref href="TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function OrderBy(sortExpression As Expression, sortOrder As SortDirection) As OrderByExpression
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake(System.Int32,System.Int32)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake(System.Int32,System.Int32)
  id: SkipAndTake(System.Int32,System.Int32)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: SkipAndTake(Int32, Int32)
  nameWithType: TCQLExpression.SkipAndTake(Int32, Int32)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake(System.Int32, System.Int32)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nCreates a skip and take structure.\n"
  syntax:
    content: public static SkipAndTake SkipAndTake(int skip, int take)
    parameters:
    - id: skip
      type: System.Int32
      description: The skip value.
    - id: take
      type: System.Int32
      description: the take value, -1 if unbound.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake
      description: Returns the <xref href="TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake(System.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function SkipAndTake(skip As Integer, take As Integer) As SkipAndTake
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery(System.String)
  id: ParseQuery(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: ParseQuery(String)
  nameWithType: TCQLExpression.ParseQuery(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nUses the existing ast to convert a tcql query to an sytanx query representation.\n"
  syntax:
    content: public static Query ParseQuery(string query)
    parameters:
    - id: query
      type: System.String
      description: The query to parse.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Query
      description: Returns the Syntax Tree of the query.
    content.vb: Public Shared Function ParseQuery(query As String) As Query
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression(System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression(System.String)
  id: ParseExpression(System.String)
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: ParseExpression(String)
  nameWithType: TCQLExpression.ParseExpression(String)
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression(System.String)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nUses the existing AST to convert a tcql expression to a new expression representation.\n"
  syntax:
    content: public static Expression ParseExpression(string expression)
    parameters:
    - id: expression
      type: System.String
      description: The expression to parse.
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.Expression
      description: Returns the expression tree.
    content.vb: Public Shared Function ParseExpression(expression As String) As Expression
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll
  commentId: P:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll
  id: IncludeAll
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: IncludeAll
  nameWithType: TCQLExpression.IncludeAll
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nGets the single include all (<xref href=\"TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeRelation.IncludeAll\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  syntax:
    content: public static EntitySourceIncludeRelation IncludeAll { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeRelation
    content.vb: Public Shared ReadOnly Property IncludeAll As EntitySourceIncludeRelation
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null
  commentId: P:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null
  id: "Null"
  parent: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression
  langs:
  - csharp
  - vb
  name: "Null"
  nameWithType: TCQLExpression.Null
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null
  type: Property
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Syntax
  summary: "\nGets the null constant.\n"
  syntax:
    content: public static NullConstant Null { get; }
    parameters: []
    return:
      type: TimeCockpit.Data.QueryLanguage.Syntax.NullConstant
    content.vb: Public Shared ReadOnly Property Null As NullConstant
  overload: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: TimeCockpit.Data.QueryLanguage.Syntax
  commentId: N:TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: TimeCockpit.Data.QueryLanguage.Syntax
  nameWithType: TimeCockpit.Data.QueryLanguage.Syntax
  fullName: TimeCockpit.Data.QueryLanguage.Syntax
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: QueryOptions
  nameWithType: QueryOptions
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.QueryOptions
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query
  isExternal: true
  name: Query
  nameWithType: TCQLExpression.Query
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Query
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeCockpit.Data.QueryLanguage.Syntax.Query
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.Query
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: Query
  nameWithType: Query
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.Query
- uid: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: QuerySource
  nameWithType: QuerySource
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.QuerySource
- uid: TimeCockpit.Data.QueryLanguage.Syntax.Expression
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.Expression
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.Expression
- uid: TimeCockpit.Data.QueryLanguage.Syntax.Select
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.Select
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: Select
  nameWithType: Select
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.Select
- uid: TimeCockpit.Data.QueryLanguage.Syntax.OrderBy
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.OrderBy
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: OrderBy
  nameWithType: OrderBy
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.OrderBy
- uid: TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: SkipAndTake
  nameWithType: SkipAndTake
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.SkipAndTake
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From
  isExternal: true
  name: From
  nameWithType: TCQLExpression.From
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.From
- uid: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[]
  isExternal: true
  name: EntitySourceInclude[]
  nameWithType: EntitySourceInclude[]
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude[]
  nameWithType.vb: EntitySourceInclude()
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude()
  name.vb: EntitySourceInclude()
  spec.csharp:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude
    name: EntitySourceInclude
    nameWithType: EntitySourceInclude
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude
    name: EntitySourceInclude
    nameWithType: EntitySourceInclude
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceInclude
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.QueryLanguage.Syntax.EntitySource
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.EntitySource
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: EntitySource
  nameWithType: EntitySource
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.EntitySource
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference
  isExternal: true
  name: FromBackReference
  nameWithType: TCQLExpression.FromBackReference
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromBackReference
- uid: TimeCockpit.Data.QueryLanguage.Syntax.BackReferenceSource
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.BackReferenceSource
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: BackReferenceSource
  nameWithType: BackReferenceSource
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.BackReferenceSource
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf
  isExternal: true
  name: FromDeadOf
  nameWithType: TCQLExpression.FromDeadOf
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FromDeadOf
- uid: TimeCockpit.Data.QueryLanguage.Syntax.DeadOfSource
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.DeadOfSource
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: DeadOfSource
  nameWithType: DeadOfSource
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.DeadOfSource
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation
  isExternal: true
  name: IncludeRelation
  nameWithType: TCQLExpression.IncludeRelation
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeRelation
- uid: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeRelation
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeRelation
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: EntitySourceIncludeRelation
  nameWithType: EntitySourceIncludeRelation
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeRelation
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional
  isExternal: true
  name: IncludeConditional
  nameWithType: TCQLExpression.IncludeConditional
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeConditional
- uid: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeConditional
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeConditional
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: EntitySourceIncludeConditional
  nameWithType: EntitySourceIncludeConditional
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.EntitySourceIncludeConditional
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith
  isExternal: true
  name: SelectNewWith
  nameWithType: TCQLExpression.SelectNewWith
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectNewWith
- uid: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[]
  isExternal: true
  name: MemberDeclaration[]
  nameWithType: MemberDeclaration[]
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration[]
  nameWithType.vb: MemberDeclaration()
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration()
  name.vb: MemberDeclaration()
  spec.csharp:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration
    name: MemberDeclaration
    nameWithType: MemberDeclaration
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration
    name: MemberDeclaration
    nameWithType: MemberDeclaration
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclaration
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.QueryLanguage.Syntax.SelectNewWith
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.SelectNewWith
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: SelectNewWith
  nameWithType: SelectNewWith
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.SelectNewWith
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias
  isExternal: true
  name: SelectAlias
  nameWithType: TCQLExpression.SelectAlias
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SelectAlias
- uid: TimeCockpit.Data.QueryLanguage.Syntax.SelectAlias
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.SelectAlias
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: SelectAlias
  nameWithType: SelectAlias
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.SelectAlias
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member
  isExternal: true
  name: Member
  nameWithType: TCQLExpression.Member
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Member
- uid: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedExpression
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedExpression
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: MemberDeclarationNamedExpression
  nameWithType: MemberDeclarationNamedExpression
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedExpression
- uid: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedIdentifier
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedIdentifier
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: MemberDeclarationNamedIdentifier
  nameWithType: MemberDeclarationNamedIdentifier
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationNamedIdentifier
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum
  isExternal: true
  name: Sum
  nameWithType: TCQLExpression.Sum
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Sum
- uid: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: AggregationFunctionCall
  nameWithType: AggregationFunctionCall
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCall
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average
  isExternal: true
  name: Average
  nameWithType: TCQLExpression.Average
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Average
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min
  isExternal: true
  name: Min
  nameWithType: TCQLExpression.Min
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Min
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max
  isExternal: true
  name: Max
  nameWithType: TCQLExpression.Max
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Max
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct
  isExternal: true
  name: CountDistinct
  nameWithType: TCQLExpression.CountDistinct
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.CountDistinct
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count
  isExternal: true
  name: Count
  nameWithType: TCQLExpression.Count
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Count
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate
  isExternal: true
  name: Aggregate
  nameWithType: TCQLExpression.Aggregate
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Aggregate
- uid: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: AggregationFunctionCallType
  nameWithType: AggregationFunctionCallType
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.AggregationFunctionCallType
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary
  isExternal: true
  name: MakeBinary
  nameWithType: TCQLExpression.MakeBinary
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.MakeBinary
- uid: TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: BinaryOperator
  nameWithType: BinaryOperator
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.BinaryOperator
- uid: TimeCockpit.Data.QueryLanguage.Syntax.BinaryExpression
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.BinaryExpression
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.BinaryExpression
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property
  isExternal: true
  name: Property
  nameWithType: TCQLExpression.Property
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Property
- uid: TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: MemberAccess
  nameWithType: MemberAccess
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.MemberAccess
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter
  isExternal: true
  name: Parameter
  nameWithType: TCQLExpression.Parameter
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Parameter
- uid: TimeCockpit.Data.QueryLanguage.Syntax.Parameter
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.Parameter
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: Parameter
  nameWithType: Parameter
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.Parameter
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant
  isExternal: true
  name: Constant
  nameWithType: TCQLExpression.Constant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Constant
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: BooleanConstant
  nameWithType: BooleanConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.BooleanConstant
- uid: TimeCockpit.Data.QueryLanguage.Syntax.StringConstant
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.StringConstant
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: StringConstant
  nameWithType: StringConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.StringConstant
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: TimeCockpit.Data.QueryLanguage.Syntax.DecimalConstant
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.DecimalConstant
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: DecimalConstant
  nameWithType: DecimalConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.DecimalConstant
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TimeCockpit.Data.QueryLanguage.Syntax.GuidConstant
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.GuidConstant
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: GuidConstant
  nameWithType: GuidConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.GuidConstant
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant
  isExternal: true
  name: DateConstant
  nameWithType: TCQLExpression.DateConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateConstant
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: TimeCockpit.Data.QueryLanguage.Syntax.DateConstant
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.DateConstant
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: DateConstant
  nameWithType: DateConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.DateConstant
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant
  isExternal: true
  name: DateTimeConstant
  nameWithType: TCQLExpression.DateTimeConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.DateTimeConstant
- uid: TimeCockpit.Data.QueryLanguage.Syntax.DateTimeConstant
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.DateTimeConstant
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: DateTimeConstant
  nameWithType: DateTimeConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.DateTimeConstant
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall
  isExternal: true
  name: FunctionCall
  nameWithType: TCQLExpression.FunctionCall
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.FunctionCall
- uid: TimeCockpit.Data.QueryLanguage.Syntax.Expression[]
  isExternal: true
  name: Expression[]
  nameWithType: Expression[]
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.Expression[]
  nameWithType.vb: Expression()
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.Expression()
  name.vb: Expression()
  spec.csharp:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.Expression
    name: Expression
    nameWithType: Expression
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.Expression
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.Expression
    name: Expression
    nameWithType: Expression
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.Expression
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.QueryLanguage.Syntax.FunctionCall
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.FunctionCall
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: FunctionCall
  nameWithType: FunctionCall
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.FunctionCall
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set
  isExternal: true
  name: Set
  nameWithType: TCQLExpression.Set
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Set
- uid: TimeCockpit.Data.QueryLanguage.Syntax.ExplicitSet
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.ExplicitSet
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: ExplicitSet
  nameWithType: ExplicitSet
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.ExplicitSet
- uid: TimeCockpit.Data.QueryLanguage.Syntax.NamedSetReference
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.NamedSetReference
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: NamedSetReference
  nameWithType: NamedSetReference
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.NamedSetReference
- uid: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationForwarded
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationForwarded
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: MemberDeclarationForwarded
  nameWithType: MemberDeclarationForwarded
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.MemberDeclarationForwarded
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy
  isExternal: true
  name: OrderBy
  nameWithType: TCQLExpression.OrderBy
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.OrderBy
- uid: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: OrderByExpression
  nameWithType: OrderByExpression
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
- uid: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[]
  isExternal: true
  name: OrderByExpression[]
  nameWithType: OrderByExpression[]
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression[]
  nameWithType.vb: OrderByExpression()
  fullName.vb: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression()
  name.vb: OrderByExpression()
  spec.csharp:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
    name: OrderByExpression
    nameWithType: OrderByExpression
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
    name: OrderByExpression
    nameWithType: OrderByExpression
    fullName: TimeCockpit.Data.QueryLanguage.Syntax.OrderByExpression
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.QueryLanguage.Syntax.SortDirection
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.SortDirection
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: SortDirection
  nameWithType: SortDirection
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.SortDirection
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake
  isExternal: true
  name: SkipAndTake
  nameWithType: TCQLExpression.SkipAndTake
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.SkipAndTake
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery
  isExternal: true
  name: ParseQuery
  nameWithType: TCQLExpression.ParseQuery
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseQuery
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression
  isExternal: true
  name: ParseExpression
  nameWithType: TCQLExpression.ParseExpression
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.ParseExpression
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll
  isExternal: true
  name: IncludeAll
  nameWithType: TCQLExpression.IncludeAll
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.IncludeAll
- uid: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null
  isExternal: true
  name: "Null"
  nameWithType: TCQLExpression.Null
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.TCQLExpression.Null
- uid: TimeCockpit.Data.QueryLanguage.Syntax.NullConstant
  commentId: T:TimeCockpit.Data.QueryLanguage.Syntax.NullConstant
  parent: TimeCockpit.Data.QueryLanguage.Syntax
  isExternal: true
  name: NullConstant
  nameWithType: NullConstant
  fullName: TimeCockpit.Data.QueryLanguage.Syntax.NullConstant
