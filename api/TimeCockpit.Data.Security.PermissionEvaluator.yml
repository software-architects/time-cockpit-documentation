### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Security.PermissionEvaluator
  commentId: T:TimeCockpit.Data.Security.PermissionEvaluator
  id: PermissionEvaluator
  parent: TimeCockpit.Data.Security
  children:
  - TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  - TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  - TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Security.PermissionType)
  - TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission(TimeCockpit.Data.EntityObject,System.String,TimeCockpit.Data.Security.PermissionType)
  - TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission(TimeCockpit.Data.IDataContext,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.Security.PermissionType)
  - TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget(TimeCockpit.Data.Security.Permission[],TimeCockpit.Data.Security.PermissionTarget,TimeCockpit.Data.Environment,TimeCockpit.Data.Security.PermissionType)
  langs:
  - csharp
  - vb
  name: PermissionEvaluator
  nameWithType: PermissionEvaluator
  fullName: TimeCockpit.Data.Security.PermissionEvaluator
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    id: PermissionEvaluator
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    startLine: 19
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Security
  summary: "\nRepresents a utility class that evaluates permissions.\n"
  example: []
  syntax:
    content: public static class PermissionEvaluator
    content.vb: Public Module PermissionEvaluator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget(TimeCockpit.Data.Security.Permission[],TimeCockpit.Data.Security.PermissionTarget,TimeCockpit.Data.Environment,TimeCockpit.Data.Security.PermissionType)
  commentId: M:TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget(TimeCockpit.Data.Security.Permission[],TimeCockpit.Data.Security.PermissionTarget,TimeCockpit.Data.Environment,TimeCockpit.Data.Security.PermissionType)
  id: HasPermissionForGivenPermissionTarget(TimeCockpit.Data.Security.Permission[],TimeCockpit.Data.Security.PermissionTarget,TimeCockpit.Data.Environment,TimeCockpit.Data.Security.PermissionType)
  parent: TimeCockpit.Data.Security.PermissionEvaluator
  langs:
  - csharp
  - vb
  name: HasPermissionForGivenPermissionTarget(Permission[], PermissionTarget, Environment, PermissionType)
  nameWithType: PermissionEvaluator.HasPermissionForGivenPermissionTarget(Permission[], PermissionTarget, Environment, PermissionType)
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget(TimeCockpit.Data.Security.Permission[], TimeCockpit.Data.Security.PermissionTarget, TimeCockpit.Data.Environment, TimeCockpit.Data.Security.PermissionType)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    id: HasPermissionForGivenPermissionTarget
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    startLine: 48
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Security
  summary: "\nDetermines whether any of the permissions with type &quot;permissionIdentifier&quot; evalualtes to true.\n"
  example: []
  syntax:
    content: public static bool HasPermissionForGivenPermissionTarget(Permission[] permissions, PermissionTarget permissionTarget, Environment environment, PermissionType permissionType)
    parameters:
    - id: permissions
      type: TimeCockpit.Data.Security.Permission[]
      description: The permissions to check for satisfaction.
    - id: permissionTarget
      type: TimeCockpit.Data.Security.PermissionTarget
      description: The permission target.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: The environment.
    - id: permissionType
      type: TimeCockpit.Data.Security.PermissionType
      description: The permission identifier.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if any of the specified permissions evaluates to true; otherwise, <code>false</code>.\n"
    content.vb: Public Shared Function HasPermissionForGivenPermissionTarget(permissions As Permission(), permissionTarget As PermissionTarget, environment As Environment, permissionType As PermissionType) As Boolean
  overload: TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: thrown if permissionIdentifier is nof valid for the given permissionTarge
  nameWithType.vb: PermissionEvaluator.HasPermissionForGivenPermissionTarget(Permission(), PermissionTarget, Environment, PermissionType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget(TimeCockpit.Data.Security.Permission(), TimeCockpit.Data.Security.PermissionTarget, TimeCockpit.Data.Environment, TimeCockpit.Data.Security.PermissionType)
  name.vb: HasPermissionForGivenPermissionTarget(Permission(), PermissionTarget, Environment, PermissionType)
- uid: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  commentId: M:TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  id: GetUnsatisfiedEntityCrudPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  parent: TimeCockpit.Data.Security.PermissionEvaluator
  langs:
  - csharp
  - vb
  name: GetUnsatisfiedEntityCrudPermissions(EntityObject, Environment)
  nameWithType: PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions(EntityObject, Environment)
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions(TimeCockpit.Data.EntityObject, TimeCockpit.Data.Environment)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    id: GetUnsatisfiedEntityCrudPermissions
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    startLine: 71
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Security
  summary: "\nGets the unsatisfied entity permissions.\n"
  example: []
  syntax:
    content: public static IEnumerable<Permission> GetUnsatisfiedEntityCrudPermissions(EntityObject entityObject, Environment environment)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The entity object.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: The environment.
    return:
      type: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Security.Permission}
      description: A list of <xref href="TimeCockpit.Data.Security.Permission" data-throw-if-not-resolved="false"></xref>s that are not satisfied in the context of the instance of <xref href="TimeCockpit.Data.EntityObject" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function GetUnsatisfiedEntityCrudPermissions(entityObject As EntityObject, environment As Environment) As IEnumerable(Of Permission)
  overload: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  commentId: M:TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  id: GetUnsatisfiedFieldPermissions(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Environment)
  parent: TimeCockpit.Data.Security.PermissionEvaluator
  langs:
  - csharp
  - vb
  name: GetUnsatisfiedFieldPermissions(EntityObject, Environment)
  nameWithType: PermissionEvaluator.GetUnsatisfiedFieldPermissions(EntityObject, Environment)
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions(TimeCockpit.Data.EntityObject, TimeCockpit.Data.Environment)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    id: GetUnsatisfiedFieldPermissions
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    startLine: 102
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Security
  summary: "\nGets the unsatisfied field permissions of an entity object.\n"
  example: []
  syntax:
    content: public static Dictionary<string, Permission[]> GetUnsatisfiedFieldPermissions(EntityObject entityObject, Environment environment)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: The entityobject.
    - id: environment
      type: TimeCockpit.Data.Environment
      description: The environment.
    return:
      type: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.Security.Permission[]}
      description: Returns a dictionary holding the unsatisfied permissions per property field.
    content.vb: Public Shared Function GetUnsatisfiedFieldPermissions(entityObject As EntityObject, environment As Environment) As Dictionary(Of String, Permission())
  overload: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Security.PermissionType)
  commentId: M:TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Security.PermissionType)
  id: HasEntityPermission(TimeCockpit.Data.EntityObject,TimeCockpit.Data.Security.PermissionType)
  parent: TimeCockpit.Data.Security.PermissionEvaluator
  langs:
  - csharp
  - vb
  name: HasEntityPermission(EntityObject, PermissionType)
  nameWithType: PermissionEvaluator.HasEntityPermission(EntityObject, PermissionType)
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission(TimeCockpit.Data.EntityObject, TimeCockpit.Data.Security.PermissionType)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    id: HasEntityPermission
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    startLine: 158
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Security
  summary: "\nCheck if the permission is valid in the context of the entityObject.\n"
  example: []
  syntax:
    content: public static bool HasEntityPermission(EntityObject entityObject, PermissionType permissionType)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: Entity object to validate permissions against.
    - id: permissionType
      type: TimeCockpit.Data.Security.PermissionType
      description: Permission type to check.
    return:
      type: System.Boolean
      description: True if the permission is valid.
    content.vb: Public Shared Function HasEntityPermission(entityObject As EntityObject, permissionType As PermissionType) As Boolean
  overload: TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission(TimeCockpit.Data.IDataContext,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.Security.PermissionType)
  commentId: M:TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission(TimeCockpit.Data.IDataContext,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.Security.PermissionType)
  id: HasModelEntityPermission(TimeCockpit.Data.IDataContext,TimeCockpit.Data.DataModel.ModelEntityBase,TimeCockpit.Data.Security.PermissionType)
  parent: TimeCockpit.Data.Security.PermissionEvaluator
  langs:
  - csharp
  - vb
  name: HasModelEntityPermission(IDataContext, ModelEntityBase, PermissionType)
  nameWithType: PermissionEvaluator.HasModelEntityPermission(IDataContext, ModelEntityBase, PermissionType)
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission(TimeCockpit.Data.IDataContext, TimeCockpit.Data.DataModel.ModelEntityBase, TimeCockpit.Data.Security.PermissionType)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    id: HasModelEntityPermission
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    startLine: 171
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Security
  summary: "\nChecks if the permission is valid for a model entity.\n"
  example: []
  syntax:
    content: public static bool ? HasModelEntityPermission(IDataContext dataContext, ModelEntityBase modelEntity, PermissionType permissionType)
    parameters:
    - id: dataContext
      type: TimeCockpit.Data.IDataContext
      description: The data context to use.
    - id: modelEntity
      type: TimeCockpit.Data.DataModel.ModelEntityBase
      description: The model entity to check.
    - id: permissionType
      type: TimeCockpit.Data.Security.PermissionType
      description: The type of the permission.
    return:
      type: System.Nullable{System.Boolean}
      description: True if the permission is valid, false if the permission is not valid and null if the permission cannot be evaluated without specific entity object.
    content.vb: Public Shared Function HasModelEntityPermission(dataContext As IDataContext, modelEntity As ModelEntityBase, permissionType As PermissionType) As Boolean?
  overload: TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission(TimeCockpit.Data.EntityObject,System.String,TimeCockpit.Data.Security.PermissionType)
  commentId: M:TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission(TimeCockpit.Data.EntityObject,System.String,TimeCockpit.Data.Security.PermissionType)
  id: HasMemberPermission(TimeCockpit.Data.EntityObject,System.String,TimeCockpit.Data.Security.PermissionType)
  parent: TimeCockpit.Data.Security.PermissionEvaluator
  langs:
  - csharp
  - vb
  name: HasMemberPermission(EntityObject, String, PermissionType)
  nameWithType: PermissionEvaluator.HasMemberPermission(EntityObject, String, PermissionType)
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission(TimeCockpit.Data.EntityObject, System.String, TimeCockpit.Data.Security.PermissionType)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    id: HasMemberPermission
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Security/PermissionEvaluator.cs
    startLine: 216
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Security
  summary: "\nCheck if the permission is valid in the context of the entityObject and property.\n"
  example: []
  syntax:
    content: public static bool HasMemberPermission(EntityObject entityObject, string memberName, PermissionType permissionType)
    parameters:
    - id: entityObject
      type: TimeCockpit.Data.EntityObject
      description: Entity object to validate permissions against.
    - id: memberName
      type: System.String
      description: Property or relation to validate permissions for.
    - id: permissionType
      type: TimeCockpit.Data.Security.PermissionType
      description: Permission type to check.
    return:
      type: System.Boolean
      description: True if the permission is valid.
    content.vb: Public Shared Function HasMemberPermission(entityObject As EntityObject, memberName As String, permissionType As PermissionType) As Boolean
  overload: TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TimeCockpit.Data.Security
  commentId: N:TimeCockpit.Data.Security
  isExternal: false
  name: TimeCockpit.Data.Security
  nameWithType: TimeCockpit.Data.Security
  fullName: TimeCockpit.Data.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget*
  commentId: Overload:TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget
  isExternal: false
  name: HasPermissionForGivenPermissionTarget
  nameWithType: PermissionEvaluator.HasPermissionForGivenPermissionTarget
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasPermissionForGivenPermissionTarget
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: TimeCockpit.Data.Security.Permission[]
  name: Permission[]
  nameWithType: Permission[]
  fullName: TimeCockpit.Data.Security.Permission[]
  nameWithType.vb: Permission()
  fullName.vb: TimeCockpit.Data.Security.Permission()
  name.vb: Permission()
  spec.csharp:
  - uid: TimeCockpit.Data.Security.Permission
    name: Permission
    nameWithType: Permission
    fullName: TimeCockpit.Data.Security.Permission
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TimeCockpit.Data.Security.Permission
    name: Permission
    nameWithType: Permission
    fullName: TimeCockpit.Data.Security.Permission
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeCockpit.Data.Security.PermissionTarget
  commentId: T:TimeCockpit.Data.Security.PermissionTarget
  parent: TimeCockpit.Data.Security
  isExternal: false
  name: PermissionTarget
  nameWithType: PermissionTarget
  fullName: TimeCockpit.Data.Security.PermissionTarget
- uid: TimeCockpit.Data.Environment
  commentId: T:TimeCockpit.Data.Environment
  parent: TimeCockpit.Data
  isExternal: false
  name: Environment
  nameWithType: Environment
  fullName: TimeCockpit.Data.Environment
- uid: TimeCockpit.Data.Security.PermissionType
  commentId: T:TimeCockpit.Data.Security.PermissionType
  parent: TimeCockpit.Data.Security
  isExternal: false
  name: PermissionType
  nameWithType: PermissionType
  fullName: TimeCockpit.Data.Security.PermissionType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TimeCockpit.Data
  commentId: N:TimeCockpit.Data
  isExternal: false
  name: TimeCockpit.Data
  nameWithType: TimeCockpit.Data
  fullName: TimeCockpit.Data
- uid: TimeCockpit.Data.Security.Permission
  commentId: T:TimeCockpit.Data.Security.Permission
  parent: TimeCockpit.Data.Security
  isExternal: false
  name: Permission
  nameWithType: Permission
  fullName: TimeCockpit.Data.Security.Permission
- uid: TimeCockpit.Data.EntityObject
  commentId: T:TimeCockpit.Data.EntityObject
  parent: TimeCockpit.Data
  isExternal: false
  name: EntityObject
  nameWithType: EntityObject
  fullName: TimeCockpit.Data.EntityObject
- uid: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions*
  commentId: Overload:TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions
  isExternal: false
  name: GetUnsatisfiedEntityCrudPermissions
  nameWithType: PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedEntityCrudPermissions
- uid: System.Collections.Generic.IEnumerable{TimeCockpit.Data.Security.Permission}
  commentId: T:System.Collections.Generic.IEnumerable{TimeCockpit.Data.Security.Permission}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Permission>
  nameWithType: IEnumerable<Permission>
  fullName: System.Collections.Generic.IEnumerable<TimeCockpit.Data.Security.Permission>
  nameWithType.vb: IEnumerable(Of Permission)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TimeCockpit.Data.Security.Permission)
  name.vb: IEnumerable(Of Permission)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeCockpit.Data.Security.Permission
    name: Permission
    nameWithType: Permission
    fullName: TimeCockpit.Data.Security.Permission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeCockpit.Data.Security.Permission
    name: Permission
    nameWithType: Permission
    fullName: TimeCockpit.Data.Security.Permission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions*
  commentId: Overload:TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions
  isExternal: false
  name: GetUnsatisfiedFieldPermissions
  nameWithType: PermissionEvaluator.GetUnsatisfiedFieldPermissions
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.GetUnsatisfiedFieldPermissions
- uid: System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.Security.Permission[]}
  commentId: T:System.Collections.Generic.Dictionary{System.String,TimeCockpit.Data.Security.Permission[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Permission[]>
  nameWithType: Dictionary<String, Permission[]>
  fullName: System.Collections.Generic.Dictionary<System.String, TimeCockpit.Data.Security.Permission[]>
  nameWithType.vb: Dictionary(Of String, Permission())
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, TimeCockpit.Data.Security.Permission())
  name.vb: Dictionary(Of String, Permission())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Security.Permission
    name: Permission
    nameWithType: Permission
    fullName: TimeCockpit.Data.Security.Permission
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Security.Permission
    name: Permission
    nameWithType: Permission
    fullName: TimeCockpit.Data.Security.Permission
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission*
  commentId: Overload:TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission
  isExternal: false
  name: HasEntityPermission
  nameWithType: PermissionEvaluator.HasEntityPermission
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasEntityPermission
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission*
  commentId: Overload:TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission
  isExternal: false
  name: HasModelEntityPermission
  nameWithType: PermissionEvaluator.HasModelEntityPermission
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasModelEntityPermission
- uid: TimeCockpit.Data.IDataContext
  commentId: T:TimeCockpit.Data.IDataContext
  parent: TimeCockpit.Data
  isExternal: false
  name: IDataContext
  nameWithType: IDataContext
  fullName: TimeCockpit.Data.IDataContext
- uid: TimeCockpit.Data.DataModel.ModelEntityBase
  commentId: T:TimeCockpit.Data.DataModel.ModelEntityBase
  parent: TimeCockpit.Data.DataModel
  isExternal: false
  name: ModelEntityBase
  nameWithType: ModelEntityBase
  fullName: TimeCockpit.Data.DataModel.ModelEntityBase
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: false
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission*
  commentId: Overload:TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission
  isExternal: false
  name: HasMemberPermission
  nameWithType: PermissionEvaluator.HasMemberPermission
  fullName: TimeCockpit.Data.Security.PermissionEvaluator.HasMemberPermission
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
