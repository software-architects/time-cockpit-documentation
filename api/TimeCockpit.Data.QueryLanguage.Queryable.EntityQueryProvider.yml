### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  commentId: T:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  id: EntityQueryProvider
  parent: TimeCockpit.Data.QueryLanguage.Queryable
  children:
  - TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.#ctor(TimeCockpit.Data.DataModel.Model,System.String)
  - TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  - TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  - TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  - TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  langs:
  - csharp
  - vb
  name: EntityQueryProvider
  nameWithType: EntityQueryProvider
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  type: Class
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Queryable
  summary: "\nQueryProvider for Entity Queries.\n"
  syntax:
    content: 'public class EntityQueryProvider : IQueryProvider'
    content.vb: >-
      Public Class EntityQueryProvider
          Implements IQueryProvider
  inheritance:
  - System.Object
  implements:
  - System.Linq.IQueryProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.#ctor(TimeCockpit.Data.DataModel.Model,System.String)
  commentId: M:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.#ctor(TimeCockpit.Data.DataModel.Model,System.String)
  id: '#ctor(TimeCockpit.Data.DataModel.Model,System.String)'
  parent: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: EntityQueryProvider(Model, String)
  nameWithType: EntityQueryProvider.EntityQueryProvider(Model, String)
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.EntityQueryProvider(TimeCockpit.Data.DataModel.Model, System.String)
  type: Constructor
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Queryable
  summary: "\nInitializes a new instance of the <xref href=\"TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public EntityQueryProvider(Model model, string entityName)
    parameters:
    - id: model
      type: TimeCockpit.Data.DataModel.Model
      description: The model.
    - id: entityName
      type: System.String
      description: the name of the entity.
    content.vb: Public Sub New(model As Model, entityName As String)
  overload: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  id: CreateQuery``1(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: CreateQuery<TElement>(Expression)
  nameWithType: EntityQueryProvider.CreateQuery<TElement>(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Queryable
  summary: "\nCreates a query for a specific expression.\n"
  syntax:
    content: public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression of the query.
    typeParameters:
    - id: TElement
      description: The element type.
    return:
      type: System.Linq.IQueryable{{TElement}}
      description: Returns the queryable.
    content.vb: Public Function CreateQuery(Of TElement)(expression As Expression) As IQueryable(Of TElement)
  overload: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery*
  nameWithType.vb: EntityQueryProvider.CreateQuery(Of TElement)(Expression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery(Of TElement)(System.Linq.Expressions.Expression)
  name.vb: CreateQuery(Of TElement)(Expression)
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  id: CreateQuery(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: CreateQuery(Expression)
  nameWithType: EntityQueryProvider.CreateQuery(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Queryable
  summary: "\nCreates a query for a specific expression.\n"
  syntax:
    content: public IQueryable CreateQuery(Expression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression of the query.
    return:
      type: System.Linq.IQueryable
      description: Returns the queryable.
    content.vb: Public Function CreateQuery(expression As Expression) As IQueryable
  overload: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  id: Execute``1(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: Execute<TResult>(Expression)
  nameWithType: EntityQueryProvider.Execute<TResult>(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Queryable
  summary: "\nExecute a query.\n"
  syntax:
    content: public TResult Execute<TResult>(Expression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression.
    typeParameters:
    - id: TResult
      description: The result type.
    return:
      type: '{TResult}'
      description: Returns the result when executing.
    content.vb: Public Function Execute(Of TResult)(expression As Expression) As TResult
  overload: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute*
  nameWithType.vb: EntityQueryProvider.Execute(Of TResult)(Expression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: Execute(Of TResult)(Expression)
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  commentId: M:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  id: Execute(System.Linq.Expressions.Expression)
  parent: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: Execute(Expression)
  nameWithType: EntityQueryProvider.Execute(Expression)
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  type: Method
  source:
    path: TimeCockpit.Data
    isExternal: true
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.QueryLanguage.Queryable
  summary: "\nExecute a query.\n"
  syntax:
    content: public object Execute(Expression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression.
    return:
      type: System.Object
      description: Returns the result when executing.
    content.vb: Public Function Execute(expression As Expression) As Object
  overload: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TimeCockpit.Data.QueryLanguage.Queryable
  commentId: N:TimeCockpit.Data.QueryLanguage.Queryable
  isExternal: true
  name: TimeCockpit.Data.QueryLanguage.Queryable
  nameWithType: TimeCockpit.Data.QueryLanguage.Queryable
  fullName: TimeCockpit.Data.QueryLanguage.Queryable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Linq.IQueryProvider
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.#ctor*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.#ctor
  isExternal: true
  name: EntityQueryProvider
  nameWithType: EntityQueryProvider.EntityQueryProvider
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.EntityQueryProvider
- uid: TimeCockpit.Data.DataModel.Model
  commentId: T:TimeCockpit.Data.DataModel.Model
  parent: TimeCockpit.Data.DataModel
  isExternal: true
  name: Model
  nameWithType: Model
  fullName: TimeCockpit.Data.DataModel.Model
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeCockpit.Data.DataModel
  commentId: N:TimeCockpit.Data.DataModel
  isExternal: true
  name: TimeCockpit.Data.DataModel
  nameWithType: TimeCockpit.Data.DataModel
  fullName: TimeCockpit.Data.DataModel
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery
  isExternal: true
  name: CreateQuery
  nameWithType: EntityQueryProvider.CreateQuery
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.CreateQuery
- uid: System.Linq.Expressions.Expression
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.IQueryable{{TElement}}
  commentId: '!:System.Linq.IQueryable{``0}'
  definition: System.Linq.IQueryable`1
  name: IQueryable<TElement>
  nameWithType: IQueryable<TElement>
  fullName: System.Linq.IQueryable<TElement>
  nameWithType.vb: IQueryable(Of TElement)
  fullName.vb: System.Linq.IQueryable(Of TElement)
  name.vb: IQueryable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: System.Linq.IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: System.Linq.IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute*
  commentId: Overload:TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute
  isExternal: true
  name: Execute
  nameWithType: EntityQueryProvider.Execute
  fullName: TimeCockpit.Data.QueryLanguage.Queryable.EntityQueryProvider.Execute
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  commentId: '!:TResult'
  name: TResult
  nameWithType: TResult
  fullName: TResult
