### YamlMime:ManagedReference
items:
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  commentId: T:TimeCockpit.Data.Extensibility.DynamicTypeProvider
  id: DynamicTypeProvider
  parent: TimeCockpit.Data.Extensibility
  children:
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType(System.String)
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType(System.String)
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType(System.String)
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Reflection.MethodInfo)
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Type)
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface(System.Type)
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod(System.Type)
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders
  - TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider(System.String)
  langs:
  - csharp
  - vb
  name: DynamicTypeProvider
  nameWithType: DynamicTypeProvider
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  type: Class
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: DynamicTypeProvider
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 21
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nA class that loads certain external assemblies\n"
  example: []
  syntax:
    content: public static class DynamicTypeProvider
    content.vb: Public Module DynamicTypeProvider
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders
  commentId: P:TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders
  id: TypeNameProviders
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: TypeNameProviders
  nameWithType: DynamicTypeProvider.TypeNameProviders
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: TypeNameProviders
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 69
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nGets the different type name providers.\n"
  example: []
  syntax:
    content: public static IDictionary<string, ITypeNameProvider> TypeNameProviders { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,TimeCockpit.Data.Extensibility.ITypeNameProvider}
    content.vb: Public Shared ReadOnly Property TypeNameProviders As IDictionary(Of String, ITypeNameProvider)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes
  commentId: P:TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes
  id: FunctionTypes
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: FunctionTypes
  nameWithType: DynamicTypeProvider.FunctionTypes
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: FunctionTypes
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 77
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nGets the function type cache.\n"
  example: []
  syntax:
    content: public static Dictionary<string, Type> FunctionTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Type}
    content.vb: Public Shared ReadOnly Property FunctionTypes As Dictionary(Of String, Type)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes
  commentId: P:TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes
  id: InterfaceTypes
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: InterfaceTypes
  nameWithType: DynamicTypeProvider.InterfaceTypes
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: InterfaceTypes
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 93
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nGets the interface types.\n"
  example: []
  syntax:
    content: public static Dictionary<string, Type> InterfaceTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Type}
    content.vb: Public Shared ReadOnly Property InterfaceTypes As Dictionary(Of String, Type)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes
  commentId: P:TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes
  id: TriggerTypes
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: TriggerTypes
  nameWithType: DynamicTypeProvider.TriggerTypes
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes
  type: Property
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: TriggerTypes
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 109
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nGets the validation method types.\n"
  example: []
  syntax:
    content: public static Dictionary<string, Type> TriggerTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Type}
    content.vb: Public Shared ReadOnly Property TriggerTypes As Dictionary(Of String, Type)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider(System.String)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider(System.String)
  id: UnregisterTypeNameProvider(System.String)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: UnregisterTypeNameProvider(String)
  nameWithType: DynamicTypeProvider.UnregisterTypeNameProvider(String)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: UnregisterTypeNameProvider
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 130
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nUnregisters the type name provider.\n"
  example: []
  syntax:
    content: public static void UnregisterTypeNameProvider(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the type name provider to unregister.
    content.vb: Public Shared Sub UnregisterTypeNameProvider(name As String)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Type)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Type)
  id: RegisterFunction(System.Type)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: RegisterFunction(Type)
  nameWithType: DynamicTypeProvider.RegisterFunction(Type)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Type)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: RegisterFunction
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 139
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nRegisters the function.\n"
  example: []
  syntax:
    content: public static void RegisterFunction(Type functionType)
    parameters:
    - id: functionType
      type: System.Type
      description: Type of the function.
    content.vb: Public Shared Sub RegisterFunction(functionType As Type)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Reflection.MethodInfo)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Reflection.MethodInfo)
  id: RegisterFunction(System.Reflection.MethodInfo)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: RegisterFunction(MethodInfo)
  nameWithType: DynamicTypeProvider.RegisterFunction(MethodInfo)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction(System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: RegisterFunction
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 171
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nRegisters a function to use e.g. in TCQL\n"
  example: []
  syntax:
    content: public static void RegisterFunction(MethodInfo methInfo)
    parameters:
    - id: methInfo
      type: System.Reflection.MethodInfo
      description: The method info of a function.
    content.vb: Public Shared Sub RegisterFunction(methInfo As MethodInfo)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface(System.Type)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface(System.Type)
  id: RegisterInterface(System.Type)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: RegisterInterface(Type)
  nameWithType: DynamicTypeProvider.RegisterInterface(Type)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface(System.Type)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: RegisterInterface
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 215
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nRegisters the interface.\n"
  example: []
  syntax:
    content: public static void RegisterInterface(Type interfaceType)
    parameters:
    - id: interfaceType
      type: System.Type
      description: Type of the interface.
    content.vb: Public Shared Sub RegisterInterface(interfaceType As Type)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod(System.Type)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod(System.Type)
  id: RegisterTriggerMethod(System.Type)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: RegisterTriggerMethod(Type)
  nameWithType: DynamicTypeProvider.RegisterTriggerMethod(Type)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod(System.Type)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: RegisterTriggerMethod
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 238
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nRegisters the validation method.\n"
  example: []
  syntax:
    content: public static void RegisterTriggerMethod(Type triggerType)
    parameters:
    - id: triggerType
      type: System.Type
      description: Type of the validation method.
    content.vb: Public Shared Sub RegisterTriggerMethod(triggerType As Type)
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType(System.String)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType(System.String)
  id: GetFunctionType(System.String)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: GetFunctionType(String)
  nameWithType: DynamicTypeProvider.GetFunctionType(String)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: GetFunctionType
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 262
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nGets the type.\n"
  example: []
  syntax:
    content: public static Type GetFunctionType(string typeName)
    parameters:
    - id: typeName
      type: System.String
      description: Name of the type.
    return:
      type: System.Type
      description: A requested type.
    content.vb: Public Shared Function GetFunctionType(typeName As String) As Type
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType(System.String)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType(System.String)
  id: GetInterfaceType(System.String)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: GetInterfaceType(String)
  nameWithType: DynamicTypeProvider.GetInterfaceType(String)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: GetInterfaceType
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 272
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nGets the type from the interface cache or tries looking at specified locations for it.\n"
  example: []
  syntax:
    content: public static Type GetInterfaceType(string interfaceTypeName)
    parameters:
    - id: interfaceTypeName
      type: System.String
      description: Name of the type.
    return:
      type: System.Type
      description: A requested type.
    content.vb: Public Shared Function GetInterfaceType(interfaceTypeName As String) As Type
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType(System.String)
  commentId: M:TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType(System.String)
  id: GetTriggerType(System.String)
  parent: TimeCockpit.Data.Extensibility.DynamicTypeProvider
  langs:
  - csharp
  - vb
  name: GetTriggerType(String)
  nameWithType: DynamicTypeProvider.GetTriggerType(String)
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType(System.String)
  type: Method
  source:
    remote:
      path: E:/Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    id: GetTriggerType
    path: ../../Projects/TimeCockpit.Development/Production/V 1.53/Hotfix/Source/TimeCockpit.Data/WPF/TimeCockpit.Data/Extensibility/DynamicTypeProvider.cs
    startLine: 282
  assemblies:
  - TimeCockpit.Data
  namespace: TimeCockpit.Data.Extensibility
  summary: "\nGets the type from the validationmethod cache or tries looking at specified locations for it.\n"
  example: []
  syntax:
    content: public static Type GetTriggerType(string triggerTypeName)
    parameters:
    - id: triggerTypeName
      type: System.String
      description: Name of the type.
    return:
      type: System.Type
      description: A requested type.
    content.vb: Public Shared Function GetTriggerType(triggerTypeName As String) As Type
  overload: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TimeCockpit.Data.Extensibility
  commentId: N:TimeCockpit.Data.Extensibility
  isExternal: false
  name: TimeCockpit.Data.Extensibility
  nameWithType: TimeCockpit.Data.Extensibility
  fullName: TimeCockpit.Data.Extensibility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders
  isExternal: false
  name: TypeNameProviders
  nameWithType: DynamicTypeProvider.TypeNameProviders
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TypeNameProviders
- uid: System.Collections.Generic.IDictionary{System.String,TimeCockpit.Data.Extensibility.ITypeNameProvider}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TimeCockpit.Data.Extensibility.ITypeNameProvider}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, ITypeNameProvider>
  nameWithType: IDictionary<String, ITypeNameProvider>
  fullName: System.Collections.Generic.IDictionary<System.String, TimeCockpit.Data.Extensibility.ITypeNameProvider>
  nameWithType.vb: IDictionary(Of String, ITypeNameProvider)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TimeCockpit.Data.Extensibility.ITypeNameProvider)
  name.vb: IDictionary(Of String, ITypeNameProvider)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Extensibility.ITypeNameProvider
    name: ITypeNameProvider
    nameWithType: ITypeNameProvider
    fullName: TimeCockpit.Data.Extensibility.ITypeNameProvider
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeCockpit.Data.Extensibility.ITypeNameProvider
    name: ITypeNameProvider
    nameWithType: ITypeNameProvider
    fullName: TimeCockpit.Data.Extensibility.ITypeNameProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes
  isExternal: false
  name: FunctionTypes
  nameWithType: DynamicTypeProvider.FunctionTypes
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.FunctionTypes
- uid: System.Collections.Generic.Dictionary{System.String,System.Type}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Type>
  nameWithType: Dictionary<String, Type>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Type>
  nameWithType.vb: Dictionary(Of String, Type)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Type)
  name.vb: Dictionary(Of String, Type)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes
  isExternal: false
  name: InterfaceTypes
  nameWithType: DynamicTypeProvider.InterfaceTypes
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.InterfaceTypes
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes
  isExternal: false
  name: TriggerTypes
  nameWithType: DynamicTypeProvider.TriggerTypes
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.TriggerTypes
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider
  isExternal: false
  name: UnregisterTypeNameProvider
  nameWithType: DynamicTypeProvider.UnregisterTypeNameProvider
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.UnregisterTypeNameProvider
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction
  isExternal: false
  name: RegisterFunction
  nameWithType: DynamicTypeProvider.RegisterFunction
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterFunction
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface
  isExternal: false
  name: RegisterInterface
  nameWithType: DynamicTypeProvider.RegisterInterface
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterInterface
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod
  isExternal: false
  name: RegisterTriggerMethod
  nameWithType: DynamicTypeProvider.RegisterTriggerMethod
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.RegisterTriggerMethod
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType
  isExternal: false
  name: GetFunctionType
  nameWithType: DynamicTypeProvider.GetFunctionType
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetFunctionType
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType
  isExternal: false
  name: GetInterfaceType
  nameWithType: DynamicTypeProvider.GetInterfaceType
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetInterfaceType
- uid: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType*
  commentId: Overload:TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType
  isExternal: false
  name: GetTriggerType
  nameWithType: DynamicTypeProvider.GetTriggerType
  fullName: TimeCockpit.Data.Extensibility.DynamicTypeProvider.GetTriggerType
